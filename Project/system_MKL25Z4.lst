L 1 "src\system_MKL25Z4.c"
N/*
N** ###################################################################
N**     Processor:           MKL25Z128VLK4
N**     Compilers:           ARM Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25RM, Rev.1, Jun 2012
N**     Version:             rev. 1.1, 2012-06-21
N**
N**     Abstract:
N**         Provides a system configuration function and a global variable that
N**         contains the system frequency. It configures the device and initializes
N**         the oscillator (PLL) that is part of the microcontroller device.
N**
N**     Copyright: 2012 Freescale Semiconductor, Inc. All Rights Reserved.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**
N** ###################################################################
N*/
N
N/**
N * @file MKL25Z4
N * @version 1.1
N * @date 2012-06-21
N * @brief Device specific configuration file for MKL25Z4 (implementation file)
N *
N * Provides a system configuration function and a global variable that contains
N * the system frequency. It configures the device and initializes the oscillator
N * (PLL) that is part of the microcontroller device.
N */
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 43 "src\system_MKL25Z4.c" 2
N#include "MKL25Z4.h"
L 1 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 1
N/*
N** ###################################################################
N**     Processors:          MKL25Z128FM4
N**                          MKL25Z128FT4
N**                          MKL25Z128LH4
N**                          MKL25Z128VLK4
N**
N**     Compilers:           ARM Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25P80M48SF0RM, Rev.3, Sep 2012
N**     Version:             rev. 1.5, 2013-04-05
N**
N**     Abstract:
N**         CMSIS Peripheral Access Layer for MKL25Z4
N**
N**     Copyright: 1997 - 2013 Freescale, Inc. All Rights Reserved.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**     - rev. 1.2 (2012-08-01)
N**         Device type UARTLP changed to UART0.
N**     - rev. 1.3 (2012-10-04)
N**         Update according to reference manual rev. 3.
N**     - rev. 1.4 (2012-11-22)
N**         MCG module - bit LOLS in MCG_S register renamed to LOLS0.
N**         NV registers - bit EZPORT_DIS in NV_FOPT register removed.
N**     - rev. 1.5 (2013-04-05)
N**         Changed start of doxygen comment.
N**
N** ###################################################################
N*/
N
N/*!
N * @file MKL25Z4.h
N * @version 1.5
N * @date 2013-04-05
N * @brief CMSIS Peripheral Access Layer for MKL25Z4
N *
N * CMSIS Peripheral Access Layer for MKL25Z4
N */
N
N#if !defined(MKL25Z4_H_)
X#if !0L
N#define MKL25Z4_H_                               /**< Symbol preventing repeated inclusion */
N
N/** Memory map major version (memory maps with equal major version number are
N * compatible) */
N#define MCU_MEM_MAP_VERSION 0x0100u
N/** Memory map minor version */
N#define MCU_MEM_MAP_VERSION_MINOR 0x0005u
N
N
N/* ----------------------------------------------------------------------------
N   -- Interrupt vector numbers
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
N * @{
N */
N
N/** Interrupt Number Definitions */
Ntypedef enum IRQn {
N  /* Core interrupts */
N  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */
N  HardFault_IRQn               = -13,              /**< Cortex-M0 SV Hard Fault Interrupt */
N  SVCall_IRQn                  = -5,               /**< Cortex-M0 SV Call Interrupt */
N  PendSV_IRQn                  = -2,               /**< Cortex-M0 Pend SV Interrupt */
N  SysTick_IRQn                 = -1,               /**< Cortex-M0 System Tick Interrupt */
N
N  /* Device specific interrupts */
N  DMA0_IRQn                    = 0,                /**< DMA channel 0 transfer complete/error interrupt */
N  DMA1_IRQn                    = 1,                /**< DMA channel 1 transfer complete/error interrupt */
N  DMA2_IRQn                    = 2,                /**< DMA channel 2 transfer complete/error interrupt */
N  DMA3_IRQn                    = 3,                /**< DMA channel 3 transfer complete/error interrupt */
N  Reserved20_IRQn              = 4,                /**< Reserved interrupt 20 */
N  FTFA_IRQn                    = 5,                /**< FTFA command complete/read collision interrupt */
N  LVD_LVW_IRQn                 = 6,                /**< Low Voltage Detect, Low Voltage Warning */
N  LLW_IRQn                     = 7,                /**< Low Leakage Wakeup */
N  I2C0_IRQn                    = 8,                /**< I2C0 interrupt */
N  I2C1_IRQn                    = 9,                /**< I2C0 interrupt 25 */
N  SPI0_IRQn                    = 10,               /**< SPI0 interrupt */
N  SPI1_IRQn                    = 11,               /**< SPI1 interrupt */
N  UART0_IRQn                   = 12,               /**< UART0 status/error interrupt */
N  UART1_IRQn                   = 13,               /**< UART1 status/error interrupt */
N  UART2_IRQn                   = 14,               /**< UART2 status/error interrupt */
N  ADC0_IRQn                    = 15,               /**< ADC0 interrupt */
N  CMP0_IRQn                    = 16,               /**< CMP0 interrupt */
N  TPM0_IRQn                    = 17,               /**< TPM0 fault, overflow and channels interrupt */
N  TPM1_IRQn                    = 18,               /**< TPM1 fault, overflow and channels interrupt */
N  TPM2_IRQn                    = 19,               /**< TPM2 fault, overflow and channels interrupt */
N  RTC_IRQn                     = 20,               /**< RTC interrupt */
N  RTC_Seconds_IRQn             = 21,               /**< RTC seconds interrupt */
N  PIT_IRQn                     = 22,               /**< PIT timer interrupt */
N  Reserved39_IRQn              = 23,               /**< Reserved interrupt 39 */
N  USB0_IRQn                    = 24,               /**< USB0 interrupt */
N  DAC0_IRQn                    = 25,               /**< DAC0 interrupt */
N  TSI0_IRQn                    = 26,               /**< TSI0 interrupt */
N  MCG_IRQn                     = 27,               /**< MCG interrupt */
N  LPTimer_IRQn                 = 28,               /**< LPTimer interrupt */
N  Reserved45_IRQn              = 29,               /**< Reserved interrupt 45 */
N  PORTA_IRQn                   = 30,               /**< Port A interrupt */
N  PORTD_IRQn                   = 31                /**< Port D interrupt */
N} IRQn_Type;
N
N/*!
N * @}
N */ /* end of group Interrupt_vector_numbers */
N
N
N/* ----------------------------------------------------------------------------
N   -- Cortex M0 Core Configuration
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Cortex_Core_Configuration Cortex M0 Core Configuration
N * @{
N */
N
N#define __CM0PLUS_REV                  0x0000    /**< Core revision r0p0 */
N#define __MPU_PRESENT                  0         /**< Defines if an MPU is present or not */
N#define __VTOR_PRESENT                 1         /**< Defines if an MPU is present or not */
N#define __NVIC_PRIO_BITS               2         /**< Number of priority bits implemented in the NVIC */
N#define __Vendor_SysTickConfig         0         /**< Vendor specific implementation of SysTickConfig is defined */
N
N#include "core_cm0plus.h"              /* Core Peripheral Access Layer */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\core_cm0plus.h" 1
N/**************************************************************************//**
N * @file     core_cm0plus.h
N * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
N * @version  V5.0.1
N * @date     25. November 2016
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060528 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0PLUS_H_GENERIC
N#define __CORE_CM0PLUS_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex-M0+
N  @{
N */
N
N/*  CMSIS CM0+ definitions */
N#define __CM0PLUS_CMSIS_VERSION_MAIN ( 5U)                                      /*!< [31:16] CMSIS HAL main version */
N#define __CM0PLUS_CMSIS_VERSION_SUB  ( 0U)                                      /*!< [15:0]  CMSIS HAL sub version */
N#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
N                                       __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version number */
X#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) |                                        __CM0PLUS_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (ARM compiler V5) header file
N * @version  V5.0.1
N * @date     03. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060528 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                     __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                  __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE           static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN               __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                    __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                    __attribute__((weak))
N#endif
N#ifndef   __UNALIGNED_UINT32
N  #define __UNALIGNED_UINT32(x)     (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)              __attribute__((aligned(x)))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                  __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT           __packed struct
N#endif
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#else
S  (void)fpscr;
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                    __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    __packed struct T_UINT32 { uint32_t v; };
S      #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           __packed struct
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __attribute__((aligned(x)))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __attribute__((packed))
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __packed__
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                     _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           @packed struct
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 114 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\core_cm0plus.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0PLUS_H_DEPENDANT
N#define __CORE_CM0PLUS_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0PLUS_REV
S    #define __CM0PLUS_REV             0x0000U
S    #warning "__CM0PLUS_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __VTOR_PRESENT
S    #define __VTOR_PRESENT            0U
S    #warning "__VTOR_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex-M0+ */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core MPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N#else
S        uint32_t RESERVED0;
N#endif
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N#endif
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S/**
S  \ingroup  CMSIS_core_register
S  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
S  \brief    Type definitions for the Memory Protection Unit (MPU)
S  @{
S */
S
S/**
S  \brief  Structure type to access the Memory Protection Unit (MPU).
S */
Stypedef struct
S{
S  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
S  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
S  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
S  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
S  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
S} MPU_Type;
S
S/* MPU Type Register Definitions */
S#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
S#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
S
S#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
S#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
S
S#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
S#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
S
S/* MPU Control Register Definitions */
S#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
S#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
S
S#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
S#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
S
S#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
S#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
S
S/* MPU Region Number Register Definitions */
S#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
S#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
S
S/* MPU Region Base Address Register Definitions */
S#define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU RBAR: ADDR Position */
S#define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU RBAR: ADDR Mask */
S
S#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
S#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
S
S#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
S#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
S
S/* MPU Region Attribute and Size Register Definitions */
S#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
S#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
S
S#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
S#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
S
S#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
S#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
S
S#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
S#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
S
S#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
S#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
S
S#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
S#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
S
S#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
S#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
S
S#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
S#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
S
S#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
S#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
S
S#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
S#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
S
S/*@} end of group CMSIS_MPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0+ header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
S  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifndef CMSIS_NVIC_VIRTUAL
N/*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0+ */
N/*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0+ */
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifndef CMSIS_VECTAB_VIRTUAL
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           VTOR must been relocated to SRAM before.
N           If VTOR is not present address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N#else
S    uint32_t *vectors = (uint32_t *)0x0U;
N#endif
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N#else
S  uint32_t *vectors = (uint32_t *)0x0U;
N#endif
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 135 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 2
N#include "system_MKL25Z4.h"            /* Device specific configuration file */
L 1 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\system_MKL25Z4.h" 1
N/*
N** ###################################################################
N**     Processors:          MKL25Z128FM4
N**                          MKL25Z128FT4
N**                          MKL25Z128LH4
N**                          MKL25Z128VLK4
N**
N**     Compilers:           ARM Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25P80M48SF0RM, Rev.3, Sep 2012
N**     Version:             rev. 1.5, 2013-04-05
N**
N**     Abstract:
N**         Provides a system configuration function and a global variable that
N**         contains the system frequency. It configures the device and initializes
N**         the oscillator (PLL) that is part of the microcontroller device.
N**
N**     Copyright: 2013 Freescale, Inc. All Rights Reserved.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**     - rev. 1.2 (2012-08-01)
N**         Device type UARTLP changed to UART0.
N**     - rev. 1.3 (2012-10-04)
N**         Update according to reference manual rev. 3.
N**     - rev. 1.4 (2012-11-22)
N**         MCG module - bit LOLS in MCG_S register renamed to LOLS0.
N**         NV registers - bit EZPORT_DIS in NV_FOPT register removed.
N**     - rev. 1.5 (2013-04-05)
N**         Changed start of doxygen comment.
N**
N** ###################################################################
N*/
N
N/*!
N * @file MKL25Z4
N * @version 1.5
N * @date 2013-04-05
N * @brief Device specific configuration file for MKL25Z4 (header file)
N *
N * Provides a system configuration function and a global variable that contains
N * the system frequency. It configures the device and initializes the oscillator
N * (PLL) that is part of the microcontroller device.
N */
N
N#ifndef SYSTEM_MKL25Z4_H_
N#define SYSTEM_MKL25Z4_H_                        /**< Symbol preventing repeated inclusion */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N/**
N * @brief System clock frequency (core clock)
N *
N * The system clock frequency supplied to the SysTick timer and the processor
N * core clock. This variable can be used by the user application to setup the
N * SysTick timer or configure other parameters. It may also be used by debugger to
N * query the frequency of the debug timer or configure the trace clock speed
N * SystemCoreClock is initialized with a correct predefined value.
N */
Nextern uint32_t SystemCoreClock;
N
N/**
N * @brief Setup the microcontroller system.
N *
N * Typically this function configures the oscillator (PLL) that is part of the
N * microcontroller device. For systems with variable clock speed it also updates
N * the variable SystemCoreClock. SystemInit is called from startup_device file.
N */
Nvoid SystemInit (void);
N
N/**
N * @brief Updates the SystemCoreClock variable.
N *
N * It must be called whenever the core clock is changed during program
N * execution. SystemCoreClockUpdate() evaluates the clock register settings and calculates
N * the current core clock.
N */
Nvoid SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* #if !defined(SYSTEM_MKL25Z4_H_) */
L 136 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 2
N
N/*!
N * @}
N */ /* end of group Cortex_Core_Configuration */
N
N
N/* ----------------------------------------------------------------------------
N   -- Device Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
N * @{
N */
N
N
N/*
N** Start of section using anonymous unions
N*/
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N  #pragma push
N  #pragma anon_unions
N#elif defined(__CWCC__)
S  #pragma push
S  #pragma cpp_extensions on
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=extended
S#else
S  #error Not supported compiler type
N#endif
N
N/* ----------------------------------------------------------------------------
N   -- ADC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer
N * @{
N */
N
N/** ADC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SC1[2];                            /**< ADC Status and Control Registers 1, array offset: 0x0, array step: 0x4 */
X  volatile uint32_t SC1[2];                             
N  __IO uint32_t CFG1;                              /**< ADC Configuration Register 1, offset: 0x8 */
X  volatile uint32_t CFG1;                               
N  __IO uint32_t CFG2;                              /**< ADC Configuration Register 2, offset: 0xC */
X  volatile uint32_t CFG2;                               
N  __I  uint32_t R[2];                              /**< ADC Data Result Register, array offset: 0x10, array step: 0x4 */
X  volatile const  uint32_t R[2];                               
N  __IO uint32_t CV1;                               /**< Compare Value Registers, offset: 0x18 */
X  volatile uint32_t CV1;                                
N  __IO uint32_t CV2;                               /**< Compare Value Registers, offset: 0x1C */
X  volatile uint32_t CV2;                                
N  __IO uint32_t SC2;                               /**< Status and Control Register 2, offset: 0x20 */
X  volatile uint32_t SC2;                                
N  __IO uint32_t SC3;                               /**< Status and Control Register 3, offset: 0x24 */
X  volatile uint32_t SC3;                                
N  __IO uint32_t OFS;                               /**< ADC Offset Correction Register, offset: 0x28 */
X  volatile uint32_t OFS;                                
N  __IO uint32_t PG;                                /**< ADC Plus-Side Gain Register, offset: 0x2C */
X  volatile uint32_t PG;                                 
N  __IO uint32_t MG;                                /**< ADC Minus-Side Gain Register, offset: 0x30 */
X  volatile uint32_t MG;                                 
N  __IO uint32_t CLPD;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x34 */
X  volatile uint32_t CLPD;                               
N  __IO uint32_t CLPS;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x38 */
X  volatile uint32_t CLPS;                               
N  __IO uint32_t CLP4;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x3C */
X  volatile uint32_t CLP4;                               
N  __IO uint32_t CLP3;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x40 */
X  volatile uint32_t CLP3;                               
N  __IO uint32_t CLP2;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x44 */
X  volatile uint32_t CLP2;                               
N  __IO uint32_t CLP1;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x48 */
X  volatile uint32_t CLP1;                               
N  __IO uint32_t CLP0;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x4C */
X  volatile uint32_t CLP0;                               
N       uint8_t RESERVED_0[4];
N  __IO uint32_t CLMD;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x54 */
X  volatile uint32_t CLMD;                               
N  __IO uint32_t CLMS;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x58 */
X  volatile uint32_t CLMS;                               
N  __IO uint32_t CLM4;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x5C */
X  volatile uint32_t CLM4;                               
N  __IO uint32_t CLM3;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x60 */
X  volatile uint32_t CLM3;                               
N  __IO uint32_t CLM2;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x64 */
X  volatile uint32_t CLM2;                               
N  __IO uint32_t CLM1;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x68 */
X  volatile uint32_t CLM1;                               
N  __IO uint32_t CLM0;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x6C */
X  volatile uint32_t CLM0;                               
N} ADC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- ADC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Register_Masks ADC Register Masks
N * @{
N */
N
N/* SC1 Bit Fields */
N#define ADC_SC1_ADCH_MASK                        0x1Fu
N#define ADC_SC1_ADCH_SHIFT                       0
N#define ADC_SC1_ADCH(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_ADCH_SHIFT))&ADC_SC1_ADCH_MASK)
N#define ADC_SC1_DIFF_MASK                        0x20u
N#define ADC_SC1_DIFF_SHIFT                       5
N#define ADC_SC1_AIEN_MASK                        0x40u
N#define ADC_SC1_AIEN_SHIFT                       6
N#define ADC_SC1_COCO_MASK                        0x80u
N#define ADC_SC1_COCO_SHIFT                       7
N/* CFG1 Bit Fields */
N#define ADC_CFG1_ADICLK_MASK                     0x3u
N#define ADC_CFG1_ADICLK_SHIFT                    0
N#define ADC_CFG1_ADICLK(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADICLK_SHIFT))&ADC_CFG1_ADICLK_MASK)
N#define ADC_CFG1_MODE_MASK                       0xCu
N#define ADC_CFG1_MODE_SHIFT                      2
N#define ADC_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_MODE_SHIFT))&ADC_CFG1_MODE_MASK)
N#define ADC_CFG1_ADLSMP_MASK                     0x10u
N#define ADC_CFG1_ADLSMP_SHIFT                    4
N#define ADC_CFG1_ADIV_MASK                       0x60u
N#define ADC_CFG1_ADIV_SHIFT                      5
N#define ADC_CFG1_ADIV(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADIV_SHIFT))&ADC_CFG1_ADIV_MASK)
N#define ADC_CFG1_ADLPC_MASK                      0x80u
N#define ADC_CFG1_ADLPC_SHIFT                     7
N/* CFG2 Bit Fields */
N#define ADC_CFG2_ADLSTS_MASK                     0x3u
N#define ADC_CFG2_ADLSTS_SHIFT                    0
N#define ADC_CFG2_ADLSTS(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADLSTS_SHIFT))&ADC_CFG2_ADLSTS_MASK)
N#define ADC_CFG2_ADHSC_MASK                      0x4u
N#define ADC_CFG2_ADHSC_SHIFT                     2
N#define ADC_CFG2_ADACKEN_MASK                    0x8u
N#define ADC_CFG2_ADACKEN_SHIFT                   3
N#define ADC_CFG2_MUXSEL_MASK                     0x10u
N#define ADC_CFG2_MUXSEL_SHIFT                    4
N/* R Bit Fields */
N#define ADC_R_D_MASK                             0xFFFFu
N#define ADC_R_D_SHIFT                            0
N#define ADC_R_D(x)                               (((uint32_t)(((uint32_t)(x))<<ADC_R_D_SHIFT))&ADC_R_D_MASK)
N/* CV1 Bit Fields */
N#define ADC_CV1_CV_MASK                          0xFFFFu
N#define ADC_CV1_CV_SHIFT                         0
N#define ADC_CV1_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV1_CV_SHIFT))&ADC_CV1_CV_MASK)
N/* CV2 Bit Fields */
N#define ADC_CV2_CV_MASK                          0xFFFFu
N#define ADC_CV2_CV_SHIFT                         0
N#define ADC_CV2_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV2_CV_SHIFT))&ADC_CV2_CV_MASK)
N/* SC2 Bit Fields */
N#define ADC_SC2_REFSEL_MASK                      0x3u
N#define ADC_SC2_REFSEL_SHIFT                     0
N#define ADC_SC2_REFSEL(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_SC2_REFSEL_SHIFT))&ADC_SC2_REFSEL_MASK)
N#define ADC_SC2_DMAEN_MASK                       0x4u
N#define ADC_SC2_DMAEN_SHIFT                      2
N#define ADC_SC2_ACREN_MASK                       0x8u
N#define ADC_SC2_ACREN_SHIFT                      3
N#define ADC_SC2_ACFGT_MASK                       0x10u
N#define ADC_SC2_ACFGT_SHIFT                      4
N#define ADC_SC2_ACFE_MASK                        0x20u
N#define ADC_SC2_ACFE_SHIFT                       5
N#define ADC_SC2_ADTRG_MASK                       0x40u
N#define ADC_SC2_ADTRG_SHIFT                      6
N#define ADC_SC2_ADACT_MASK                       0x80u
N#define ADC_SC2_ADACT_SHIFT                      7
N/* SC3 Bit Fields */
N#define ADC_SC3_AVGS_MASK                        0x3u
N#define ADC_SC3_AVGS_SHIFT                       0
N#define ADC_SC3_AVGS(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGS_SHIFT))&ADC_SC3_AVGS_MASK)
N#define ADC_SC3_AVGE_MASK                        0x4u
N#define ADC_SC3_AVGE_SHIFT                       2
N#define ADC_SC3_ADCO_MASK                        0x8u
N#define ADC_SC3_ADCO_SHIFT                       3
N#define ADC_SC3_CALF_MASK                        0x40u
N#define ADC_SC3_CALF_SHIFT                       6
N#define ADC_SC3_CAL_MASK                         0x80u
N#define ADC_SC3_CAL_SHIFT                        7
N/* OFS Bit Fields */
N#define ADC_OFS_OFS_MASK                         0xFFFFu
N#define ADC_OFS_OFS_SHIFT                        0
N#define ADC_OFS_OFS(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_OFS_OFS_SHIFT))&ADC_OFS_OFS_MASK)
N/* PG Bit Fields */
N#define ADC_PG_PG_MASK                           0xFFFFu
N#define ADC_PG_PG_SHIFT                          0
N#define ADC_PG_PG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_PG_PG_SHIFT))&ADC_PG_PG_MASK)
N/* MG Bit Fields */
N#define ADC_MG_MG_MASK                           0xFFFFu
N#define ADC_MG_MG_SHIFT                          0
N#define ADC_MG_MG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_MG_MG_SHIFT))&ADC_MG_MG_MASK)
N/* CLPD Bit Fields */
N#define ADC_CLPD_CLPD_MASK                       0x3Fu
N#define ADC_CLPD_CLPD_SHIFT                      0
N#define ADC_CLPD_CLPD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPD_CLPD_SHIFT))&ADC_CLPD_CLPD_MASK)
N/* CLPS Bit Fields */
N#define ADC_CLPS_CLPS_MASK                       0x3Fu
N#define ADC_CLPS_CLPS_SHIFT                      0
N#define ADC_CLPS_CLPS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPS_CLPS_SHIFT))&ADC_CLPS_CLPS_MASK)
N/* CLP4 Bit Fields */
N#define ADC_CLP4_CLP4_MASK                       0x3FFu
N#define ADC_CLP4_CLP4_SHIFT                      0
N#define ADC_CLP4_CLP4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP4_CLP4_SHIFT))&ADC_CLP4_CLP4_MASK)
N/* CLP3 Bit Fields */
N#define ADC_CLP3_CLP3_MASK                       0x1FFu
N#define ADC_CLP3_CLP3_SHIFT                      0
N#define ADC_CLP3_CLP3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP3_CLP3_SHIFT))&ADC_CLP3_CLP3_MASK)
N/* CLP2 Bit Fields */
N#define ADC_CLP2_CLP2_MASK                       0xFFu
N#define ADC_CLP2_CLP2_SHIFT                      0
N#define ADC_CLP2_CLP2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP2_CLP2_SHIFT))&ADC_CLP2_CLP2_MASK)
N/* CLP1 Bit Fields */
N#define ADC_CLP1_CLP1_MASK                       0x7Fu
N#define ADC_CLP1_CLP1_SHIFT                      0
N#define ADC_CLP1_CLP1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP1_CLP1_SHIFT))&ADC_CLP1_CLP1_MASK)
N/* CLP0 Bit Fields */
N#define ADC_CLP0_CLP0_MASK                       0x3Fu
N#define ADC_CLP0_CLP0_SHIFT                      0
N#define ADC_CLP0_CLP0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP0_CLP0_SHIFT))&ADC_CLP0_CLP0_MASK)
N/* CLMD Bit Fields */
N#define ADC_CLMD_CLMD_MASK                       0x3Fu
N#define ADC_CLMD_CLMD_SHIFT                      0
N#define ADC_CLMD_CLMD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMD_CLMD_SHIFT))&ADC_CLMD_CLMD_MASK)
N/* CLMS Bit Fields */
N#define ADC_CLMS_CLMS_MASK                       0x3Fu
N#define ADC_CLMS_CLMS_SHIFT                      0
N#define ADC_CLMS_CLMS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMS_CLMS_SHIFT))&ADC_CLMS_CLMS_MASK)
N/* CLM4 Bit Fields */
N#define ADC_CLM4_CLM4_MASK                       0x3FFu
N#define ADC_CLM4_CLM4_SHIFT                      0
N#define ADC_CLM4_CLM4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM4_CLM4_SHIFT))&ADC_CLM4_CLM4_MASK)
N/* CLM3 Bit Fields */
N#define ADC_CLM3_CLM3_MASK                       0x1FFu
N#define ADC_CLM3_CLM3_SHIFT                      0
N#define ADC_CLM3_CLM3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM3_CLM3_SHIFT))&ADC_CLM3_CLM3_MASK)
N/* CLM2 Bit Fields */
N#define ADC_CLM2_CLM2_MASK                       0xFFu
N#define ADC_CLM2_CLM2_SHIFT                      0
N#define ADC_CLM2_CLM2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM2_CLM2_SHIFT))&ADC_CLM2_CLM2_MASK)
N/* CLM1 Bit Fields */
N#define ADC_CLM1_CLM1_MASK                       0x7Fu
N#define ADC_CLM1_CLM1_SHIFT                      0
N#define ADC_CLM1_CLM1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM1_CLM1_SHIFT))&ADC_CLM1_CLM1_MASK)
N/* CLM0 Bit Fields */
N#define ADC_CLM0_CLM0_MASK                       0x3Fu
N#define ADC_CLM0_CLM0_SHIFT                      0
N#define ADC_CLM0_CLM0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM0_CLM0_SHIFT))&ADC_CLM0_CLM0_MASK)
N
N/*!
N * @}
N */ /* end of group ADC_Register_Masks */
N
N
N/* ADC - Peripheral instance base addresses */
N/** Peripheral ADC0 base address */
N#define ADC0_BASE                                (0x4003B000u)
N/** Peripheral ADC0 base pointer */
N#define ADC0                                     ((ADC_Type *)ADC0_BASE)
N/** Array initializer of ADC peripheral base pointers */
N#define ADC_BASES                                { ADC0 }
N
N/*!
N * @}
N */ /* end of group ADC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- CMP Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Peripheral_Access_Layer CMP Peripheral Access Layer
N * @{
N */
N
N/** CMP - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CR0;                                /**< CMP Control Register 0, offset: 0x0 */
X  volatile uint8_t CR0;                                 
N  __IO uint8_t CR1;                                /**< CMP Control Register 1, offset: 0x1 */
X  volatile uint8_t CR1;                                 
N  __IO uint8_t FPR;                                /**< CMP Filter Period Register, offset: 0x2 */
X  volatile uint8_t FPR;                                 
N  __IO uint8_t SCR;                                /**< CMP Status and Control Register, offset: 0x3 */
X  volatile uint8_t SCR;                                 
N  __IO uint8_t DACCR;                              /**< DAC Control Register, offset: 0x4 */
X  volatile uint8_t DACCR;                               
N  __IO uint8_t MUXCR;                              /**< MUX Control Register, offset: 0x5 */
X  volatile uint8_t MUXCR;                               
N} CMP_Type;
N
N/* ----------------------------------------------------------------------------
N   -- CMP Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Register_Masks CMP Register Masks
N * @{
N */
N
N/* CR0 Bit Fields */
N#define CMP_CR0_HYSTCTR_MASK                     0x3u
N#define CMP_CR0_HYSTCTR_SHIFT                    0
N#define CMP_CR0_HYSTCTR(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_CR0_HYSTCTR_SHIFT))&CMP_CR0_HYSTCTR_MASK)
N#define CMP_CR0_FILTER_CNT_MASK                  0x70u
N#define CMP_CR0_FILTER_CNT_SHIFT                 4
N#define CMP_CR0_FILTER_CNT(x)                    (((uint8_t)(((uint8_t)(x))<<CMP_CR0_FILTER_CNT_SHIFT))&CMP_CR0_FILTER_CNT_MASK)
N/* CR1 Bit Fields */
N#define CMP_CR1_EN_MASK                          0x1u
N#define CMP_CR1_EN_SHIFT                         0
N#define CMP_CR1_OPE_MASK                         0x2u
N#define CMP_CR1_OPE_SHIFT                        1
N#define CMP_CR1_COS_MASK                         0x4u
N#define CMP_CR1_COS_SHIFT                        2
N#define CMP_CR1_INV_MASK                         0x8u
N#define CMP_CR1_INV_SHIFT                        3
N#define CMP_CR1_PMODE_MASK                       0x10u
N#define CMP_CR1_PMODE_SHIFT                      4
N#define CMP_CR1_TRIGM_MASK                       0x20u
N#define CMP_CR1_TRIGM_SHIFT                      5
N#define CMP_CR1_WE_MASK                          0x40u
N#define CMP_CR1_WE_SHIFT                         6
N#define CMP_CR1_SE_MASK                          0x80u
N#define CMP_CR1_SE_SHIFT                         7
N/* FPR Bit Fields */
N#define CMP_FPR_FILT_PER_MASK                    0xFFu
N#define CMP_FPR_FILT_PER_SHIFT                   0
N#define CMP_FPR_FILT_PER(x)                      (((uint8_t)(((uint8_t)(x))<<CMP_FPR_FILT_PER_SHIFT))&CMP_FPR_FILT_PER_MASK)
N/* SCR Bit Fields */
N#define CMP_SCR_COUT_MASK                        0x1u
N#define CMP_SCR_COUT_SHIFT                       0
N#define CMP_SCR_CFF_MASK                         0x2u
N#define CMP_SCR_CFF_SHIFT                        1
N#define CMP_SCR_CFR_MASK                         0x4u
N#define CMP_SCR_CFR_SHIFT                        2
N#define CMP_SCR_IEF_MASK                         0x8u
N#define CMP_SCR_IEF_SHIFT                        3
N#define CMP_SCR_IER_MASK                         0x10u
N#define CMP_SCR_IER_SHIFT                        4
N#define CMP_SCR_DMAEN_MASK                       0x40u
N#define CMP_SCR_DMAEN_SHIFT                      6
N/* DACCR Bit Fields */
N#define CMP_DACCR_VOSEL_MASK                     0x3Fu
N#define CMP_DACCR_VOSEL_SHIFT                    0
N#define CMP_DACCR_VOSEL(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_VOSEL_SHIFT))&CMP_DACCR_VOSEL_MASK)
N#define CMP_DACCR_VRSEL_MASK                     0x40u
N#define CMP_DACCR_VRSEL_SHIFT                    6
N#define CMP_DACCR_DACEN_MASK                     0x80u
N#define CMP_DACCR_DACEN_SHIFT                    7
N/* MUXCR Bit Fields */
N#define CMP_MUXCR_MSEL_MASK                      0x7u
N#define CMP_MUXCR_MSEL_SHIFT                     0
N#define CMP_MUXCR_MSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_MSEL_SHIFT))&CMP_MUXCR_MSEL_MASK)
N#define CMP_MUXCR_PSEL_MASK                      0x38u
N#define CMP_MUXCR_PSEL_SHIFT                     3
N#define CMP_MUXCR_PSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_PSEL_SHIFT))&CMP_MUXCR_PSEL_MASK)
N#define CMP_MUXCR_PSTM_MASK                      0x80u
N#define CMP_MUXCR_PSTM_SHIFT                     7
N
N/*!
N * @}
N */ /* end of group CMP_Register_Masks */
N
N
N/* CMP - Peripheral instance base addresses */
N/** Peripheral CMP0 base address */
N#define CMP0_BASE                                (0x40073000u)
N/** Peripheral CMP0 base pointer */
N#define CMP0                                     ((CMP_Type *)CMP0_BASE)
N/** Array initializer of CMP peripheral base pointers */
N#define CMP_BASES                                { CMP0 }
N
N/*!
N * @}
N */ /* end of group CMP_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DAC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Peripheral_Access_Layer DAC Peripheral Access Layer
N * @{
N */
N
N/** DAC - Register Layout Typedef */
Ntypedef struct {
N  struct {                                         /* offset: 0x0, array step: 0x2 */
N    __IO uint8_t DATL;                               /**< DAC Data Low Register, array offset: 0x0, array step: 0x2 */
X    volatile uint8_t DATL;                                
N    __IO uint8_t DATH;                               /**< DAC Data High Register, array offset: 0x1, array step: 0x2 */
X    volatile uint8_t DATH;                                
N  } DAT[2];
N       uint8_t RESERVED_0[28];
N  __IO uint8_t SR;                                 /**< DAC Status Register, offset: 0x20 */
X  volatile uint8_t SR;                                  
N  __IO uint8_t C0;                                 /**< DAC Control Register, offset: 0x21 */
X  volatile uint8_t C0;                                  
N  __IO uint8_t C1;                                 /**< DAC Control Register 1, offset: 0x22 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< DAC Control Register 2, offset: 0x23 */
X  volatile uint8_t C2;                                  
N} DAC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- DAC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Register_Masks DAC Register Masks
N * @{
N */
N
N/* DATL Bit Fields */
N#define DAC_DATL_DATA0_MASK                      0xFFu
N#define DAC_DATL_DATA0_SHIFT                     0
N#define DAC_DATL_DATA0(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATL_DATA0_SHIFT))&DAC_DATL_DATA0_MASK)
N/* DATH Bit Fields */
N#define DAC_DATH_DATA1_MASK                      0xFu
N#define DAC_DATH_DATA1_SHIFT                     0
N#define DAC_DATH_DATA1(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATH_DATA1_SHIFT))&DAC_DATH_DATA1_MASK)
N/* SR Bit Fields */
N#define DAC_SR_DACBFRPBF_MASK                    0x1u
N#define DAC_SR_DACBFRPBF_SHIFT                   0
N#define DAC_SR_DACBFRPTF_MASK                    0x2u
N#define DAC_SR_DACBFRPTF_SHIFT                   1
N/* C0 Bit Fields */
N#define DAC_C0_DACBBIEN_MASK                     0x1u
N#define DAC_C0_DACBBIEN_SHIFT                    0
N#define DAC_C0_DACBTIEN_MASK                     0x2u
N#define DAC_C0_DACBTIEN_SHIFT                    1
N#define DAC_C0_LPEN_MASK                         0x8u
N#define DAC_C0_LPEN_SHIFT                        3
N#define DAC_C0_DACSWTRG_MASK                     0x10u
N#define DAC_C0_DACSWTRG_SHIFT                    4
N#define DAC_C0_DACTRGSEL_MASK                    0x20u
N#define DAC_C0_DACTRGSEL_SHIFT                   5
N#define DAC_C0_DACRFS_MASK                       0x40u
N#define DAC_C0_DACRFS_SHIFT                      6
N#define DAC_C0_DACEN_MASK                        0x80u
N#define DAC_C0_DACEN_SHIFT                       7
N/* C1 Bit Fields */
N#define DAC_C1_DACBFEN_MASK                      0x1u
N#define DAC_C1_DACBFEN_SHIFT                     0
N#define DAC_C1_DACBFMD_MASK                      0x4u
N#define DAC_C1_DACBFMD_SHIFT                     2
N#define DAC_C1_DMAEN_MASK                        0x80u
N#define DAC_C1_DMAEN_SHIFT                       7
N/* C2 Bit Fields */
N#define DAC_C2_DACBFUP_MASK                      0x1u
N#define DAC_C2_DACBFUP_SHIFT                     0
N#define DAC_C2_DACBFRP_MASK                      0x10u
N#define DAC_C2_DACBFRP_SHIFT                     4
N
N/*!
N * @}
N */ /* end of group DAC_Register_Masks */
N
N
N/* DAC - Peripheral instance base addresses */
N/** Peripheral DAC0 base address */
N#define DAC0_BASE                                (0x4003F000u)
N/** Peripheral DAC0 base pointer */
N#define DAC0                                     ((DAC_Type *)DAC0_BASE)
N/** Array initializer of DAC peripheral base pointers */
N#define DAC_BASES                                { DAC0 }
N
N/*!
N * @}
N */ /* end of group DAC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMA Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Peripheral_Access_Layer DMA Peripheral Access Layer
N * @{
N */
N
N/** DMA - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[256];
N  struct {                                         /* offset: 0x100, array step: 0x10 */
N    __IO uint32_t SAR;                               /**< Source Address Register, array offset: 0x100, array step: 0x10 */
X    volatile uint32_t SAR;                                
N    __IO uint32_t DAR;                               /**< Destination Address Register, array offset: 0x104, array step: 0x10 */
X    volatile uint32_t DAR;                                
N    union {                                          /* offset: 0x108, array step: 0x10 */
N      __IO uint32_t DSR_BCR;                           /**< DMA Status Register / Byte Count Register, array offset: 0x108, array step: 0x10 */
X      volatile uint32_t DSR_BCR;                            
N      struct {                                         /* offset: 0x108, array step: 0x10 */
N             uint8_t RESERVED_0[3];
N        __IO uint8_t DSR;                                /**< DMA_DSR0 register...DMA_DSR3 register., array offset: 0x10B, array step: 0x10 */
X        volatile uint8_t DSR;                                 
N      } DMA_DSR_ACCESS8BIT;
N    };
N    __IO uint32_t DCR;                               /**< DMA Control Register, array offset: 0x10C, array step: 0x10 */
X    volatile uint32_t DCR;                                
N  } DMA[4];
N} DMA_Type;
N
N/* ----------------------------------------------------------------------------
N   -- DMA Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Register_Masks DMA Register Masks
N * @{
N */
N
N/* SAR Bit Fields */
N#define DMA_SAR_SAR_MASK                         0xFFFFFFFFu
N#define DMA_SAR_SAR_SHIFT                        0
N#define DMA_SAR_SAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_SAR_SAR_SHIFT))&DMA_SAR_SAR_MASK)
N/* DAR Bit Fields */
N#define DMA_DAR_DAR_MASK                         0xFFFFFFFFu
N#define DMA_DAR_DAR_SHIFT                        0
N#define DMA_DAR_DAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_DAR_DAR_SHIFT))&DMA_DAR_DAR_MASK)
N/* DSR_BCR Bit Fields */
N#define DMA_DSR_BCR_BCR_MASK                     0xFFFFFFu
N#define DMA_DSR_BCR_BCR_SHIFT                    0
N#define DMA_DSR_BCR_BCR(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BCR_SHIFT))&DMA_DSR_BCR_BCR_MASK)
N#define DMA_DSR_BCR_DONE_MASK                    0x1000000u
N#define DMA_DSR_BCR_DONE_SHIFT                   24
N#define DMA_DSR_BCR_BSY_MASK                     0x2000000u
N#define DMA_DSR_BCR_BSY_SHIFT                    25
N#define DMA_DSR_BCR_REQ_MASK                     0x4000000u
N#define DMA_DSR_BCR_REQ_SHIFT                    26
N#define DMA_DSR_BCR_BED_MASK                     0x10000000u
N#define DMA_DSR_BCR_BED_SHIFT                    28
N#define DMA_DSR_BCR_BES_MASK                     0x20000000u
N#define DMA_DSR_BCR_BES_SHIFT                    29
N#define DMA_DSR_BCR_CE_MASK                      0x40000000u
N#define DMA_DSR_BCR_CE_SHIFT                     30
N/* DCR Bit Fields */
N#define DMA_DCR_LCH2_MASK                        0x3u
N#define DMA_DCR_LCH2_SHIFT                       0
N#define DMA_DCR_LCH2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH2_SHIFT))&DMA_DCR_LCH2_MASK)
N#define DMA_DCR_LCH1_MASK                        0xCu
N#define DMA_DCR_LCH1_SHIFT                       2
N#define DMA_DCR_LCH1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH1_SHIFT))&DMA_DCR_LCH1_MASK)
N#define DMA_DCR_LINKCC_MASK                      0x30u
N#define DMA_DCR_LINKCC_SHIFT                     4
N#define DMA_DCR_LINKCC(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LINKCC_SHIFT))&DMA_DCR_LINKCC_MASK)
N#define DMA_DCR_D_REQ_MASK                       0x80u
N#define DMA_DCR_D_REQ_SHIFT                      7
N#define DMA_DCR_DMOD_MASK                        0xF00u
N#define DMA_DCR_DMOD_SHIFT                       8
N#define DMA_DCR_DMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DMOD_SHIFT))&DMA_DCR_DMOD_MASK)
N#define DMA_DCR_SMOD_MASK                        0xF000u
N#define DMA_DCR_SMOD_SHIFT                       12
N#define DMA_DCR_SMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SMOD_SHIFT))&DMA_DCR_SMOD_MASK)
N#define DMA_DCR_START_MASK                       0x10000u
N#define DMA_DCR_START_SHIFT                      16
N#define DMA_DCR_DSIZE_MASK                       0x60000u
N#define DMA_DCR_DSIZE_SHIFT                      17
N#define DMA_DCR_DSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DSIZE_SHIFT))&DMA_DCR_DSIZE_MASK)
N#define DMA_DCR_DINC_MASK                        0x80000u
N#define DMA_DCR_DINC_SHIFT                       19
N#define DMA_DCR_SSIZE_MASK                       0x300000u
N#define DMA_DCR_SSIZE_SHIFT                      20
N#define DMA_DCR_SSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SSIZE_SHIFT))&DMA_DCR_SSIZE_MASK)
N#define DMA_DCR_SINC_MASK                        0x400000u
N#define DMA_DCR_SINC_SHIFT                       22
N#define DMA_DCR_EADREQ_MASK                      0x800000u
N#define DMA_DCR_EADREQ_SHIFT                     23
N#define DMA_DCR_AA_MASK                          0x10000000u
N#define DMA_DCR_AA_SHIFT                         28
N#define DMA_DCR_CS_MASK                          0x20000000u
N#define DMA_DCR_CS_SHIFT                         29
N#define DMA_DCR_ERQ_MASK                         0x40000000u
N#define DMA_DCR_ERQ_SHIFT                        30
N#define DMA_DCR_EINT_MASK                        0x80000000u
N#define DMA_DCR_EINT_SHIFT                       31
N
N/*!
N * @}
N */ /* end of group DMA_Register_Masks */
N
N
N/* DMA - Peripheral instance base addresses */
N/** Peripheral DMA base address */
N#define DMA_BASE                                 (0x40008000u)
N/** Peripheral DMA base pointer */
N#define DMA0                                     ((DMA_Type *)DMA_BASE)
N/** Array initializer of DMA peripheral base pointers */
N#define DMA_BASES                                { DMA0 }
N
N/*!
N * @}
N */ /* end of group DMA_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Peripheral_Access_Layer DMAMUX Peripheral Access Layer
N * @{
N */
N
N/** DMAMUX - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CHCFG[4];                           /**< Channel Configuration register, array offset: 0x0, array step: 0x1 */
X  volatile uint8_t CHCFG[4];                            
N} DMAMUX_Type;
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Register_Masks DMAMUX Register Masks
N * @{
N */
N
N/* CHCFG Bit Fields */
N#define DMAMUX_CHCFG_SOURCE_MASK                 0x3Fu
N#define DMAMUX_CHCFG_SOURCE_SHIFT                0
N#define DMAMUX_CHCFG_SOURCE(x)                   (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_SOURCE_SHIFT))&DMAMUX_CHCFG_SOURCE_MASK)
N#define DMAMUX_CHCFG_TRIG_MASK                   0x40u
N#define DMAMUX_CHCFG_TRIG_SHIFT                  6
N#define DMAMUX_CHCFG_ENBL_MASK                   0x80u
N#define DMAMUX_CHCFG_ENBL_SHIFT                  7
N
N/*!
N * @}
N */ /* end of group DMAMUX_Register_Masks */
N
N
N/* DMAMUX - Peripheral instance base addresses */
N/** Peripheral DMAMUX0 base address */
N#define DMAMUX0_BASE                             (0x40021000u)
N/** Peripheral DMAMUX0 base pointer */
N#define DMAMUX0                                  ((DMAMUX_Type *)DMAMUX0_BASE)
N/** Array initializer of DMAMUX peripheral base pointers */
N#define DMAMUX_BASES                             { DMAMUX0 }
N
N/*!
N * @}
N */ /* end of group DMAMUX_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Peripheral_Access_Layer FGPIO Peripheral Access Layer
N * @{
N */
N
N/** FGPIO - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
X  volatile uint32_t PDOR;                               
N  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
X  volatile  uint32_t PSOR;                               
N  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
X  volatile  uint32_t PCOR;                               
N  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
X  volatile  uint32_t PTOR;                               
N  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
X  volatile const  uint32_t PDIR;                               
N  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
X  volatile uint32_t PDDR;                               
N} FGPIO_Type;
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Register_Masks FGPIO Register Masks
N * @{
N */
N
N/* PDOR Bit Fields */
N#define FGPIO_PDOR_PDO_MASK                      0xFFFFFFFFu
N#define FGPIO_PDOR_PDO_SHIFT                     0
N#define FGPIO_PDOR_PDO(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDOR_PDO_SHIFT))&FGPIO_PDOR_PDO_MASK)
N/* PSOR Bit Fields */
N#define FGPIO_PSOR_PTSO_MASK                     0xFFFFFFFFu
N#define FGPIO_PSOR_PTSO_SHIFT                    0
N#define FGPIO_PSOR_PTSO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PSOR_PTSO_SHIFT))&FGPIO_PSOR_PTSO_MASK)
N/* PCOR Bit Fields */
N#define FGPIO_PCOR_PTCO_MASK                     0xFFFFFFFFu
N#define FGPIO_PCOR_PTCO_SHIFT                    0
N#define FGPIO_PCOR_PTCO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PCOR_PTCO_SHIFT))&FGPIO_PCOR_PTCO_MASK)
N/* PTOR Bit Fields */
N#define FGPIO_PTOR_PTTO_MASK                     0xFFFFFFFFu
N#define FGPIO_PTOR_PTTO_SHIFT                    0
N#define FGPIO_PTOR_PTTO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PTOR_PTTO_SHIFT))&FGPIO_PTOR_PTTO_MASK)
N/* PDIR Bit Fields */
N#define FGPIO_PDIR_PDI_MASK                      0xFFFFFFFFu
N#define FGPIO_PDIR_PDI_SHIFT                     0
N#define FGPIO_PDIR_PDI(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDIR_PDI_SHIFT))&FGPIO_PDIR_PDI_MASK)
N/* PDDR Bit Fields */
N#define FGPIO_PDDR_PDD_MASK                      0xFFFFFFFFu
N#define FGPIO_PDDR_PDD_SHIFT                     0
N#define FGPIO_PDDR_PDD(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDDR_PDD_SHIFT))&FGPIO_PDDR_PDD_MASK)
N
N/*!
N * @}
N */ /* end of group FGPIO_Register_Masks */
N
N
N/* FGPIO - Peripheral instance base addresses */
N/** Peripheral FPTA base address */
N#define FPTA_BASE                                (0xF80FF000u)
N/** Peripheral FPTA base pointer */
N#define FPTA                                     ((FGPIO_Type *)FPTA_BASE)
N/** Peripheral FPTB base address */
N#define FPTB_BASE                                (0xF80FF040u)
N/** Peripheral FPTB base pointer */
N#define FPTB                                     ((FGPIO_Type *)FPTB_BASE)
N/** Peripheral FPTC base address */
N#define FPTC_BASE                                (0xF80FF080u)
N/** Peripheral FPTC base pointer */
N#define FPTC                                     ((FGPIO_Type *)FPTC_BASE)
N/** Peripheral FPTD base address */
N#define FPTD_BASE                                (0xF80FF0C0u)
N/** Peripheral FPTD base pointer */
N#define FPTD                                     ((FGPIO_Type *)FPTD_BASE)
N/** Peripheral FPTE base address */
N#define FPTE_BASE                                (0xF80FF100u)
N/** Peripheral FPTE base pointer */
N#define FPTE                                     ((FGPIO_Type *)FPTE_BASE)
N/** Array initializer of FGPIO peripheral base pointers */
N#define FGPIO_BASES                              { FPTA, FPTB, FPTC, FPTD, FPTE }
N
N/*!
N * @}
N */ /* end of group FGPIO_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FTFA Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Peripheral_Access_Layer FTFA Peripheral Access Layer
N * @{
N */
N
N/** FTFA - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t FSTAT;                              /**< Flash Status Register, offset: 0x0 */
X  volatile uint8_t FSTAT;                               
N  __IO uint8_t FCNFG;                              /**< Flash Configuration Register, offset: 0x1 */
X  volatile uint8_t FCNFG;                               
N  __I  uint8_t FSEC;                               /**< Flash Security Register, offset: 0x2 */
X  volatile const  uint8_t FSEC;                                
N  __I  uint8_t FOPT;                               /**< Flash Option Register, offset: 0x3 */
X  volatile const  uint8_t FOPT;                                
N  __IO uint8_t FCCOB3;                             /**< Flash Common Command Object Registers, offset: 0x4 */
X  volatile uint8_t FCCOB3;                              
N  __IO uint8_t FCCOB2;                             /**< Flash Common Command Object Registers, offset: 0x5 */
X  volatile uint8_t FCCOB2;                              
N  __IO uint8_t FCCOB1;                             /**< Flash Common Command Object Registers, offset: 0x6 */
X  volatile uint8_t FCCOB1;                              
N  __IO uint8_t FCCOB0;                             /**< Flash Common Command Object Registers, offset: 0x7 */
X  volatile uint8_t FCCOB0;                              
N  __IO uint8_t FCCOB7;                             /**< Flash Common Command Object Registers, offset: 0x8 */
X  volatile uint8_t FCCOB7;                              
N  __IO uint8_t FCCOB6;                             /**< Flash Common Command Object Registers, offset: 0x9 */
X  volatile uint8_t FCCOB6;                              
N  __IO uint8_t FCCOB5;                             /**< Flash Common Command Object Registers, offset: 0xA */
X  volatile uint8_t FCCOB5;                              
N  __IO uint8_t FCCOB4;                             /**< Flash Common Command Object Registers, offset: 0xB */
X  volatile uint8_t FCCOB4;                              
N  __IO uint8_t FCCOBB;                             /**< Flash Common Command Object Registers, offset: 0xC */
X  volatile uint8_t FCCOBB;                              
N  __IO uint8_t FCCOBA;                             /**< Flash Common Command Object Registers, offset: 0xD */
X  volatile uint8_t FCCOBA;                              
N  __IO uint8_t FCCOB9;                             /**< Flash Common Command Object Registers, offset: 0xE */
X  volatile uint8_t FCCOB9;                              
N  __IO uint8_t FCCOB8;                             /**< Flash Common Command Object Registers, offset: 0xF */
X  volatile uint8_t FCCOB8;                              
N  __IO uint8_t FPROT3;                             /**< Program Flash Protection Registers, offset: 0x10 */
X  volatile uint8_t FPROT3;                              
N  __IO uint8_t FPROT2;                             /**< Program Flash Protection Registers, offset: 0x11 */
X  volatile uint8_t FPROT2;                              
N  __IO uint8_t FPROT1;                             /**< Program Flash Protection Registers, offset: 0x12 */
X  volatile uint8_t FPROT1;                              
N  __IO uint8_t FPROT0;                             /**< Program Flash Protection Registers, offset: 0x13 */
X  volatile uint8_t FPROT0;                              
N} FTFA_Type;
N
N/* ----------------------------------------------------------------------------
N   -- FTFA Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Register_Masks FTFA Register Masks
N * @{
N */
N
N/* FSTAT Bit Fields */
N#define FTFA_FSTAT_MGSTAT0_MASK                  0x1u
N#define FTFA_FSTAT_MGSTAT0_SHIFT                 0
N#define FTFA_FSTAT_FPVIOL_MASK                   0x10u
N#define FTFA_FSTAT_FPVIOL_SHIFT                  4
N#define FTFA_FSTAT_ACCERR_MASK                   0x20u
N#define FTFA_FSTAT_ACCERR_SHIFT                  5
N#define FTFA_FSTAT_RDCOLERR_MASK                 0x40u
N#define FTFA_FSTAT_RDCOLERR_SHIFT                6
N#define FTFA_FSTAT_CCIF_MASK                     0x80u
N#define FTFA_FSTAT_CCIF_SHIFT                    7
N/* FCNFG Bit Fields */
N#define FTFA_FCNFG_ERSSUSP_MASK                  0x10u
N#define FTFA_FCNFG_ERSSUSP_SHIFT                 4
N#define FTFA_FCNFG_ERSAREQ_MASK                  0x20u
N#define FTFA_FCNFG_ERSAREQ_SHIFT                 5
N#define FTFA_FCNFG_RDCOLLIE_MASK                 0x40u
N#define FTFA_FCNFG_RDCOLLIE_SHIFT                6
N#define FTFA_FCNFG_CCIE_MASK                     0x80u
N#define FTFA_FCNFG_CCIE_SHIFT                    7
N/* FSEC Bit Fields */
N#define FTFA_FSEC_SEC_MASK                       0x3u
N#define FTFA_FSEC_SEC_SHIFT                      0
N#define FTFA_FSEC_SEC(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_SEC_SHIFT))&FTFA_FSEC_SEC_MASK)
N#define FTFA_FSEC_FSLACC_MASK                    0xCu
N#define FTFA_FSEC_FSLACC_SHIFT                   2
N#define FTFA_FSEC_FSLACC(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_FSLACC_SHIFT))&FTFA_FSEC_FSLACC_MASK)
N#define FTFA_FSEC_MEEN_MASK                      0x30u
N#define FTFA_FSEC_MEEN_SHIFT                     4
N#define FTFA_FSEC_MEEN(x)                        (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_MEEN_SHIFT))&FTFA_FSEC_MEEN_MASK)
N#define FTFA_FSEC_KEYEN_MASK                     0xC0u
N#define FTFA_FSEC_KEYEN_SHIFT                    6
N#define FTFA_FSEC_KEYEN(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_KEYEN_SHIFT))&FTFA_FSEC_KEYEN_MASK)
N/* FOPT Bit Fields */
N#define FTFA_FOPT_OPT_MASK                       0xFFu
N#define FTFA_FOPT_OPT_SHIFT                      0
N#define FTFA_FOPT_OPT(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FOPT_OPT_SHIFT))&FTFA_FOPT_OPT_MASK)
N/* FCCOB3 Bit Fields */
N#define FTFA_FCCOB3_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB3_CCOBn_SHIFT                  0
N#define FTFA_FCCOB3_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB3_CCOBn_SHIFT))&FTFA_FCCOB3_CCOBn_MASK)
N/* FCCOB2 Bit Fields */
N#define FTFA_FCCOB2_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB2_CCOBn_SHIFT                  0
N#define FTFA_FCCOB2_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB2_CCOBn_SHIFT))&FTFA_FCCOB2_CCOBn_MASK)
N/* FCCOB1 Bit Fields */
N#define FTFA_FCCOB1_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB1_CCOBn_SHIFT                  0
N#define FTFA_FCCOB1_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB1_CCOBn_SHIFT))&FTFA_FCCOB1_CCOBn_MASK)
N/* FCCOB0 Bit Fields */
N#define FTFA_FCCOB0_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB0_CCOBn_SHIFT                  0
N#define FTFA_FCCOB0_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB0_CCOBn_SHIFT))&FTFA_FCCOB0_CCOBn_MASK)
N/* FCCOB7 Bit Fields */
N#define FTFA_FCCOB7_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB7_CCOBn_SHIFT                  0
N#define FTFA_FCCOB7_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB7_CCOBn_SHIFT))&FTFA_FCCOB7_CCOBn_MASK)
N/* FCCOB6 Bit Fields */
N#define FTFA_FCCOB6_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB6_CCOBn_SHIFT                  0
N#define FTFA_FCCOB6_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB6_CCOBn_SHIFT))&FTFA_FCCOB6_CCOBn_MASK)
N/* FCCOB5 Bit Fields */
N#define FTFA_FCCOB5_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB5_CCOBn_SHIFT                  0
N#define FTFA_FCCOB5_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB5_CCOBn_SHIFT))&FTFA_FCCOB5_CCOBn_MASK)
N/* FCCOB4 Bit Fields */
N#define FTFA_FCCOB4_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB4_CCOBn_SHIFT                  0
N#define FTFA_FCCOB4_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB4_CCOBn_SHIFT))&FTFA_FCCOB4_CCOBn_MASK)
N/* FCCOBB Bit Fields */
N#define FTFA_FCCOBB_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOBB_CCOBn_SHIFT                  0
N#define FTFA_FCCOBB_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBB_CCOBn_SHIFT))&FTFA_FCCOBB_CCOBn_MASK)
N/* FCCOBA Bit Fields */
N#define FTFA_FCCOBA_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOBA_CCOBn_SHIFT                  0
N#define FTFA_FCCOBA_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBA_CCOBn_SHIFT))&FTFA_FCCOBA_CCOBn_MASK)
N/* FCCOB9 Bit Fields */
N#define FTFA_FCCOB9_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB9_CCOBn_SHIFT                  0
N#define FTFA_FCCOB9_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB9_CCOBn_SHIFT))&FTFA_FCCOB9_CCOBn_MASK)
N/* FCCOB8 Bit Fields */
N#define FTFA_FCCOB8_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB8_CCOBn_SHIFT                  0
N#define FTFA_FCCOB8_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB8_CCOBn_SHIFT))&FTFA_FCCOB8_CCOBn_MASK)
N/* FPROT3 Bit Fields */
N#define FTFA_FPROT3_PROT_MASK                    0xFFu
N#define FTFA_FPROT3_PROT_SHIFT                   0
N#define FTFA_FPROT3_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT3_PROT_SHIFT))&FTFA_FPROT3_PROT_MASK)
N/* FPROT2 Bit Fields */
N#define FTFA_FPROT2_PROT_MASK                    0xFFu
N#define FTFA_FPROT2_PROT_SHIFT                   0
N#define FTFA_FPROT2_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT2_PROT_SHIFT))&FTFA_FPROT2_PROT_MASK)
N/* FPROT1 Bit Fields */
N#define FTFA_FPROT1_PROT_MASK                    0xFFu
N#define FTFA_FPROT1_PROT_SHIFT                   0
N#define FTFA_FPROT1_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT1_PROT_SHIFT))&FTFA_FPROT1_PROT_MASK)
N/* FPROT0 Bit Fields */
N#define FTFA_FPROT0_PROT_MASK                    0xFFu
N#define FTFA_FPROT0_PROT_SHIFT                   0
N#define FTFA_FPROT0_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT0_PROT_SHIFT))&FTFA_FPROT0_PROT_MASK)
N
N/*!
N * @}
N */ /* end of group FTFA_Register_Masks */
N
N
N/* FTFA - Peripheral instance base addresses */
N/** Peripheral FTFA base address */
N#define FTFA_BASE                                (0x40020000u)
N/** Peripheral FTFA base pointer */
N#define FTFA                                     ((FTFA_Type *)FTFA_BASE)
N/** Array initializer of FTFA peripheral base pointers */
N#define FTFA_BASES                               { FTFA }
N
N/*!
N * @}
N */ /* end of group FTFA_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
N * @{
N */
N
N/** GPIO - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
X  volatile uint32_t PDOR;                               
N  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
X  volatile  uint32_t PSOR;                               
N  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
X  volatile  uint32_t PCOR;                               
N  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
X  volatile  uint32_t PTOR;                               
N  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
X  volatile const  uint32_t PDIR;                               
N  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
X  volatile uint32_t PDDR;                               
N} GPIO_Type;
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Register_Masks GPIO Register Masks
N * @{
N */
N
N/* PDOR Bit Fields */
N#define GPIO_PDOR_PDO_MASK                       0xFFFFFFFFu
N#define GPIO_PDOR_PDO_SHIFT                      0
N#define GPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)
N/* PSOR Bit Fields */
N#define GPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu
N#define GPIO_PSOR_PTSO_SHIFT                     0
N#define GPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)
N/* PCOR Bit Fields */
N#define GPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu
N#define GPIO_PCOR_PTCO_SHIFT                     0
N#define GPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)
N/* PTOR Bit Fields */
N#define GPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu
N#define GPIO_PTOR_PTTO_SHIFT                     0
N#define GPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)
N/* PDIR Bit Fields */
N#define GPIO_PDIR_PDI_MASK                       0xFFFFFFFFu
N#define GPIO_PDIR_PDI_SHIFT                      0
N#define GPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)
N/* PDDR Bit Fields */
N#define GPIO_PDDR_PDD_MASK                       0xFFFFFFFFu
N#define GPIO_PDDR_PDD_SHIFT                      0
N#define GPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)
N
N/*!
N * @}
N */ /* end of group GPIO_Register_Masks */
N
N
N/* GPIO - Peripheral instance base addresses */
N/** Peripheral PTA base address */
N#define PTA_BASE                                 (0x400FF000u)
N/** Peripheral PTA base pointer */
N#define PTA                                      ((GPIO_Type *)PTA_BASE)
N/** Peripheral PTB base address */
N#define PTB_BASE                                 (0x400FF040u)
N/** Peripheral PTB base pointer */
N#define PTB                                      ((GPIO_Type *)PTB_BASE)
N/** Peripheral PTC base address */
N#define PTC_BASE                                 (0x400FF080u)
N/** Peripheral PTC base pointer */
N#define PTC                                      ((GPIO_Type *)PTC_BASE)
N/** Peripheral PTD base address */
N#define PTD_BASE                                 (0x400FF0C0u)
N/** Peripheral PTD base pointer */
N#define PTD                                      ((GPIO_Type *)PTD_BASE)
N/** Peripheral PTE base address */
N#define PTE_BASE                                 (0x400FF100u)
N/** Peripheral PTE base pointer */
N#define PTE                                      ((GPIO_Type *)PTE_BASE)
N/** Array initializer of GPIO peripheral base pointers */
N#define GPIO_BASES                               { PTA, PTB, PTC, PTD, PTE }
N
N/*!
N * @}
N */ /* end of group GPIO_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- I2C Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
N * @{
N */
N
N/** I2C - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t A1;                                 /**< I2C Address Register 1, offset: 0x0 */
X  volatile uint8_t A1;                                  
N  __IO uint8_t F;                                  /**< I2C Frequency Divider register, offset: 0x1 */
X  volatile uint8_t F;                                   
N  __IO uint8_t C1;                                 /**< I2C Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t S;                                  /**< I2C Status register, offset: 0x3 */
X  volatile uint8_t S;                                   
N  __IO uint8_t D;                                  /**< I2C Data I/O register, offset: 0x4 */
X  volatile uint8_t D;                                   
N  __IO uint8_t C2;                                 /**< I2C Control Register 2, offset: 0x5 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t FLT;                                /**< I2C Programmable Input Glitch Filter register, offset: 0x6 */
X  volatile uint8_t FLT;                                 
N  __IO uint8_t RA;                                 /**< I2C Range Address register, offset: 0x7 */
X  volatile uint8_t RA;                                  
N  __IO uint8_t SMB;                                /**< I2C SMBus Control and Status register, offset: 0x8 */
X  volatile uint8_t SMB;                                 
N  __IO uint8_t A2;                                 /**< I2C Address Register 2, offset: 0x9 */
X  volatile uint8_t A2;                                  
N  __IO uint8_t SLTH;                               /**< I2C SCL Low Timeout Register High, offset: 0xA */
X  volatile uint8_t SLTH;                                
N  __IO uint8_t SLTL;                               /**< I2C SCL Low Timeout Register Low, offset: 0xB */
X  volatile uint8_t SLTL;                                
N} I2C_Type;
N
N/* ----------------------------------------------------------------------------
N   -- I2C Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Register_Masks I2C Register Masks
N * @{
N */
N
N/* A1 Bit Fields */
N#define I2C_A1_AD_MASK                           0xFEu
N#define I2C_A1_AD_SHIFT                          1
N#define I2C_A1_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_A1_AD_SHIFT))&I2C_A1_AD_MASK)
N/* F Bit Fields */
N#define I2C_F_ICR_MASK                           0x3Fu
N#define I2C_F_ICR_SHIFT                          0
N#define I2C_F_ICR(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_F_ICR_SHIFT))&I2C_F_ICR_MASK)
N#define I2C_F_MULT_MASK                          0xC0u
N#define I2C_F_MULT_SHIFT                         6
N#define I2C_F_MULT(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_F_MULT_SHIFT))&I2C_F_MULT_MASK)
N/* C1 Bit Fields */
N#define I2C_C1_DMAEN_MASK                        0x1u
N#define I2C_C1_DMAEN_SHIFT                       0
N#define I2C_C1_WUEN_MASK                         0x2u
N#define I2C_C1_WUEN_SHIFT                        1
N#define I2C_C1_RSTA_MASK                         0x4u
N#define I2C_C1_RSTA_SHIFT                        2
N#define I2C_C1_TXAK_MASK                         0x8u
N#define I2C_C1_TXAK_SHIFT                        3
N#define I2C_C1_TX_MASK                           0x10u
N#define I2C_C1_TX_SHIFT                          4
N#define I2C_C1_MST_MASK                          0x20u
N#define I2C_C1_MST_SHIFT                         5
N#define I2C_C1_IICIE_MASK                        0x40u
N#define I2C_C1_IICIE_SHIFT                       6
N#define I2C_C1_IICEN_MASK                        0x80u
N#define I2C_C1_IICEN_SHIFT                       7
N/* S Bit Fields */
N#define I2C_S_RXAK_MASK                          0x1u
N#define I2C_S_RXAK_SHIFT                         0
N#define I2C_S_IICIF_MASK                         0x2u
N#define I2C_S_IICIF_SHIFT                        1
N#define I2C_S_SRW_MASK                           0x4u
N#define I2C_S_SRW_SHIFT                          2
N#define I2C_S_RAM_MASK                           0x8u
N#define I2C_S_RAM_SHIFT                          3
N#define I2C_S_ARBL_MASK                          0x10u
N#define I2C_S_ARBL_SHIFT                         4
N#define I2C_S_BUSY_MASK                          0x20u
N#define I2C_S_BUSY_SHIFT                         5
N#define I2C_S_IAAS_MASK                          0x40u
N#define I2C_S_IAAS_SHIFT                         6
N#define I2C_S_TCF_MASK                           0x80u
N#define I2C_S_TCF_SHIFT                          7
N/* D Bit Fields */
N#define I2C_D_DATA_MASK                          0xFFu
N#define I2C_D_DATA_SHIFT                         0
N#define I2C_D_DATA(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_D_DATA_SHIFT))&I2C_D_DATA_MASK)
N/* C2 Bit Fields */
N#define I2C_C2_AD_MASK                           0x7u
N#define I2C_C2_AD_SHIFT                          0
N#define I2C_C2_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_C2_AD_SHIFT))&I2C_C2_AD_MASK)
N#define I2C_C2_RMEN_MASK                         0x8u
N#define I2C_C2_RMEN_SHIFT                        3
N#define I2C_C2_SBRC_MASK                         0x10u
N#define I2C_C2_SBRC_SHIFT                        4
N#define I2C_C2_HDRS_MASK                         0x20u
N#define I2C_C2_HDRS_SHIFT                        5
N#define I2C_C2_ADEXT_MASK                        0x40u
N#define I2C_C2_ADEXT_SHIFT                       6
N#define I2C_C2_GCAEN_MASK                        0x80u
N#define I2C_C2_GCAEN_SHIFT                       7
N/* FLT Bit Fields */
N#define I2C_FLT_FLT_MASK                         0x1Fu
N#define I2C_FLT_FLT_SHIFT                        0
N#define I2C_FLT_FLT(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_FLT_FLT_SHIFT))&I2C_FLT_FLT_MASK)
N#define I2C_FLT_STOPIE_MASK                      0x20u
N#define I2C_FLT_STOPIE_SHIFT                     5
N#define I2C_FLT_STOPF_MASK                       0x40u
N#define I2C_FLT_STOPF_SHIFT                      6
N#define I2C_FLT_SHEN_MASK                        0x80u
N#define I2C_FLT_SHEN_SHIFT                       7
N/* RA Bit Fields */
N#define I2C_RA_RAD_MASK                          0xFEu
N#define I2C_RA_RAD_SHIFT                         1
N#define I2C_RA_RAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_RA_RAD_SHIFT))&I2C_RA_RAD_MASK)
N/* SMB Bit Fields */
N#define I2C_SMB_SHTF2IE_MASK                     0x1u
N#define I2C_SMB_SHTF2IE_SHIFT                    0
N#define I2C_SMB_SHTF2_MASK                       0x2u
N#define I2C_SMB_SHTF2_SHIFT                      1
N#define I2C_SMB_SHTF1_MASK                       0x4u
N#define I2C_SMB_SHTF1_SHIFT                      2
N#define I2C_SMB_SLTF_MASK                        0x8u
N#define I2C_SMB_SLTF_SHIFT                       3
N#define I2C_SMB_TCKSEL_MASK                      0x10u
N#define I2C_SMB_TCKSEL_SHIFT                     4
N#define I2C_SMB_SIICAEN_MASK                     0x20u
N#define I2C_SMB_SIICAEN_SHIFT                    5
N#define I2C_SMB_ALERTEN_MASK                     0x40u
N#define I2C_SMB_ALERTEN_SHIFT                    6
N#define I2C_SMB_FACK_MASK                        0x80u
N#define I2C_SMB_FACK_SHIFT                       7
N/* A2 Bit Fields */
N#define I2C_A2_SAD_MASK                          0xFEu
N#define I2C_A2_SAD_SHIFT                         1
N#define I2C_A2_SAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_A2_SAD_SHIFT))&I2C_A2_SAD_MASK)
N/* SLTH Bit Fields */
N#define I2C_SLTH_SSLT_MASK                       0xFFu
N#define I2C_SLTH_SSLT_SHIFT                      0
N#define I2C_SLTH_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTH_SSLT_SHIFT))&I2C_SLTH_SSLT_MASK)
N/* SLTL Bit Fields */
N#define I2C_SLTL_SSLT_MASK                       0xFFu
N#define I2C_SLTL_SSLT_SHIFT                      0
N#define I2C_SLTL_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTL_SSLT_SHIFT))&I2C_SLTL_SSLT_MASK)
N
N/*!
N * @}
N */ /* end of group I2C_Register_Masks */
N
N
N/* I2C - Peripheral instance base addresses */
N/** Peripheral I2C0 base address */
N#define I2C0_BASE                                (0x40066000u)
N/** Peripheral I2C0 base pointer */
N#define I2C0                                     ((I2C_Type *)I2C0_BASE)
N/** Peripheral I2C1 base address */
N#define I2C1_BASE                                (0x40067000u)
N/** Peripheral I2C1 base pointer */
N#define I2C1                                     ((I2C_Type *)I2C1_BASE)
N/** Array initializer of I2C peripheral base pointers */
N#define I2C_BASES                                { I2C0, I2C1 }
N
N/*!
N * @}
N */ /* end of group I2C_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- LLWU Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Peripheral_Access_Layer LLWU Peripheral Access Layer
N * @{
N */
N
N/** LLWU - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t PE1;                                /**< LLWU Pin Enable 1 register, offset: 0x0 */
X  volatile uint8_t PE1;                                 
N  __IO uint8_t PE2;                                /**< LLWU Pin Enable 2 register, offset: 0x1 */
X  volatile uint8_t PE2;                                 
N  __IO uint8_t PE3;                                /**< LLWU Pin Enable 3 register, offset: 0x2 */
X  volatile uint8_t PE3;                                 
N  __IO uint8_t PE4;                                /**< LLWU Pin Enable 4 register, offset: 0x3 */
X  volatile uint8_t PE4;                                 
N  __IO uint8_t ME;                                 /**< LLWU Module Enable register, offset: 0x4 */
X  volatile uint8_t ME;                                  
N  __IO uint8_t F1;                                 /**< LLWU Flag 1 register, offset: 0x5 */
X  volatile uint8_t F1;                                  
N  __IO uint8_t F2;                                 /**< LLWU Flag 2 register, offset: 0x6 */
X  volatile uint8_t F2;                                  
N  __I  uint8_t F3;                                 /**< LLWU Flag 3 register, offset: 0x7 */
X  volatile const  uint8_t F3;                                  
N  __IO uint8_t FILT1;                              /**< LLWU Pin Filter 1 register, offset: 0x8 */
X  volatile uint8_t FILT1;                               
N  __IO uint8_t FILT2;                              /**< LLWU Pin Filter 2 register, offset: 0x9 */
X  volatile uint8_t FILT2;                               
N} LLWU_Type;
N
N/* ----------------------------------------------------------------------------
N   -- LLWU Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Register_Masks LLWU Register Masks
N * @{
N */
N
N/* PE1 Bit Fields */
N#define LLWU_PE1_WUPE0_MASK                      0x3u
N#define LLWU_PE1_WUPE0_SHIFT                     0
N#define LLWU_PE1_WUPE0(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE0_SHIFT))&LLWU_PE1_WUPE0_MASK)
N#define LLWU_PE1_WUPE1_MASK                      0xCu
N#define LLWU_PE1_WUPE1_SHIFT                     2
N#define LLWU_PE1_WUPE1(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE1_SHIFT))&LLWU_PE1_WUPE1_MASK)
N#define LLWU_PE1_WUPE2_MASK                      0x30u
N#define LLWU_PE1_WUPE2_SHIFT                     4
N#define LLWU_PE1_WUPE2(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE2_SHIFT))&LLWU_PE1_WUPE2_MASK)
N#define LLWU_PE1_WUPE3_MASK                      0xC0u
N#define LLWU_PE1_WUPE3_SHIFT                     6
N#define LLWU_PE1_WUPE3(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE3_SHIFT))&LLWU_PE1_WUPE3_MASK)
N/* PE2 Bit Fields */
N#define LLWU_PE2_WUPE4_MASK                      0x3u
N#define LLWU_PE2_WUPE4_SHIFT                     0
N#define LLWU_PE2_WUPE4(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE4_SHIFT))&LLWU_PE2_WUPE4_MASK)
N#define LLWU_PE2_WUPE5_MASK                      0xCu
N#define LLWU_PE2_WUPE5_SHIFT                     2
N#define LLWU_PE2_WUPE5(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE5_SHIFT))&LLWU_PE2_WUPE5_MASK)
N#define LLWU_PE2_WUPE6_MASK                      0x30u
N#define LLWU_PE2_WUPE6_SHIFT                     4
N#define LLWU_PE2_WUPE6(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE6_SHIFT))&LLWU_PE2_WUPE6_MASK)
N#define LLWU_PE2_WUPE7_MASK                      0xC0u
N#define LLWU_PE2_WUPE7_SHIFT                     6
N#define LLWU_PE2_WUPE7(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE7_SHIFT))&LLWU_PE2_WUPE7_MASK)
N/* PE3 Bit Fields */
N#define LLWU_PE3_WUPE8_MASK                      0x3u
N#define LLWU_PE3_WUPE8_SHIFT                     0
N#define LLWU_PE3_WUPE8(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE8_SHIFT))&LLWU_PE3_WUPE8_MASK)
N#define LLWU_PE3_WUPE9_MASK                      0xCu
N#define LLWU_PE3_WUPE9_SHIFT                     2
N#define LLWU_PE3_WUPE9(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE9_SHIFT))&LLWU_PE3_WUPE9_MASK)
N#define LLWU_PE3_WUPE10_MASK                     0x30u
N#define LLWU_PE3_WUPE10_SHIFT                    4
N#define LLWU_PE3_WUPE10(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE10_SHIFT))&LLWU_PE3_WUPE10_MASK)
N#define LLWU_PE3_WUPE11_MASK                     0xC0u
N#define LLWU_PE3_WUPE11_SHIFT                    6
N#define LLWU_PE3_WUPE11(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE11_SHIFT))&LLWU_PE3_WUPE11_MASK)
N/* PE4 Bit Fields */
N#define LLWU_PE4_WUPE12_MASK                     0x3u
N#define LLWU_PE4_WUPE12_SHIFT                    0
N#define LLWU_PE4_WUPE12(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE12_SHIFT))&LLWU_PE4_WUPE12_MASK)
N#define LLWU_PE4_WUPE13_MASK                     0xCu
N#define LLWU_PE4_WUPE13_SHIFT                    2
N#define LLWU_PE4_WUPE13(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE13_SHIFT))&LLWU_PE4_WUPE13_MASK)
N#define LLWU_PE4_WUPE14_MASK                     0x30u
N#define LLWU_PE4_WUPE14_SHIFT                    4
N#define LLWU_PE4_WUPE14(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE14_SHIFT))&LLWU_PE4_WUPE14_MASK)
N#define LLWU_PE4_WUPE15_MASK                     0xC0u
N#define LLWU_PE4_WUPE15_SHIFT                    6
N#define LLWU_PE4_WUPE15(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE15_SHIFT))&LLWU_PE4_WUPE15_MASK)
N/* ME Bit Fields */
N#define LLWU_ME_WUME0_MASK                       0x1u
N#define LLWU_ME_WUME0_SHIFT                      0
N#define LLWU_ME_WUME1_MASK                       0x2u
N#define LLWU_ME_WUME1_SHIFT                      1
N#define LLWU_ME_WUME2_MASK                       0x4u
N#define LLWU_ME_WUME2_SHIFT                      2
N#define LLWU_ME_WUME3_MASK                       0x8u
N#define LLWU_ME_WUME3_SHIFT                      3
N#define LLWU_ME_WUME4_MASK                       0x10u
N#define LLWU_ME_WUME4_SHIFT                      4
N#define LLWU_ME_WUME5_MASK                       0x20u
N#define LLWU_ME_WUME5_SHIFT                      5
N#define LLWU_ME_WUME6_MASK                       0x40u
N#define LLWU_ME_WUME6_SHIFT                      6
N#define LLWU_ME_WUME7_MASK                       0x80u
N#define LLWU_ME_WUME7_SHIFT                      7
N/* F1 Bit Fields */
N#define LLWU_F1_WUF0_MASK                        0x1u
N#define LLWU_F1_WUF0_SHIFT                       0
N#define LLWU_F1_WUF1_MASK                        0x2u
N#define LLWU_F1_WUF1_SHIFT                       1
N#define LLWU_F1_WUF2_MASK                        0x4u
N#define LLWU_F1_WUF2_SHIFT                       2
N#define LLWU_F1_WUF3_MASK                        0x8u
N#define LLWU_F1_WUF3_SHIFT                       3
N#define LLWU_F1_WUF4_MASK                        0x10u
N#define LLWU_F1_WUF4_SHIFT                       4
N#define LLWU_F1_WUF5_MASK                        0x20u
N#define LLWU_F1_WUF5_SHIFT                       5
N#define LLWU_F1_WUF6_MASK                        0x40u
N#define LLWU_F1_WUF6_SHIFT                       6
N#define LLWU_F1_WUF7_MASK                        0x80u
N#define LLWU_F1_WUF7_SHIFT                       7
N/* F2 Bit Fields */
N#define LLWU_F2_WUF8_MASK                        0x1u
N#define LLWU_F2_WUF8_SHIFT                       0
N#define LLWU_F2_WUF9_MASK                        0x2u
N#define LLWU_F2_WUF9_SHIFT                       1
N#define LLWU_F2_WUF10_MASK                       0x4u
N#define LLWU_F2_WUF10_SHIFT                      2
N#define LLWU_F2_WUF11_MASK                       0x8u
N#define LLWU_F2_WUF11_SHIFT                      3
N#define LLWU_F2_WUF12_MASK                       0x10u
N#define LLWU_F2_WUF12_SHIFT                      4
N#define LLWU_F2_WUF13_MASK                       0x20u
N#define LLWU_F2_WUF13_SHIFT                      5
N#define LLWU_F2_WUF14_MASK                       0x40u
N#define LLWU_F2_WUF14_SHIFT                      6
N#define LLWU_F2_WUF15_MASK                       0x80u
N#define LLWU_F2_WUF15_SHIFT                      7
N/* F3 Bit Fields */
N#define LLWU_F3_MWUF0_MASK                       0x1u
N#define LLWU_F3_MWUF0_SHIFT                      0
N#define LLWU_F3_MWUF1_MASK                       0x2u
N#define LLWU_F3_MWUF1_SHIFT                      1
N#define LLWU_F3_MWUF2_MASK                       0x4u
N#define LLWU_F3_MWUF2_SHIFT                      2
N#define LLWU_F3_MWUF3_MASK                       0x8u
N#define LLWU_F3_MWUF3_SHIFT                      3
N#define LLWU_F3_MWUF4_MASK                       0x10u
N#define LLWU_F3_MWUF4_SHIFT                      4
N#define LLWU_F3_MWUF5_MASK                       0x20u
N#define LLWU_F3_MWUF5_SHIFT                      5
N#define LLWU_F3_MWUF6_MASK                       0x40u
N#define LLWU_F3_MWUF6_SHIFT                      6
N#define LLWU_F3_MWUF7_MASK                       0x80u
N#define LLWU_F3_MWUF7_SHIFT                      7
N/* FILT1 Bit Fields */
N#define LLWU_FILT1_FILTSEL_MASK                  0xFu
N#define LLWU_FILT1_FILTSEL_SHIFT                 0
N#define LLWU_FILT1_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTSEL_SHIFT))&LLWU_FILT1_FILTSEL_MASK)
N#define LLWU_FILT1_FILTE_MASK                    0x60u
N#define LLWU_FILT1_FILTE_SHIFT                   5
N#define LLWU_FILT1_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTE_SHIFT))&LLWU_FILT1_FILTE_MASK)
N#define LLWU_FILT1_FILTF_MASK                    0x80u
N#define LLWU_FILT1_FILTF_SHIFT                   7
N/* FILT2 Bit Fields */
N#define LLWU_FILT2_FILTSEL_MASK                  0xFu
N#define LLWU_FILT2_FILTSEL_SHIFT                 0
N#define LLWU_FILT2_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTSEL_SHIFT))&LLWU_FILT2_FILTSEL_MASK)
N#define LLWU_FILT2_FILTE_MASK                    0x60u
N#define LLWU_FILT2_FILTE_SHIFT                   5
N#define LLWU_FILT2_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTE_SHIFT))&LLWU_FILT2_FILTE_MASK)
N#define LLWU_FILT2_FILTF_MASK                    0x80u
N#define LLWU_FILT2_FILTF_SHIFT                   7
N
N/*!
N * @}
N */ /* end of group LLWU_Register_Masks */
N
N
N/* LLWU - Peripheral instance base addresses */
N/** Peripheral LLWU base address */
N#define LLWU_BASE                                (0x4007C000u)
N/** Peripheral LLWU base pointer */
N#define LLWU                                     ((LLWU_Type *)LLWU_BASE)
N/** Array initializer of LLWU peripheral base pointers */
N#define LLWU_BASES                               { LLWU }
N
N/*!
N * @}
N */ /* end of group LLWU_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Peripheral_Access_Layer LPTMR Peripheral Access Layer
N * @{
N */
N
N/** LPTMR - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CSR;                               /**< Low Power Timer Control Status Register, offset: 0x0 */
X  volatile uint32_t CSR;                                
N  __IO uint32_t PSR;                               /**< Low Power Timer Prescale Register, offset: 0x4 */
X  volatile uint32_t PSR;                                
N  __IO uint32_t CMR;                               /**< Low Power Timer Compare Register, offset: 0x8 */
X  volatile uint32_t CMR;                                
N  __I  uint32_t CNR;                               /**< Low Power Timer Counter Register, offset: 0xC */
X  volatile const  uint32_t CNR;                                
N} LPTMR_Type;
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Register_Masks LPTMR Register Masks
N * @{
N */
N
N/* CSR Bit Fields */
N#define LPTMR_CSR_TEN_MASK                       0x1u
N#define LPTMR_CSR_TEN_SHIFT                      0
N#define LPTMR_CSR_TMS_MASK                       0x2u
N#define LPTMR_CSR_TMS_SHIFT                      1
N#define LPTMR_CSR_TFC_MASK                       0x4u
N#define LPTMR_CSR_TFC_SHIFT                      2
N#define LPTMR_CSR_TPP_MASK                       0x8u
N#define LPTMR_CSR_TPP_SHIFT                      3
N#define LPTMR_CSR_TPS_MASK                       0x30u
N#define LPTMR_CSR_TPS_SHIFT                      4
N#define LPTMR_CSR_TPS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPS_SHIFT))&LPTMR_CSR_TPS_MASK)
N#define LPTMR_CSR_TIE_MASK                       0x40u
N#define LPTMR_CSR_TIE_SHIFT                      6
N#define LPTMR_CSR_TCF_MASK                       0x80u
N#define LPTMR_CSR_TCF_SHIFT                      7
N/* PSR Bit Fields */
N#define LPTMR_PSR_PCS_MASK                       0x3u
N#define LPTMR_PSR_PCS_SHIFT                      0
N#define LPTMR_PSR_PCS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PCS_SHIFT))&LPTMR_PSR_PCS_MASK)
N#define LPTMR_PSR_PBYP_MASK                      0x4u
N#define LPTMR_PSR_PBYP_SHIFT                     2
N#define LPTMR_PSR_PRESCALE_MASK                  0x78u
N#define LPTMR_PSR_PRESCALE_SHIFT                 3
N#define LPTMR_PSR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PRESCALE_SHIFT))&LPTMR_PSR_PRESCALE_MASK)
N/* CMR Bit Fields */
N#define LPTMR_CMR_COMPARE_MASK                   0xFFFFu
N#define LPTMR_CMR_COMPARE_SHIFT                  0
N#define LPTMR_CMR_COMPARE(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CMR_COMPARE_SHIFT))&LPTMR_CMR_COMPARE_MASK)
N/* CNR Bit Fields */
N#define LPTMR_CNR_COUNTER_MASK                   0xFFFFu
N#define LPTMR_CNR_COUNTER_SHIFT                  0
N#define LPTMR_CNR_COUNTER(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CNR_COUNTER_SHIFT))&LPTMR_CNR_COUNTER_MASK)
N
N/*!
N * @}
N */ /* end of group LPTMR_Register_Masks */
N
N
N/* LPTMR - Peripheral instance base addresses */
N/** Peripheral LPTMR0 base address */
N#define LPTMR0_BASE                              (0x40040000u)
N/** Peripheral LPTMR0 base pointer */
N#define LPTMR0                                   ((LPTMR_Type *)LPTMR0_BASE)
N/** Array initializer of LPTMR peripheral base pointers */
N#define LPTMR_BASES                              { LPTMR0 }
N
N/*!
N * @}
N */ /* end of group LPTMR_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCG Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Peripheral_Access_Layer MCG Peripheral Access Layer
N * @{
N */
N
N/** MCG - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t C1;                                 /**< MCG Control 1 Register, offset: 0x0 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< MCG Control 2 Register, offset: 0x1 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t C3;                                 /**< MCG Control 3 Register, offset: 0x2 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t C4;                                 /**< MCG Control 4 Register, offset: 0x3 */
X  volatile uint8_t C4;                                  
N  __IO uint8_t C5;                                 /**< MCG Control 5 Register, offset: 0x4 */
X  volatile uint8_t C5;                                  
N  __IO uint8_t C6;                                 /**< MCG Control 6 Register, offset: 0x5 */
X  volatile uint8_t C6;                                  
N  __I  uint8_t S;                                  /**< MCG Status Register, offset: 0x6 */
X  volatile const  uint8_t S;                                   
N       uint8_t RESERVED_0[1];
N  __IO uint8_t SC;                                 /**< MCG Status and Control Register, offset: 0x8 */
X  volatile uint8_t SC;                                  
N       uint8_t RESERVED_1[1];
N  __IO uint8_t ATCVH;                              /**< MCG Auto Trim Compare Value High Register, offset: 0xA */
X  volatile uint8_t ATCVH;                               
N  __IO uint8_t ATCVL;                              /**< MCG Auto Trim Compare Value Low Register, offset: 0xB */
X  volatile uint8_t ATCVL;                               
N  __I  uint8_t C7;                                 /**< MCG Control 7 Register, offset: 0xC */
X  volatile const  uint8_t C7;                                  
N  __IO uint8_t C8;                                 /**< MCG Control 8 Register, offset: 0xD */
X  volatile uint8_t C8;                                  
N  __I  uint8_t C9;                                 /**< MCG Control 9 Register, offset: 0xE */
X  volatile const  uint8_t C9;                                  
N  __I  uint8_t C10;                                /**< MCG Control 10 Register, offset: 0xF */
X  volatile const  uint8_t C10;                                 
N} MCG_Type;
N
N/* ----------------------------------------------------------------------------
N   -- MCG Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Register_Masks MCG Register Masks
N * @{
N */
N
N/* C1 Bit Fields */
N#define MCG_C1_IREFSTEN_MASK                     0x1u
N#define MCG_C1_IREFSTEN_SHIFT                    0
N#define MCG_C1_IRCLKEN_MASK                      0x2u
N#define MCG_C1_IRCLKEN_SHIFT                     1
N#define MCG_C1_IREFS_MASK                        0x4u
N#define MCG_C1_IREFS_SHIFT                       2
N#define MCG_C1_FRDIV_MASK                        0x38u
N#define MCG_C1_FRDIV_SHIFT                       3
N#define MCG_C1_FRDIV(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C1_FRDIV_SHIFT))&MCG_C1_FRDIV_MASK)
N#define MCG_C1_CLKS_MASK                         0xC0u
N#define MCG_C1_CLKS_SHIFT                        6
N#define MCG_C1_CLKS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C1_CLKS_SHIFT))&MCG_C1_CLKS_MASK)
N/* C2 Bit Fields */
N#define MCG_C2_IRCS_MASK                         0x1u
N#define MCG_C2_IRCS_SHIFT                        0
N#define MCG_C2_LP_MASK                           0x2u
N#define MCG_C2_LP_SHIFT                          1
N#define MCG_C2_EREFS0_MASK                       0x4u
N#define MCG_C2_EREFS0_SHIFT                      2
N#define MCG_C2_HGO0_MASK                         0x8u
N#define MCG_C2_HGO0_SHIFT                        3
N#define MCG_C2_RANGE0_MASK                       0x30u
N#define MCG_C2_RANGE0_SHIFT                      4
N#define MCG_C2_RANGE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_RANGE0_SHIFT))&MCG_C2_RANGE0_MASK)
N#define MCG_C2_LOCRE0_MASK                       0x80u
N#define MCG_C2_LOCRE0_SHIFT                      7
N/* C3 Bit Fields */
N#define MCG_C3_SCTRIM_MASK                       0xFFu
N#define MCG_C3_SCTRIM_SHIFT                      0
N#define MCG_C3_SCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C3_SCTRIM_SHIFT))&MCG_C3_SCTRIM_MASK)
N/* C4 Bit Fields */
N#define MCG_C4_SCFTRIM_MASK                      0x1u
N#define MCG_C4_SCFTRIM_SHIFT                     0
N#define MCG_C4_FCTRIM_MASK                       0x1Eu
N#define MCG_C4_FCTRIM_SHIFT                      1
N#define MCG_C4_FCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C4_FCTRIM_SHIFT))&MCG_C4_FCTRIM_MASK)
N#define MCG_C4_DRST_DRS_MASK                     0x60u
N#define MCG_C4_DRST_DRS_SHIFT                    5
N#define MCG_C4_DRST_DRS(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C4_DRST_DRS_SHIFT))&MCG_C4_DRST_DRS_MASK)
N#define MCG_C4_DMX32_MASK                        0x80u
N#define MCG_C4_DMX32_SHIFT                       7
N/* C5 Bit Fields */
N#define MCG_C5_PRDIV0_MASK                       0x1Fu
N#define MCG_C5_PRDIV0_SHIFT                      0
N#define MCG_C5_PRDIV0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C5_PRDIV0_SHIFT))&MCG_C5_PRDIV0_MASK)
N#define MCG_C5_PLLSTEN0_MASK                     0x20u
N#define MCG_C5_PLLSTEN0_SHIFT                    5
N#define MCG_C5_PLLCLKEN0_MASK                    0x40u
N#define MCG_C5_PLLCLKEN0_SHIFT                   6
N/* C6 Bit Fields */
N#define MCG_C6_VDIV0_MASK                        0x1Fu
N#define MCG_C6_VDIV0_SHIFT                       0
N#define MCG_C6_VDIV0(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C6_VDIV0_SHIFT))&MCG_C6_VDIV0_MASK)
N#define MCG_C6_CME0_MASK                         0x20u
N#define MCG_C6_CME0_SHIFT                        5
N#define MCG_C6_PLLS_MASK                         0x40u
N#define MCG_C6_PLLS_SHIFT                        6
N#define MCG_C6_LOLIE0_MASK                       0x80u
N#define MCG_C6_LOLIE0_SHIFT                      7
N/* S Bit Fields */
N#define MCG_S_IRCST_MASK                         0x1u
N#define MCG_S_IRCST_SHIFT                        0
N#define MCG_S_OSCINIT0_MASK                      0x2u
N#define MCG_S_OSCINIT0_SHIFT                     1
N#define MCG_S_CLKST_MASK                         0xCu
N#define MCG_S_CLKST_SHIFT                        2
N#define MCG_S_CLKST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_CLKST_SHIFT))&MCG_S_CLKST_MASK)
N#define MCG_S_IREFST_MASK                        0x10u
N#define MCG_S_IREFST_SHIFT                       4
N#define MCG_S_PLLST_MASK                         0x20u
N#define MCG_S_PLLST_SHIFT                        5
N#define MCG_S_LOCK0_MASK                         0x40u
N#define MCG_S_LOCK0_SHIFT                        6
N#define MCG_S_LOLS0_MASK                         0x80u
N#define MCG_S_LOLS0_SHIFT                        7
N/* SC Bit Fields */
N#define MCG_SC_LOCS0_MASK                        0x1u
N#define MCG_SC_LOCS0_SHIFT                       0
N#define MCG_SC_FCRDIV_MASK                       0xEu
N#define MCG_SC_FCRDIV_SHIFT                      1
N#define MCG_SC_FCRDIV(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_SC_FCRDIV_SHIFT))&MCG_SC_FCRDIV_MASK)
N#define MCG_SC_FLTPRSRV_MASK                     0x10u
N#define MCG_SC_FLTPRSRV_SHIFT                    4
N#define MCG_SC_ATMF_MASK                         0x20u
N#define MCG_SC_ATMF_SHIFT                        5
N#define MCG_SC_ATMS_MASK                         0x40u
N#define MCG_SC_ATMS_SHIFT                        6
N#define MCG_SC_ATME_MASK                         0x80u
N#define MCG_SC_ATME_SHIFT                        7
N/* ATCVH Bit Fields */
N#define MCG_ATCVH_ATCVH_MASK                     0xFFu
N#define MCG_ATCVH_ATCVH_SHIFT                    0
N#define MCG_ATCVH_ATCVH(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVH_ATCVH_SHIFT))&MCG_ATCVH_ATCVH_MASK)
N/* ATCVL Bit Fields */
N#define MCG_ATCVL_ATCVL_MASK                     0xFFu
N#define MCG_ATCVL_ATCVL_SHIFT                    0
N#define MCG_ATCVL_ATCVL(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVL_ATCVL_SHIFT))&MCG_ATCVL_ATCVL_MASK)
N/* C8 Bit Fields */
N#define MCG_C8_LOLRE_MASK                        0x40u
N#define MCG_C8_LOLRE_SHIFT                       6
N
N/*!
N * @}
N */ /* end of group MCG_Register_Masks */
N
N
N/* MCG - Peripheral instance base addresses */
N/** Peripheral MCG base address */
N#define MCG_BASE                                 (0x40064000u)
N/** Peripheral MCG base pointer */
N#define MCG                                      ((MCG_Type *)MCG_BASE)
N/** Array initializer of MCG peripheral base pointers */
N#define MCG_BASES                                { MCG }
N
N/*!
N * @}
N */ /* end of group MCG_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Peripheral_Access_Layer MCM Peripheral Access Layer
N * @{
N */
N
N/** MCM - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[8];
N  __I  uint16_t PLASC;                             /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */
X  volatile const  uint16_t PLASC;                              
N  __I  uint16_t PLAMC;                             /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */
X  volatile const  uint16_t PLAMC;                              
N  __IO uint32_t PLACR;                             /**< Platform Control Register, offset: 0xC */
X  volatile uint32_t PLACR;                              
N       uint8_t RESERVED_1[48];
N  __IO uint32_t CPO;                               /**< Compute Operation Control Register, offset: 0x40 */
X  volatile uint32_t CPO;                                
N} MCM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- MCM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Register_Masks MCM Register Masks
N * @{
N */
N
N/* PLASC Bit Fields */
N#define MCM_PLASC_ASC_MASK                       0xFFu
N#define MCM_PLASC_ASC_SHIFT                      0
N#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLASC_ASC_SHIFT))&MCM_PLASC_ASC_MASK)
N/* PLAMC Bit Fields */
N#define MCM_PLAMC_AMC_MASK                       0xFFu
N#define MCM_PLAMC_AMC_SHIFT                      0
N#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLAMC_AMC_SHIFT))&MCM_PLAMC_AMC_MASK)
N/* PLACR Bit Fields */
N#define MCM_PLACR_ARB_MASK                       0x200u
N#define MCM_PLACR_ARB_SHIFT                      9
N#define MCM_PLACR_CFCC_MASK                      0x400u
N#define MCM_PLACR_CFCC_SHIFT                     10
N#define MCM_PLACR_DFCDA_MASK                     0x800u
N#define MCM_PLACR_DFCDA_SHIFT                    11
N#define MCM_PLACR_DFCIC_MASK                     0x1000u
N#define MCM_PLACR_DFCIC_SHIFT                    12
N#define MCM_PLACR_DFCC_MASK                      0x2000u
N#define MCM_PLACR_DFCC_SHIFT                     13
N#define MCM_PLACR_EFDS_MASK                      0x4000u
N#define MCM_PLACR_EFDS_SHIFT                     14
N#define MCM_PLACR_DFCS_MASK                      0x8000u
N#define MCM_PLACR_DFCS_SHIFT                     15
N#define MCM_PLACR_ESFC_MASK                      0x10000u
N#define MCM_PLACR_ESFC_SHIFT                     16
N/* CPO Bit Fields */
N#define MCM_CPO_CPOREQ_MASK                      0x1u
N#define MCM_CPO_CPOREQ_SHIFT                     0
N#define MCM_CPO_CPOACK_MASK                      0x2u
N#define MCM_CPO_CPOACK_SHIFT                     1
N#define MCM_CPO_CPOWOI_MASK                      0x4u
N#define MCM_CPO_CPOWOI_SHIFT                     2
N
N/*!
N * @}
N */ /* end of group MCM_Register_Masks */
N
N
N/* MCM - Peripheral instance base addresses */
N/** Peripheral MCM base address */
N#define MCM_BASE                                 (0xF0003000u)
N/** Peripheral MCM base pointer */
N#define MCM                                      ((MCM_Type *)MCM_BASE)
N/** Array initializer of MCM peripheral base pointers */
N#define MCM_BASES                                { MCM }
N
N/*!
N * @}
N */ /* end of group MCM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTB Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Peripheral_Access_Layer MTB Peripheral Access Layer
N * @{
N */
N
N/** MTB - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t POSITION;                          /**< MTB Position Register, offset: 0x0 */
X  volatile uint32_t POSITION;                           
N  __IO uint32_t MASTER;                            /**< MTB Master Register, offset: 0x4 */
X  volatile uint32_t MASTER;                             
N  __IO uint32_t FLOW;                              /**< MTB Flow Register, offset: 0x8 */
X  volatile uint32_t FLOW;                               
N  __I  uint32_t BASE;                              /**< MTB Base Register, offset: 0xC */
X  volatile const  uint32_t BASE;                               
N       uint8_t RESERVED_0[3824];
N  __I  uint32_t MODECTRL;                          /**< Integration Mode Control Register, offset: 0xF00 */
X  volatile const  uint32_t MODECTRL;                           
N       uint8_t RESERVED_1[156];
N  __I  uint32_t TAGSET;                            /**< Claim TAG Set Register, offset: 0xFA0 */
X  volatile const  uint32_t TAGSET;                             
N  __I  uint32_t TAGCLEAR;                          /**< Claim TAG Clear Register, offset: 0xFA4 */
X  volatile const  uint32_t TAGCLEAR;                           
N       uint8_t RESERVED_2[8];
N  __I  uint32_t LOCKACCESS;                        /**< Lock Access Register, offset: 0xFB0 */
X  volatile const  uint32_t LOCKACCESS;                         
N  __I  uint32_t LOCKSTAT;                          /**< Lock Status Register, offset: 0xFB4 */
X  volatile const  uint32_t LOCKSTAT;                           
N  __I  uint32_t AUTHSTAT;                          /**< Authentication Status Register, offset: 0xFB8 */
X  volatile const  uint32_t AUTHSTAT;                           
N  __I  uint32_t DEVICEARCH;                        /**< Device Architecture Register, offset: 0xFBC */
X  volatile const  uint32_t DEVICEARCH;                         
N       uint8_t RESERVED_3[8];
N  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
X  volatile const  uint32_t DEVICECFG;                          
N  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
X  volatile const  uint32_t DEVICETYPID;                        
N  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
X  volatile const  uint32_t PERIPHID[8];                        
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} MTB_Type;
N
N/* ----------------------------------------------------------------------------
N   -- MTB Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Register_Masks MTB Register Masks
N * @{
N */
N
N/* POSITION Bit Fields */
N#define MTB_POSITION_WRAP_MASK                   0x4u
N#define MTB_POSITION_WRAP_SHIFT                  2
N#define MTB_POSITION_POINTER_MASK                0xFFFFFFF8u
N#define MTB_POSITION_POINTER_SHIFT               3
N#define MTB_POSITION_POINTER(x)                  (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_POINTER_SHIFT))&MTB_POSITION_POINTER_MASK)
N/* MASTER Bit Fields */
N#define MTB_MASTER_MASK_MASK                     0x1Fu
N#define MTB_MASTER_MASK_SHIFT                    0
N#define MTB_MASTER_MASK(x)                       (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_MASK_SHIFT))&MTB_MASTER_MASK_MASK)
N#define MTB_MASTER_TSTARTEN_MASK                 0x20u
N#define MTB_MASTER_TSTARTEN_SHIFT                5
N#define MTB_MASTER_TSTOPEN_MASK                  0x40u
N#define MTB_MASTER_TSTOPEN_SHIFT                 6
N#define MTB_MASTER_SFRWPRIV_MASK                 0x80u
N#define MTB_MASTER_SFRWPRIV_SHIFT                7
N#define MTB_MASTER_RAMPRIV_MASK                  0x100u
N#define MTB_MASTER_RAMPRIV_SHIFT                 8
N#define MTB_MASTER_HALTREQ_MASK                  0x200u
N#define MTB_MASTER_HALTREQ_SHIFT                 9
N#define MTB_MASTER_EN_MASK                       0x80000000u
N#define MTB_MASTER_EN_SHIFT                      31
N/* FLOW Bit Fields */
N#define MTB_FLOW_AUTOSTOP_MASK                   0x1u
N#define MTB_FLOW_AUTOSTOP_SHIFT                  0
N#define MTB_FLOW_AUTOHALT_MASK                   0x2u
N#define MTB_FLOW_AUTOHALT_SHIFT                  1
N#define MTB_FLOW_WATERMARK_MASK                  0xFFFFFFF8u
N#define MTB_FLOW_WATERMARK_SHIFT                 3
N#define MTB_FLOW_WATERMARK(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_WATERMARK_SHIFT))&MTB_FLOW_WATERMARK_MASK)
N/* BASE Bit Fields */
N#define MTB_BASE_BASEADDR_MASK                   0xFFFFFFFFu
N#define MTB_BASE_BASEADDR_SHIFT                  0
N#define MTB_BASE_BASEADDR(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_BASE_BASEADDR_SHIFT))&MTB_BASE_BASEADDR_MASK)
N/* MODECTRL Bit Fields */
N#define MTB_MODECTRL_MODECTRL_MASK               0xFFFFFFFFu
N#define MTB_MODECTRL_MODECTRL_SHIFT              0
N#define MTB_MODECTRL_MODECTRL(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_MODECTRL_MODECTRL_SHIFT))&MTB_MODECTRL_MODECTRL_MASK)
N/* TAGSET Bit Fields */
N#define MTB_TAGSET_TAGSET_MASK                   0xFFFFFFFFu
N#define MTB_TAGSET_TAGSET_SHIFT                  0
N#define MTB_TAGSET_TAGSET(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_TAGSET_TAGSET_SHIFT))&MTB_TAGSET_TAGSET_MASK)
N/* TAGCLEAR Bit Fields */
N#define MTB_TAGCLEAR_TAGCLEAR_MASK               0xFFFFFFFFu
N#define MTB_TAGCLEAR_TAGCLEAR_SHIFT              0
N#define MTB_TAGCLEAR_TAGCLEAR(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_TAGCLEAR_TAGCLEAR_SHIFT))&MTB_TAGCLEAR_TAGCLEAR_MASK)
N/* LOCKACCESS Bit Fields */
N#define MTB_LOCKACCESS_LOCKACCESS_MASK           0xFFFFFFFFu
N#define MTB_LOCKACCESS_LOCKACCESS_SHIFT          0
N#define MTB_LOCKACCESS_LOCKACCESS(x)             (((uint32_t)(((uint32_t)(x))<<MTB_LOCKACCESS_LOCKACCESS_SHIFT))&MTB_LOCKACCESS_LOCKACCESS_MASK)
N/* LOCKSTAT Bit Fields */
N#define MTB_LOCKSTAT_LOCKSTAT_MASK               0xFFFFFFFFu
N#define MTB_LOCKSTAT_LOCKSTAT_SHIFT              0
N#define MTB_LOCKSTAT_LOCKSTAT(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_LOCKSTAT_LOCKSTAT_SHIFT))&MTB_LOCKSTAT_LOCKSTAT_MASK)
N/* AUTHSTAT Bit Fields */
N#define MTB_AUTHSTAT_BIT0_MASK                   0x1u
N#define MTB_AUTHSTAT_BIT0_SHIFT                  0
N#define MTB_AUTHSTAT_BIT1_MASK                   0x2u
N#define MTB_AUTHSTAT_BIT1_SHIFT                  1
N#define MTB_AUTHSTAT_BIT2_MASK                   0x4u
N#define MTB_AUTHSTAT_BIT2_SHIFT                  2
N#define MTB_AUTHSTAT_BIT3_MASK                   0x8u
N#define MTB_AUTHSTAT_BIT3_SHIFT                  3
N/* DEVICEARCH Bit Fields */
N#define MTB_DEVICEARCH_DEVICEARCH_MASK           0xFFFFFFFFu
N#define MTB_DEVICEARCH_DEVICEARCH_SHIFT          0
N#define MTB_DEVICEARCH_DEVICEARCH(x)             (((uint32_t)(((uint32_t)(x))<<MTB_DEVICEARCH_DEVICEARCH_SHIFT))&MTB_DEVICEARCH_DEVICEARCH_MASK)
N/* DEVICECFG Bit Fields */
N#define MTB_DEVICECFG_DEVICECFG_MASK             0xFFFFFFFFu
N#define MTB_DEVICECFG_DEVICECFG_SHIFT            0
N#define MTB_DEVICECFG_DEVICECFG(x)               (((uint32_t)(((uint32_t)(x))<<MTB_DEVICECFG_DEVICECFG_SHIFT))&MTB_DEVICECFG_DEVICECFG_MASK)
N/* DEVICETYPID Bit Fields */
N#define MTB_DEVICETYPID_DEVICETYPID_MASK         0xFFFFFFFFu
N#define MTB_DEVICETYPID_DEVICETYPID_SHIFT        0
N#define MTB_DEVICETYPID_DEVICETYPID(x)           (((uint32_t)(((uint32_t)(x))<<MTB_DEVICETYPID_DEVICETYPID_SHIFT))&MTB_DEVICETYPID_DEVICETYPID_MASK)
N/* PERIPHID Bit Fields */
N#define MTB_PERIPHID_PERIPHID_MASK               0xFFFFFFFFu
N#define MTB_PERIPHID_PERIPHID_SHIFT              0
N#define MTB_PERIPHID_PERIPHID(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID_PERIPHID_SHIFT))&MTB_PERIPHID_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define MTB_COMPID_COMPID_MASK                   0xFFFFFFFFu
N#define MTB_COMPID_COMPID_SHIFT                  0
N#define MTB_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_COMPID_COMPID_SHIFT))&MTB_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group MTB_Register_Masks */
N
N
N/* MTB - Peripheral instance base addresses */
N/** Peripheral MTB base address */
N#define MTB_BASE                                 (0xF0000000u)
N/** Peripheral MTB base pointer */
N#define MTB                                      ((MTB_Type *)MTB_BASE)
N/** Array initializer of MTB peripheral base pointers */
N#define MTB_BASES                                { MTB }
N
N/*!
N * @}
N */ /* end of group MTB_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Peripheral_Access_Layer MTBDWT Peripheral Access Layer
N * @{
N */
N
N/** MTBDWT - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t CTRL;                              /**< MTB DWT Control Register, offset: 0x0 */
X  volatile const  uint32_t CTRL;                               
N       uint8_t RESERVED_0[28];
N  struct {                                         /* offset: 0x20, array step: 0x10 */
N    __IO uint32_t COMP;                              /**< MTB_DWT Comparator Register, array offset: 0x20, array step: 0x10 */
X    volatile uint32_t COMP;                               
N    __IO uint32_t MASK;                              /**< MTB_DWT Comparator Mask Register, array offset: 0x24, array step: 0x10 */
X    volatile uint32_t MASK;                               
N    __IO uint32_t FCT;                               /**< MTB_DWT Comparator Function Register 0..MTB_DWT Comparator Function Register 1, array offset: 0x28, array step: 0x10 */
X    volatile uint32_t FCT;                                
N         uint8_t RESERVED_0[4];
N  } COMPARATOR[2];
N       uint8_t RESERVED_1[448];
N  __IO uint32_t TBCTRL;                            /**< MTB_DWT Trace Buffer Control Register, offset: 0x200 */
X  volatile uint32_t TBCTRL;                             
N       uint8_t RESERVED_2[3524];
N  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
X  volatile const  uint32_t DEVICECFG;                          
N  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
X  volatile const  uint32_t DEVICETYPID;                        
N  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
X  volatile const  uint32_t PERIPHID[8];                        
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} MTBDWT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Register_Masks MTBDWT Register Masks
N * @{
N */
N
N/* CTRL Bit Fields */
N#define MTBDWT_CTRL_DWTCFGCTRL_MASK              0xFFFFFFFu
N#define MTBDWT_CTRL_DWTCFGCTRL_SHIFT             0
N#define MTBDWT_CTRL_DWTCFGCTRL(x)                (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_DWTCFGCTRL_SHIFT))&MTBDWT_CTRL_DWTCFGCTRL_MASK)
N#define MTBDWT_CTRL_NUMCMP_MASK                  0xF0000000u
N#define MTBDWT_CTRL_NUMCMP_SHIFT                 28
N#define MTBDWT_CTRL_NUMCMP(x)                    (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_NUMCMP_SHIFT))&MTBDWT_CTRL_NUMCMP_MASK)
N/* COMP Bit Fields */
N#define MTBDWT_COMP_COMP_MASK                    0xFFFFFFFFu
N#define MTBDWT_COMP_COMP_SHIFT                   0
N#define MTBDWT_COMP_COMP(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMP_COMP_SHIFT))&MTBDWT_COMP_COMP_MASK)
N/* MASK Bit Fields */
N#define MTBDWT_MASK_MASK_MASK                    0x1Fu
N#define MTBDWT_MASK_MASK_SHIFT                   0
N#define MTBDWT_MASK_MASK(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_MASK_MASK_SHIFT))&MTBDWT_MASK_MASK_MASK)
N/* FCT Bit Fields */
N#define MTBDWT_FCT_FUNCTION_MASK                 0xFu
N#define MTBDWT_FCT_FUNCTION_SHIFT                0
N#define MTBDWT_FCT_FUNCTION(x)                   (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_FUNCTION_SHIFT))&MTBDWT_FCT_FUNCTION_MASK)
N#define MTBDWT_FCT_DATAVMATCH_MASK               0x100u
N#define MTBDWT_FCT_DATAVMATCH_SHIFT              8
N#define MTBDWT_FCT_DATAVSIZE_MASK                0xC00u
N#define MTBDWT_FCT_DATAVSIZE_SHIFT               10
N#define MTBDWT_FCT_DATAVSIZE(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVSIZE_SHIFT))&MTBDWT_FCT_DATAVSIZE_MASK)
N#define MTBDWT_FCT_DATAVADDR0_MASK               0xF000u
N#define MTBDWT_FCT_DATAVADDR0_SHIFT              12
N#define MTBDWT_FCT_DATAVADDR0(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVADDR0_SHIFT))&MTBDWT_FCT_DATAVADDR0_MASK)
N#define MTBDWT_FCT_MATCHED_MASK                  0x1000000u
N#define MTBDWT_FCT_MATCHED_SHIFT                 24
N/* TBCTRL Bit Fields */
N#define MTBDWT_TBCTRL_ACOMP0_MASK                0x1u
N#define MTBDWT_TBCTRL_ACOMP0_SHIFT               0
N#define MTBDWT_TBCTRL_ACOMP1_MASK                0x2u
N#define MTBDWT_TBCTRL_ACOMP1_SHIFT               1
N#define MTBDWT_TBCTRL_NUMCOMP_MASK               0xF0000000u
N#define MTBDWT_TBCTRL_NUMCOMP_SHIFT              28
N#define MTBDWT_TBCTRL_NUMCOMP(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_NUMCOMP_SHIFT))&MTBDWT_TBCTRL_NUMCOMP_MASK)
N/* DEVICECFG Bit Fields */
N#define MTBDWT_DEVICECFG_DEVICECFG_MASK          0xFFFFFFFFu
N#define MTBDWT_DEVICECFG_DEVICECFG_SHIFT         0
N#define MTBDWT_DEVICECFG_DEVICECFG(x)            (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICECFG_DEVICECFG_SHIFT))&MTBDWT_DEVICECFG_DEVICECFG_MASK)
N/* DEVICETYPID Bit Fields */
N#define MTBDWT_DEVICETYPID_DEVICETYPID_MASK      0xFFFFFFFFu
N#define MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT     0
N#define MTBDWT_DEVICETYPID_DEVICETYPID(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT))&MTBDWT_DEVICETYPID_DEVICETYPID_MASK)
N/* PERIPHID Bit Fields */
N#define MTBDWT_PERIPHID_PERIPHID_MASK            0xFFFFFFFFu
N#define MTBDWT_PERIPHID_PERIPHID_SHIFT           0
N#define MTBDWT_PERIPHID_PERIPHID(x)              (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID_PERIPHID_SHIFT))&MTBDWT_PERIPHID_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define MTBDWT_COMPID_COMPID_MASK                0xFFFFFFFFu
N#define MTBDWT_COMPID_COMPID_SHIFT               0
N#define MTBDWT_COMPID_COMPID(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID_COMPID_SHIFT))&MTBDWT_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group MTBDWT_Register_Masks */
N
N
N/* MTBDWT - Peripheral instance base addresses */
N/** Peripheral MTBDWT base address */
N#define MTBDWT_BASE                              (0xF0001000u)
N/** Peripheral MTBDWT base pointer */
N#define MTBDWT                                   ((MTBDWT_Type *)MTBDWT_BASE)
N/** Array initializer of MTBDWT peripheral base pointers */
N#define MTBDWT_BASES                             { MTBDWT }
N
N/*!
N * @}
N */ /* end of group MTBDWT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- NV Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Peripheral_Access_Layer NV Peripheral Access Layer
N * @{
N */
N
N/** NV - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t BACKKEY3;                           /**< Backdoor Comparison Key 3., offset: 0x0 */
X  volatile const  uint8_t BACKKEY3;                            
N  __I  uint8_t BACKKEY2;                           /**< Backdoor Comparison Key 2., offset: 0x1 */
X  volatile const  uint8_t BACKKEY2;                            
N  __I  uint8_t BACKKEY1;                           /**< Backdoor Comparison Key 1., offset: 0x2 */
X  volatile const  uint8_t BACKKEY1;                            
N  __I  uint8_t BACKKEY0;                           /**< Backdoor Comparison Key 0., offset: 0x3 */
X  volatile const  uint8_t BACKKEY0;                            
N  __I  uint8_t BACKKEY7;                           /**< Backdoor Comparison Key 7., offset: 0x4 */
X  volatile const  uint8_t BACKKEY7;                            
N  __I  uint8_t BACKKEY6;                           /**< Backdoor Comparison Key 6., offset: 0x5 */
X  volatile const  uint8_t BACKKEY6;                            
N  __I  uint8_t BACKKEY5;                           /**< Backdoor Comparison Key 5., offset: 0x6 */
X  volatile const  uint8_t BACKKEY5;                            
N  __I  uint8_t BACKKEY4;                           /**< Backdoor Comparison Key 4., offset: 0x7 */
X  volatile const  uint8_t BACKKEY4;                            
N  __I  uint8_t FPROT3;                             /**< Non-volatile P-Flash Protection 1 - Low Register, offset: 0x8 */
X  volatile const  uint8_t FPROT3;                              
N  __I  uint8_t FPROT2;                             /**< Non-volatile P-Flash Protection 1 - High Register, offset: 0x9 */
X  volatile const  uint8_t FPROT2;                              
N  __I  uint8_t FPROT1;                             /**< Non-volatile P-Flash Protection 0 - Low Register, offset: 0xA */
X  volatile const  uint8_t FPROT1;                              
N  __I  uint8_t FPROT0;                             /**< Non-volatile P-Flash Protection 0 - High Register, offset: 0xB */
X  volatile const  uint8_t FPROT0;                              
N  __I  uint8_t FSEC;                               /**< Non-volatile Flash Security Register, offset: 0xC */
X  volatile const  uint8_t FSEC;                                
N  __I  uint8_t FOPT;                               /**< Non-volatile Flash Option Register, offset: 0xD */
X  volatile const  uint8_t FOPT;                                
N} NV_Type;
N
N/* ----------------------------------------------------------------------------
N   -- NV Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Register_Masks NV Register Masks
N * @{
N */
N
N/* BACKKEY3 Bit Fields */
N#define NV_BACKKEY3_KEY_MASK                     0xFFu
N#define NV_BACKKEY3_KEY_SHIFT                    0
N#define NV_BACKKEY3_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY3_KEY_SHIFT))&NV_BACKKEY3_KEY_MASK)
N/* BACKKEY2 Bit Fields */
N#define NV_BACKKEY2_KEY_MASK                     0xFFu
N#define NV_BACKKEY2_KEY_SHIFT                    0
N#define NV_BACKKEY2_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY2_KEY_SHIFT))&NV_BACKKEY2_KEY_MASK)
N/* BACKKEY1 Bit Fields */
N#define NV_BACKKEY1_KEY_MASK                     0xFFu
N#define NV_BACKKEY1_KEY_SHIFT                    0
N#define NV_BACKKEY1_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY1_KEY_SHIFT))&NV_BACKKEY1_KEY_MASK)
N/* BACKKEY0 Bit Fields */
N#define NV_BACKKEY0_KEY_MASK                     0xFFu
N#define NV_BACKKEY0_KEY_SHIFT                    0
N#define NV_BACKKEY0_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY0_KEY_SHIFT))&NV_BACKKEY0_KEY_MASK)
N/* BACKKEY7 Bit Fields */
N#define NV_BACKKEY7_KEY_MASK                     0xFFu
N#define NV_BACKKEY7_KEY_SHIFT                    0
N#define NV_BACKKEY7_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY7_KEY_SHIFT))&NV_BACKKEY7_KEY_MASK)
N/* BACKKEY6 Bit Fields */
N#define NV_BACKKEY6_KEY_MASK                     0xFFu
N#define NV_BACKKEY6_KEY_SHIFT                    0
N#define NV_BACKKEY6_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY6_KEY_SHIFT))&NV_BACKKEY6_KEY_MASK)
N/* BACKKEY5 Bit Fields */
N#define NV_BACKKEY5_KEY_MASK                     0xFFu
N#define NV_BACKKEY5_KEY_SHIFT                    0
N#define NV_BACKKEY5_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY5_KEY_SHIFT))&NV_BACKKEY5_KEY_MASK)
N/* BACKKEY4 Bit Fields */
N#define NV_BACKKEY4_KEY_MASK                     0xFFu
N#define NV_BACKKEY4_KEY_SHIFT                    0
N#define NV_BACKKEY4_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY4_KEY_SHIFT))&NV_BACKKEY4_KEY_MASK)
N/* FPROT3 Bit Fields */
N#define NV_FPROT3_PROT_MASK                      0xFFu
N#define NV_FPROT3_PROT_SHIFT                     0
N#define NV_FPROT3_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT3_PROT_SHIFT))&NV_FPROT3_PROT_MASK)
N/* FPROT2 Bit Fields */
N#define NV_FPROT2_PROT_MASK                      0xFFu
N#define NV_FPROT2_PROT_SHIFT                     0
N#define NV_FPROT2_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT2_PROT_SHIFT))&NV_FPROT2_PROT_MASK)
N/* FPROT1 Bit Fields */
N#define NV_FPROT1_PROT_MASK                      0xFFu
N#define NV_FPROT1_PROT_SHIFT                     0
N#define NV_FPROT1_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT1_PROT_SHIFT))&NV_FPROT1_PROT_MASK)
N/* FPROT0 Bit Fields */
N#define NV_FPROT0_PROT_MASK                      0xFFu
N#define NV_FPROT0_PROT_SHIFT                     0
N#define NV_FPROT0_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT0_PROT_SHIFT))&NV_FPROT0_PROT_MASK)
N/* FSEC Bit Fields */
N#define NV_FSEC_SEC_MASK                         0x3u
N#define NV_FSEC_SEC_SHIFT                        0
N#define NV_FSEC_SEC(x)                           (((uint8_t)(((uint8_t)(x))<<NV_FSEC_SEC_SHIFT))&NV_FSEC_SEC_MASK)
N#define NV_FSEC_FSLACC_MASK                      0xCu
N#define NV_FSEC_FSLACC_SHIFT                     2
N#define NV_FSEC_FSLACC(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FSEC_FSLACC_SHIFT))&NV_FSEC_FSLACC_MASK)
N#define NV_FSEC_MEEN_MASK                        0x30u
N#define NV_FSEC_MEEN_SHIFT                       4
N#define NV_FSEC_MEEN(x)                          (((uint8_t)(((uint8_t)(x))<<NV_FSEC_MEEN_SHIFT))&NV_FSEC_MEEN_MASK)
N#define NV_FSEC_KEYEN_MASK                       0xC0u
N#define NV_FSEC_KEYEN_SHIFT                      6
N#define NV_FSEC_KEYEN(x)                         (((uint8_t)(((uint8_t)(x))<<NV_FSEC_KEYEN_SHIFT))&NV_FSEC_KEYEN_MASK)
N/* FOPT Bit Fields */
N#define NV_FOPT_LPBOOT0_MASK                     0x1u
N#define NV_FOPT_LPBOOT0_SHIFT                    0
N#define NV_FOPT_NMI_DIS_MASK                     0x4u
N#define NV_FOPT_NMI_DIS_SHIFT                    2
N#define NV_FOPT_RESET_PIN_CFG_MASK               0x8u
N#define NV_FOPT_RESET_PIN_CFG_SHIFT              3
N#define NV_FOPT_LPBOOT1_MASK                     0x10u
N#define NV_FOPT_LPBOOT1_SHIFT                    4
N#define NV_FOPT_FAST_INIT_MASK                   0x20u
N#define NV_FOPT_FAST_INIT_SHIFT                  5
N
N/*!
N * @}
N */ /* end of group NV_Register_Masks */
N
N
N/* NV - Peripheral instance base addresses */
N/** Peripheral FTFA_FlashConfig base address */
N#define FTFA_FlashConfig_BASE                    (0x400u)
N/** Peripheral FTFA_FlashConfig base pointer */
N#define FTFA_FlashConfig                         ((NV_Type *)FTFA_FlashConfig_BASE)
N/** Array initializer of NV peripheral base pointers */
N#define NV_BASES                                 { FTFA_FlashConfig }
N
N/*!
N * @}
N */ /* end of group NV_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- OSC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Peripheral_Access_Layer OSC Peripheral Access Layer
N * @{
N */
N
N/** OSC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CR;                                 /**< OSC Control Register, offset: 0x0 */
X  volatile uint8_t CR;                                  
N} OSC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- OSC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Register_Masks OSC Register Masks
N * @{
N */
N
N/* CR Bit Fields */
N#define OSC_CR_SC16P_MASK                        0x1u
N#define OSC_CR_SC16P_SHIFT                       0
N#define OSC_CR_SC8P_MASK                         0x2u
N#define OSC_CR_SC8P_SHIFT                        1
N#define OSC_CR_SC4P_MASK                         0x4u
N#define OSC_CR_SC4P_SHIFT                        2
N#define OSC_CR_SC2P_MASK                         0x8u
N#define OSC_CR_SC2P_SHIFT                        3
N#define OSC_CR_EREFSTEN_MASK                     0x20u
N#define OSC_CR_EREFSTEN_SHIFT                    5
N#define OSC_CR_ERCLKEN_MASK                      0x80u
N#define OSC_CR_ERCLKEN_SHIFT                     7
N
N/*!
N * @}
N */ /* end of group OSC_Register_Masks */
N
N
N/* OSC - Peripheral instance base addresses */
N/** Peripheral OSC0 base address */
N#define OSC0_BASE                                (0x40065000u)
N/** Peripheral OSC0 base pointer */
N#define OSC0                                     ((OSC_Type *)OSC0_BASE)
N/** Array initializer of OSC peripheral base pointers */
N#define OSC_BASES                                { OSC0 }
N
N/*!
N * @}
N */ /* end of group OSC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PIT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Peripheral_Access_Layer PIT Peripheral Access Layer
N * @{
N */
N
N/** PIT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t MCR;                               /**< PIT Module Control Register, offset: 0x0 */
X  volatile uint32_t MCR;                                
N       uint8_t RESERVED_0[220];
N  __I  uint32_t LTMR64H;                           /**< PIT Upper Lifetime Timer Register, offset: 0xE0 */
X  volatile const  uint32_t LTMR64H;                            
N  __I  uint32_t LTMR64L;                           /**< PIT Lower Lifetime Timer Register, offset: 0xE4 */
X  volatile const  uint32_t LTMR64L;                            
N       uint8_t RESERVED_1[24];
N  struct {                                         /* offset: 0x100, array step: 0x10 */
N    __IO uint32_t LDVAL;                             /**< Timer Load Value Register, array offset: 0x100, array step: 0x10 */
X    volatile uint32_t LDVAL;                              
N    __I  uint32_t CVAL;                              /**< Current Timer Value Register, array offset: 0x104, array step: 0x10 */
X    volatile const  uint32_t CVAL;                               
N    __IO uint32_t TCTRL;                             /**< Timer Control Register, array offset: 0x108, array step: 0x10 */
X    volatile uint32_t TCTRL;                              
N    __IO uint32_t TFLG;                              /**< Timer Flag Register, array offset: 0x10C, array step: 0x10 */
X    volatile uint32_t TFLG;                               
N  } CHANNEL[2];
N} PIT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- PIT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Register_Masks PIT Register Masks
N * @{
N */
N
N/* MCR Bit Fields */
N#define PIT_MCR_FRZ_MASK                         0x1u
N#define PIT_MCR_FRZ_SHIFT                        0
N#define PIT_MCR_MDIS_MASK                        0x2u
N#define PIT_MCR_MDIS_SHIFT                       1
N/* LTMR64H Bit Fields */
N#define PIT_LTMR64H_LTH_MASK                     0xFFFFFFFFu
N#define PIT_LTMR64H_LTH_SHIFT                    0
N#define PIT_LTMR64H_LTH(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64H_LTH_SHIFT))&PIT_LTMR64H_LTH_MASK)
N/* LTMR64L Bit Fields */
N#define PIT_LTMR64L_LTL_MASK                     0xFFFFFFFFu
N#define PIT_LTMR64L_LTL_SHIFT                    0
N#define PIT_LTMR64L_LTL(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64L_LTL_SHIFT))&PIT_LTMR64L_LTL_MASK)
N/* LDVAL Bit Fields */
N#define PIT_LDVAL_TSV_MASK                       0xFFFFFFFFu
N#define PIT_LDVAL_TSV_SHIFT                      0
N#define PIT_LDVAL_TSV(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL_TSV_SHIFT))&PIT_LDVAL_TSV_MASK)
N/* CVAL Bit Fields */
N#define PIT_CVAL_TVL_MASK                        0xFFFFFFFFu
N#define PIT_CVAL_TVL_SHIFT                       0
N#define PIT_CVAL_TVL(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_CVAL_TVL_SHIFT))&PIT_CVAL_TVL_MASK)
N/* TCTRL Bit Fields */
N#define PIT_TCTRL_TEN_MASK                       0x1u
N#define PIT_TCTRL_TEN_SHIFT                      0
N#define PIT_TCTRL_TIE_MASK                       0x2u
N#define PIT_TCTRL_TIE_SHIFT                      1
N#define PIT_TCTRL_CHN_MASK                       0x4u
N#define PIT_TCTRL_CHN_SHIFT                      2
N/* TFLG Bit Fields */
N#define PIT_TFLG_TIF_MASK                        0x1u
N#define PIT_TFLG_TIF_SHIFT                       0
N
N/*!
N * @}
N */ /* end of group PIT_Register_Masks */
N
N
N/* PIT - Peripheral instance base addresses */
N/** Peripheral PIT base address */
N#define PIT_BASE                                 (0x40037000u)
N/** Peripheral PIT base pointer */
N#define PIT                                      ((PIT_Type *)PIT_BASE)
N/** Array initializer of PIT peripheral base pointers */
N#define PIT_BASES                                { PIT }
N
N/*!
N * @}
N */ /* end of group PIT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Peripheral_Access_Layer PMC Peripheral Access Layer
N * @{
N */
N
N/** PMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t LVDSC1;                             /**< Low Voltage Detect Status And Control 1 register, offset: 0x0 */
X  volatile uint8_t LVDSC1;                              
N  __IO uint8_t LVDSC2;                             /**< Low Voltage Detect Status And Control 2 register, offset: 0x1 */
X  volatile uint8_t LVDSC2;                              
N  __IO uint8_t REGSC;                              /**< Regulator Status And Control register, offset: 0x2 */
X  volatile uint8_t REGSC;                               
N} PMC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- PMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Register_Masks PMC Register Masks
N * @{
N */
N
N/* LVDSC1 Bit Fields */
N#define PMC_LVDSC1_LVDV_MASK                     0x3u
N#define PMC_LVDSC1_LVDV_SHIFT                    0
N#define PMC_LVDSC1_LVDV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDV_SHIFT))&PMC_LVDSC1_LVDV_MASK)
N#define PMC_LVDSC1_LVDRE_MASK                    0x10u
N#define PMC_LVDSC1_LVDRE_SHIFT                   4
N#define PMC_LVDSC1_LVDIE_MASK                    0x20u
N#define PMC_LVDSC1_LVDIE_SHIFT                   5
N#define PMC_LVDSC1_LVDACK_MASK                   0x40u
N#define PMC_LVDSC1_LVDACK_SHIFT                  6
N#define PMC_LVDSC1_LVDF_MASK                     0x80u
N#define PMC_LVDSC1_LVDF_SHIFT                    7
N/* LVDSC2 Bit Fields */
N#define PMC_LVDSC2_LVWV_MASK                     0x3u
N#define PMC_LVDSC2_LVWV_SHIFT                    0
N#define PMC_LVDSC2_LVWV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWV_SHIFT))&PMC_LVDSC2_LVWV_MASK)
N#define PMC_LVDSC2_LVWIE_MASK                    0x20u
N#define PMC_LVDSC2_LVWIE_SHIFT                   5
N#define PMC_LVDSC2_LVWACK_MASK                   0x40u
N#define PMC_LVDSC2_LVWACK_SHIFT                  6
N#define PMC_LVDSC2_LVWF_MASK                     0x80u
N#define PMC_LVDSC2_LVWF_SHIFT                    7
N/* REGSC Bit Fields */
N#define PMC_REGSC_BGBE_MASK                      0x1u
N#define PMC_REGSC_BGBE_SHIFT                     0
N#define PMC_REGSC_REGONS_MASK                    0x4u
N#define PMC_REGSC_REGONS_SHIFT                   2
N#define PMC_REGSC_ACKISO_MASK                    0x8u
N#define PMC_REGSC_ACKISO_SHIFT                   3
N#define PMC_REGSC_BGEN_MASK                      0x10u
N#define PMC_REGSC_BGEN_SHIFT                     4
N
N/*!
N * @}
N */ /* end of group PMC_Register_Masks */
N
N
N/* PMC - Peripheral instance base addresses */
N/** Peripheral PMC base address */
N#define PMC_BASE                                 (0x4007D000u)
N/** Peripheral PMC base pointer */
N#define PMC                                      ((PMC_Type *)PMC_BASE)
N/** Array initializer of PMC peripheral base pointers */
N#define PMC_BASES                                { PMC }
N
N/*!
N * @}
N */ /* end of group PMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PORT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Peripheral_Access_Layer PORT Peripheral Access Layer
N * @{
N */
N
N/** PORT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PCR[32];                           /**< Pin Control Register n, array offset: 0x0, array step: 0x4 */
X  volatile uint32_t PCR[32];                            
N  __O  uint32_t GPCLR;                             /**< Global Pin Control Low Register, offset: 0x80 */
X  volatile  uint32_t GPCLR;                              
N  __O  uint32_t GPCHR;                             /**< Global Pin Control High Register, offset: 0x84 */
X  volatile  uint32_t GPCHR;                              
N       uint8_t RESERVED_0[24];
N  __IO uint32_t ISFR;                              /**< Interrupt Status Flag Register, offset: 0xA0 */
X  volatile uint32_t ISFR;                               
N} PORT_Type;
N
N/* ----------------------------------------------------------------------------
N   -- PORT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Register_Masks PORT Register Masks
N * @{
N */
N
N/* PCR Bit Fields */
N#define PORT_PCR_PS_MASK                         0x1u
N#define PORT_PCR_PS_SHIFT                        0
N#define PORT_PCR_PE_MASK                         0x2u
N#define PORT_PCR_PE_SHIFT                        1
N#define PORT_PCR_SRE_MASK                        0x4u
N#define PORT_PCR_SRE_SHIFT                       2
N#define PORT_PCR_PFE_MASK                        0x10u
N#define PORT_PCR_PFE_SHIFT                       4
N#define PORT_PCR_DSE_MASK                        0x40u
N#define PORT_PCR_DSE_SHIFT                       6
N#define PORT_PCR_MUX_MASK                        0x700u
N#define PORT_PCR_MUX_SHIFT                       8
N#define PORT_PCR_MUX(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_MUX_SHIFT))&PORT_PCR_MUX_MASK)
N#define PORT_PCR_IRQC_MASK                       0xF0000u
N#define PORT_PCR_IRQC_SHIFT                      16
N#define PORT_PCR_IRQC(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_PCR_IRQC_SHIFT))&PORT_PCR_IRQC_MASK)
N#define PORT_PCR_ISF_MASK                        0x1000000u
N#define PORT_PCR_ISF_SHIFT                       24
N/* GPCLR Bit Fields */
N#define PORT_GPCLR_GPWD_MASK                     0xFFFFu
N#define PORT_GPCLR_GPWD_SHIFT                    0
N#define PORT_GPCLR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWD_SHIFT))&PORT_GPCLR_GPWD_MASK)
N#define PORT_GPCLR_GPWE_MASK                     0xFFFF0000u
N#define PORT_GPCLR_GPWE_SHIFT                    16
N#define PORT_GPCLR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWE_SHIFT))&PORT_GPCLR_GPWE_MASK)
N/* GPCHR Bit Fields */
N#define PORT_GPCHR_GPWD_MASK                     0xFFFFu
N#define PORT_GPCHR_GPWD_SHIFT                    0
N#define PORT_GPCHR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWD_SHIFT))&PORT_GPCHR_GPWD_MASK)
N#define PORT_GPCHR_GPWE_MASK                     0xFFFF0000u
N#define PORT_GPCHR_GPWE_SHIFT                    16
N#define PORT_GPCHR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWE_SHIFT))&PORT_GPCHR_GPWE_MASK)
N/* ISFR Bit Fields */
N#define PORT_ISFR_ISF_MASK                       0xFFFFFFFFu
N#define PORT_ISFR_ISF_SHIFT                      0
N#define PORT_ISFR_ISF(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_ISFR_ISF_SHIFT))&PORT_ISFR_ISF_MASK)
N
N/*!
N * @}
N */ /* end of group PORT_Register_Masks */
N
N
N/* PORT - Peripheral instance base addresses */
N/** Peripheral PORTA base address */
N#define PORTA_BASE                               (0x40049000u)
N/** Peripheral PORTA base pointer */
N#define PORTA                                    ((PORT_Type *)PORTA_BASE)
N/** Peripheral PORTB base address */
N#define PORTB_BASE                               (0x4004A000u)
N/** Peripheral PORTB base pointer */
N#define PORTB                                    ((PORT_Type *)PORTB_BASE)
N/** Peripheral PORTC base address */
N#define PORTC_BASE                               (0x4004B000u)
N/** Peripheral PORTC base pointer */
N#define PORTC                                    ((PORT_Type *)PORTC_BASE)
N/** Peripheral PORTD base address */
N#define PORTD_BASE                               (0x4004C000u)
N/** Peripheral PORTD base pointer */
N#define PORTD                                    ((PORT_Type *)PORTD_BASE)
N/** Peripheral PORTE base address */
N#define PORTE_BASE                               (0x4004D000u)
N/** Peripheral PORTE base pointer */
N#define PORTE                                    ((PORT_Type *)PORTE_BASE)
N/** Array initializer of PORT peripheral base pointers */
N#define PORT_BASES                               { PORTA, PORTB, PORTC, PORTD, PORTE }
N
N/*!
N * @}
N */ /* end of group PORT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RCM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Peripheral_Access_Layer RCM Peripheral Access Layer
N * @{
N */
N
N/** RCM - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t SRS0;                               /**< System Reset Status Register 0, offset: 0x0 */
X  volatile const  uint8_t SRS0;                                
N  __I  uint8_t SRS1;                               /**< System Reset Status Register 1, offset: 0x1 */
X  volatile const  uint8_t SRS1;                                
N       uint8_t RESERVED_0[2];
N  __IO uint8_t RPFC;                               /**< Reset Pin Filter Control register, offset: 0x4 */
X  volatile uint8_t RPFC;                                
N  __IO uint8_t RPFW;                               /**< Reset Pin Filter Width register, offset: 0x5 */
X  volatile uint8_t RPFW;                                
N} RCM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- RCM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Register_Masks RCM Register Masks
N * @{
N */
N
N/* SRS0 Bit Fields */
N#define RCM_SRS0_WAKEUP_MASK                     0x1u
N#define RCM_SRS0_WAKEUP_SHIFT                    0
N#define RCM_SRS0_LVD_MASK                        0x2u
N#define RCM_SRS0_LVD_SHIFT                       1
N#define RCM_SRS0_LOC_MASK                        0x4u
N#define RCM_SRS0_LOC_SHIFT                       2
N#define RCM_SRS0_LOL_MASK                        0x8u
N#define RCM_SRS0_LOL_SHIFT                       3
N#define RCM_SRS0_WDOG_MASK                       0x20u
N#define RCM_SRS0_WDOG_SHIFT                      5
N#define RCM_SRS0_PIN_MASK                        0x40u
N#define RCM_SRS0_PIN_SHIFT                       6
N#define RCM_SRS0_POR_MASK                        0x80u
N#define RCM_SRS0_POR_SHIFT                       7
N/* SRS1 Bit Fields */
N#define RCM_SRS1_LOCKUP_MASK                     0x2u
N#define RCM_SRS1_LOCKUP_SHIFT                    1
N#define RCM_SRS1_SW_MASK                         0x4u
N#define RCM_SRS1_SW_SHIFT                        2
N#define RCM_SRS1_MDM_AP_MASK                     0x8u
N#define RCM_SRS1_MDM_AP_SHIFT                    3
N#define RCM_SRS1_SACKERR_MASK                    0x20u
N#define RCM_SRS1_SACKERR_SHIFT                   5
N/* RPFC Bit Fields */
N#define RCM_RPFC_RSTFLTSRW_MASK                  0x3u
N#define RCM_RPFC_RSTFLTSRW_SHIFT                 0
N#define RCM_RPFC_RSTFLTSRW(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSRW_SHIFT))&RCM_RPFC_RSTFLTSRW_MASK)
N#define RCM_RPFC_RSTFLTSS_MASK                   0x4u
N#define RCM_RPFC_RSTFLTSS_SHIFT                  2
N/* RPFW Bit Fields */
N#define RCM_RPFW_RSTFLTSEL_MASK                  0x1Fu
N#define RCM_RPFW_RSTFLTSEL_SHIFT                 0
N#define RCM_RPFW_RSTFLTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFW_RSTFLTSEL_SHIFT))&RCM_RPFW_RSTFLTSEL_MASK)
N
N/*!
N * @}
N */ /* end of group RCM_Register_Masks */
N
N
N/* RCM - Peripheral instance base addresses */
N/** Peripheral RCM base address */
N#define RCM_BASE                                 (0x4007F000u)
N/** Peripheral RCM base pointer */
N#define RCM                                      ((RCM_Type *)RCM_BASE)
N/** Array initializer of RCM peripheral base pointers */
N#define RCM_BASES                                { RCM }
N
N/*!
N * @}
N */ /* end of group RCM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- ROM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Peripheral_Access_Layer ROM Peripheral Access Layer
N * @{
N */
N
N/** ROM - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t ENTRY[3];                          /**< Entry, array offset: 0x0, array step: 0x4 */
X  volatile const  uint32_t ENTRY[3];                           
N  __I  uint32_t TABLEMARK;                         /**< End of Table Marker Register, offset: 0xC */
X  volatile const  uint32_t TABLEMARK;                          
N       uint8_t RESERVED_0[4028];
N  __I  uint32_t SYSACCESS;                         /**< System Access Register, offset: 0xFCC */
X  volatile const  uint32_t SYSACCESS;                          
N  __I  uint32_t PERIPHID4;                         /**< Peripheral ID Register, offset: 0xFD0 */
X  volatile const  uint32_t PERIPHID4;                          
N  __I  uint32_t PERIPHID5;                         /**< Peripheral ID Register, offset: 0xFD4 */
X  volatile const  uint32_t PERIPHID5;                          
N  __I  uint32_t PERIPHID6;                         /**< Peripheral ID Register, offset: 0xFD8 */
X  volatile const  uint32_t PERIPHID6;                          
N  __I  uint32_t PERIPHID7;                         /**< Peripheral ID Register, offset: 0xFDC */
X  volatile const  uint32_t PERIPHID7;                          
N  __I  uint32_t PERIPHID0;                         /**< Peripheral ID Register, offset: 0xFE0 */
X  volatile const  uint32_t PERIPHID0;                          
N  __I  uint32_t PERIPHID1;                         /**< Peripheral ID Register, offset: 0xFE4 */
X  volatile const  uint32_t PERIPHID1;                          
N  __I  uint32_t PERIPHID2;                         /**< Peripheral ID Register, offset: 0xFE8 */
X  volatile const  uint32_t PERIPHID2;                          
N  __I  uint32_t PERIPHID3;                         /**< Peripheral ID Register, offset: 0xFEC */
X  volatile const  uint32_t PERIPHID3;                          
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} ROM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- ROM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Register_Masks ROM Register Masks
N * @{
N */
N
N/* ENTRY Bit Fields */
N#define ROM_ENTRY_ENTRY_MASK                     0xFFFFFFFFu
N#define ROM_ENTRY_ENTRY_SHIFT                    0
N#define ROM_ENTRY_ENTRY(x)                       (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY_ENTRY_SHIFT))&ROM_ENTRY_ENTRY_MASK)
N/* TABLEMARK Bit Fields */
N#define ROM_TABLEMARK_MARK_MASK                  0xFFFFFFFFu
N#define ROM_TABLEMARK_MARK_SHIFT                 0
N#define ROM_TABLEMARK_MARK(x)                    (((uint32_t)(((uint32_t)(x))<<ROM_TABLEMARK_MARK_SHIFT))&ROM_TABLEMARK_MARK_MASK)
N/* SYSACCESS Bit Fields */
N#define ROM_SYSACCESS_SYSACCESS_MASK             0xFFFFFFFFu
N#define ROM_SYSACCESS_SYSACCESS_SHIFT            0
N#define ROM_SYSACCESS_SYSACCESS(x)               (((uint32_t)(((uint32_t)(x))<<ROM_SYSACCESS_SYSACCESS_SHIFT))&ROM_SYSACCESS_SYSACCESS_MASK)
N/* PERIPHID4 Bit Fields */
N#define ROM_PERIPHID4_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID4_PERIPHID_SHIFT             0
N#define ROM_PERIPHID4_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID4_PERIPHID_SHIFT))&ROM_PERIPHID4_PERIPHID_MASK)
N/* PERIPHID5 Bit Fields */
N#define ROM_PERIPHID5_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID5_PERIPHID_SHIFT             0
N#define ROM_PERIPHID5_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID5_PERIPHID_SHIFT))&ROM_PERIPHID5_PERIPHID_MASK)
N/* PERIPHID6 Bit Fields */
N#define ROM_PERIPHID6_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID6_PERIPHID_SHIFT             0
N#define ROM_PERIPHID6_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID6_PERIPHID_SHIFT))&ROM_PERIPHID6_PERIPHID_MASK)
N/* PERIPHID7 Bit Fields */
N#define ROM_PERIPHID7_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID7_PERIPHID_SHIFT             0
N#define ROM_PERIPHID7_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID7_PERIPHID_SHIFT))&ROM_PERIPHID7_PERIPHID_MASK)
N/* PERIPHID0 Bit Fields */
N#define ROM_PERIPHID0_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID0_PERIPHID_SHIFT             0
N#define ROM_PERIPHID0_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID0_PERIPHID_SHIFT))&ROM_PERIPHID0_PERIPHID_MASK)
N/* PERIPHID1 Bit Fields */
N#define ROM_PERIPHID1_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID1_PERIPHID_SHIFT             0
N#define ROM_PERIPHID1_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID1_PERIPHID_SHIFT))&ROM_PERIPHID1_PERIPHID_MASK)
N/* PERIPHID2 Bit Fields */
N#define ROM_PERIPHID2_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID2_PERIPHID_SHIFT             0
N#define ROM_PERIPHID2_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID2_PERIPHID_SHIFT))&ROM_PERIPHID2_PERIPHID_MASK)
N/* PERIPHID3 Bit Fields */
N#define ROM_PERIPHID3_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID3_PERIPHID_SHIFT             0
N#define ROM_PERIPHID3_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID3_PERIPHID_SHIFT))&ROM_PERIPHID3_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define ROM_COMPID_COMPID_MASK                   0xFFFFFFFFu
N#define ROM_COMPID_COMPID_SHIFT                  0
N#define ROM_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<ROM_COMPID_COMPID_SHIFT))&ROM_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group ROM_Register_Masks */
N
N
N/* ROM - Peripheral instance base addresses */
N/** Peripheral ROM base address */
N#define ROM_BASE                                 (0xF0002000u)
N/** Peripheral ROM base pointer */
N#define ROM                                      ((ROM_Type *)ROM_BASE)
N/** Array initializer of ROM peripheral base pointers */
N#define ROM_BASES                                { ROM }
N
N/*!
N * @}
N */ /* end of group ROM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RTC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer
N * @{
N */
N
N/** RTC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t TSR;                               /**< RTC Time Seconds Register, offset: 0x0 */
X  volatile uint32_t TSR;                                
N  __IO uint32_t TPR;                               /**< RTC Time Prescaler Register, offset: 0x4 */
X  volatile uint32_t TPR;                                
N  __IO uint32_t TAR;                               /**< RTC Time Alarm Register, offset: 0x8 */
X  volatile uint32_t TAR;                                
N  __IO uint32_t TCR;                               /**< RTC Time Compensation Register, offset: 0xC */
X  volatile uint32_t TCR;                                
N  __IO uint32_t CR;                                /**< RTC Control Register, offset: 0x10 */
X  volatile uint32_t CR;                                 
N  __IO uint32_t SR;                                /**< RTC Status Register, offset: 0x14 */
X  volatile uint32_t SR;                                 
N  __IO uint32_t LR;                                /**< RTC Lock Register, offset: 0x18 */
X  volatile uint32_t LR;                                 
N  __IO uint32_t IER;                               /**< RTC Interrupt Enable Register, offset: 0x1C */
X  volatile uint32_t IER;                                
N} RTC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- RTC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Register_Masks RTC Register Masks
N * @{
N */
N
N/* TSR Bit Fields */
N#define RTC_TSR_TSR_MASK                         0xFFFFFFFFu
N#define RTC_TSR_TSR_SHIFT                        0
N#define RTC_TSR_TSR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TSR_TSR_SHIFT))&RTC_TSR_TSR_MASK)
N/* TPR Bit Fields */
N#define RTC_TPR_TPR_MASK                         0xFFFFu
N#define RTC_TPR_TPR_SHIFT                        0
N#define RTC_TPR_TPR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TPR_TPR_SHIFT))&RTC_TPR_TPR_MASK)
N/* TAR Bit Fields */
N#define RTC_TAR_TAR_MASK                         0xFFFFFFFFu
N#define RTC_TAR_TAR_SHIFT                        0
N#define RTC_TAR_TAR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TAR_TAR_SHIFT))&RTC_TAR_TAR_MASK)
N/* TCR Bit Fields */
N#define RTC_TCR_TCR_MASK                         0xFFu
N#define RTC_TCR_TCR_SHIFT                        0
N#define RTC_TCR_TCR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCR_SHIFT))&RTC_TCR_TCR_MASK)
N#define RTC_TCR_CIR_MASK                         0xFF00u
N#define RTC_TCR_CIR_SHIFT                        8
N#define RTC_TCR_CIR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIR_SHIFT))&RTC_TCR_CIR_MASK)
N#define RTC_TCR_TCV_MASK                         0xFF0000u
N#define RTC_TCR_TCV_SHIFT                        16
N#define RTC_TCR_TCV(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCV_SHIFT))&RTC_TCR_TCV_MASK)
N#define RTC_TCR_CIC_MASK                         0xFF000000u
N#define RTC_TCR_CIC_SHIFT                        24
N#define RTC_TCR_CIC(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIC_SHIFT))&RTC_TCR_CIC_MASK)
N/* CR Bit Fields */
N#define RTC_CR_SWR_MASK                          0x1u
N#define RTC_CR_SWR_SHIFT                         0
N#define RTC_CR_WPE_MASK                          0x2u
N#define RTC_CR_WPE_SHIFT                         1
N#define RTC_CR_SUP_MASK                          0x4u
N#define RTC_CR_SUP_SHIFT                         2
N#define RTC_CR_UM_MASK                           0x8u
N#define RTC_CR_UM_SHIFT                          3
N#define RTC_CR_OSCE_MASK                         0x100u
N#define RTC_CR_OSCE_SHIFT                        8
N#define RTC_CR_CLKO_MASK                         0x200u
N#define RTC_CR_CLKO_SHIFT                        9
N#define RTC_CR_SC16P_MASK                        0x400u
N#define RTC_CR_SC16P_SHIFT                       10
N#define RTC_CR_SC8P_MASK                         0x800u
N#define RTC_CR_SC8P_SHIFT                        11
N#define RTC_CR_SC4P_MASK                         0x1000u
N#define RTC_CR_SC4P_SHIFT                        12
N#define RTC_CR_SC2P_MASK                         0x2000u
N#define RTC_CR_SC2P_SHIFT                        13
N/* SR Bit Fields */
N#define RTC_SR_TIF_MASK                          0x1u
N#define RTC_SR_TIF_SHIFT                         0
N#define RTC_SR_TOF_MASK                          0x2u
N#define RTC_SR_TOF_SHIFT                         1
N#define RTC_SR_TAF_MASK                          0x4u
N#define RTC_SR_TAF_SHIFT                         2
N#define RTC_SR_TCE_MASK                          0x10u
N#define RTC_SR_TCE_SHIFT                         4
N/* LR Bit Fields */
N#define RTC_LR_TCL_MASK                          0x8u
N#define RTC_LR_TCL_SHIFT                         3
N#define RTC_LR_CRL_MASK                          0x10u
N#define RTC_LR_CRL_SHIFT                         4
N#define RTC_LR_SRL_MASK                          0x20u
N#define RTC_LR_SRL_SHIFT                         5
N#define RTC_LR_LRL_MASK                          0x40u
N#define RTC_LR_LRL_SHIFT                         6
N/* IER Bit Fields */
N#define RTC_IER_TIIE_MASK                        0x1u
N#define RTC_IER_TIIE_SHIFT                       0
N#define RTC_IER_TOIE_MASK                        0x2u
N#define RTC_IER_TOIE_SHIFT                       1
N#define RTC_IER_TAIE_MASK                        0x4u
N#define RTC_IER_TAIE_SHIFT                       2
N#define RTC_IER_TSIE_MASK                        0x10u
N#define RTC_IER_TSIE_SHIFT                       4
N#define RTC_IER_WPON_MASK                        0x80u
N#define RTC_IER_WPON_SHIFT                       7
N
N/*!
N * @}
N */ /* end of group RTC_Register_Masks */
N
N
N/* RTC - Peripheral instance base addresses */
N/** Peripheral RTC base address */
N#define RTC_BASE                                 (0x4003D000u)
N/** Peripheral RTC base pointer */
N#define RTC                                      ((RTC_Type *)RTC_BASE)
N/** Array initializer of RTC peripheral base pointers */
N#define RTC_BASES                                { RTC }
N
N/*!
N * @}
N */ /* end of group RTC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SIM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Peripheral_Access_Layer SIM Peripheral Access Layer
N * @{
N */
N
N/** SIM - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SOPT1;                             /**< System Options Register 1, offset: 0x0 */
X  volatile uint32_t SOPT1;                              
N  __IO uint32_t SOPT1CFG;                          /**< SOPT1 Configuration Register, offset: 0x4 */
X  volatile uint32_t SOPT1CFG;                           
N       uint8_t RESERVED_0[4092];
N  __IO uint32_t SOPT2;                             /**< System Options Register 2, offset: 0x1004 */
X  volatile uint32_t SOPT2;                              
N       uint8_t RESERVED_1[4];
N  __IO uint32_t SOPT4;                             /**< System Options Register 4, offset: 0x100C */
X  volatile uint32_t SOPT4;                              
N  __IO uint32_t SOPT5;                             /**< System Options Register 5, offset: 0x1010 */
X  volatile uint32_t SOPT5;                              
N       uint8_t RESERVED_2[4];
N  __IO uint32_t SOPT7;                             /**< System Options Register 7, offset: 0x1018 */
X  volatile uint32_t SOPT7;                              
N       uint8_t RESERVED_3[8];
N  __I  uint32_t SDID;                              /**< System Device Identification Register, offset: 0x1024 */
X  volatile const  uint32_t SDID;                               
N       uint8_t RESERVED_4[12];
N  __IO uint32_t SCGC4;                             /**< System Clock Gating Control Register 4, offset: 0x1034 */
X  volatile uint32_t SCGC4;                              
N  __IO uint32_t SCGC5;                             /**< System Clock Gating Control Register 5, offset: 0x1038 */
X  volatile uint32_t SCGC5;                              
N  __IO uint32_t SCGC6;                             /**< System Clock Gating Control Register 6, offset: 0x103C */
X  volatile uint32_t SCGC6;                              
N  __IO uint32_t SCGC7;                             /**< System Clock Gating Control Register 7, offset: 0x1040 */
X  volatile uint32_t SCGC7;                              
N  __IO uint32_t CLKDIV1;                           /**< System Clock Divider Register 1, offset: 0x1044 */
X  volatile uint32_t CLKDIV1;                            
N       uint8_t RESERVED_5[4];
N  __IO uint32_t FCFG1;                             /**< Flash Configuration Register 1, offset: 0x104C */
X  volatile uint32_t FCFG1;                              
N  __I  uint32_t FCFG2;                             /**< Flash Configuration Register 2, offset: 0x1050 */
X  volatile const  uint32_t FCFG2;                              
N       uint8_t RESERVED_6[4];
N  __I  uint32_t UIDMH;                             /**< Unique Identification Register Mid-High, offset: 0x1058 */
X  volatile const  uint32_t UIDMH;                              
N  __I  uint32_t UIDML;                             /**< Unique Identification Register Mid Low, offset: 0x105C */
X  volatile const  uint32_t UIDML;                              
N  __I  uint32_t UIDL;                              /**< Unique Identification Register Low, offset: 0x1060 */
X  volatile const  uint32_t UIDL;                               
N       uint8_t RESERVED_7[156];
N  __IO uint32_t COPC;                              /**< COP Control Register, offset: 0x1100 */
X  volatile uint32_t COPC;                               
N  __O  uint32_t SRVCOP;                            /**< Service COP Register, offset: 0x1104 */
X  volatile  uint32_t SRVCOP;                             
N} SIM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SIM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Register_Masks SIM Register Masks
N * @{
N */
N
N/* SOPT1 Bit Fields */
N#define SIM_SOPT1_OSC32KSEL_MASK                 0xC0000u
N#define SIM_SOPT1_OSC32KSEL_SHIFT                18
N#define SIM_SOPT1_OSC32KSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_OSC32KSEL_SHIFT))&SIM_SOPT1_OSC32KSEL_MASK)
N#define SIM_SOPT1_USBVSTBY_MASK                  0x20000000u
N#define SIM_SOPT1_USBVSTBY_SHIFT                 29
N#define SIM_SOPT1_USBSSTBY_MASK                  0x40000000u
N#define SIM_SOPT1_USBSSTBY_SHIFT                 30
N#define SIM_SOPT1_USBREGEN_MASK                  0x80000000u
N#define SIM_SOPT1_USBREGEN_SHIFT                 31
N/* SOPT1CFG Bit Fields */
N#define SIM_SOPT1CFG_URWE_MASK                   0x1000000u
N#define SIM_SOPT1CFG_URWE_SHIFT                  24
N#define SIM_SOPT1CFG_UVSWE_MASK                  0x2000000u
N#define SIM_SOPT1CFG_UVSWE_SHIFT                 25
N#define SIM_SOPT1CFG_USSWE_MASK                  0x4000000u
N#define SIM_SOPT1CFG_USSWE_SHIFT                 26
N/* SOPT2 Bit Fields */
N#define SIM_SOPT2_RTCCLKOUTSEL_MASK              0x10u
N#define SIM_SOPT2_RTCCLKOUTSEL_SHIFT             4
N#define SIM_SOPT2_CLKOUTSEL_MASK                 0xE0u
N#define SIM_SOPT2_CLKOUTSEL_SHIFT                5
N#define SIM_SOPT2_CLKOUTSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_CLKOUTSEL_SHIFT))&SIM_SOPT2_CLKOUTSEL_MASK)
N#define SIM_SOPT2_PLLFLLSEL_MASK                 0x10000u
N#define SIM_SOPT2_PLLFLLSEL_SHIFT                16
N#define SIM_SOPT2_USBSRC_MASK                    0x40000u
N#define SIM_SOPT2_USBSRC_SHIFT                   18
N#define SIM_SOPT2_TPMSRC_MASK                    0x3000000u
N#define SIM_SOPT2_TPMSRC_SHIFT                   24
N#define SIM_SOPT2_TPMSRC(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_TPMSRC_SHIFT))&SIM_SOPT2_TPMSRC_MASK)
N#define SIM_SOPT2_UART0SRC_MASK                  0xC000000u
N#define SIM_SOPT2_UART0SRC_SHIFT                 26
N#define SIM_SOPT2_UART0SRC(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_UART0SRC_SHIFT))&SIM_SOPT2_UART0SRC_MASK)
N/* SOPT4 Bit Fields */
N#define SIM_SOPT4_TPM1CH0SRC_MASK                0x40000u
N#define SIM_SOPT4_TPM1CH0SRC_SHIFT               18
N#define SIM_SOPT4_TPM2CH0SRC_MASK                0x100000u
N#define SIM_SOPT4_TPM2CH0SRC_SHIFT               20
N#define SIM_SOPT4_TPM0CLKSEL_MASK                0x1000000u
N#define SIM_SOPT4_TPM0CLKSEL_SHIFT               24
N#define SIM_SOPT4_TPM1CLKSEL_MASK                0x2000000u
N#define SIM_SOPT4_TPM1CLKSEL_SHIFT               25
N#define SIM_SOPT4_TPM2CLKSEL_MASK                0x4000000u
N#define SIM_SOPT4_TPM2CLKSEL_SHIFT               26
N/* SOPT5 Bit Fields */
N#define SIM_SOPT5_UART0TXSRC_MASK                0x3u
N#define SIM_SOPT5_UART0TXSRC_SHIFT               0
N#define SIM_SOPT5_UART0TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0TXSRC_SHIFT))&SIM_SOPT5_UART0TXSRC_MASK)
N#define SIM_SOPT5_UART0RXSRC_MASK                0x4u
N#define SIM_SOPT5_UART0RXSRC_SHIFT               2
N#define SIM_SOPT5_UART1TXSRC_MASK                0x30u
N#define SIM_SOPT5_UART1TXSRC_SHIFT               4
N#define SIM_SOPT5_UART1TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1TXSRC_SHIFT))&SIM_SOPT5_UART1TXSRC_MASK)
N#define SIM_SOPT5_UART1RXSRC_MASK                0x40u
N#define SIM_SOPT5_UART1RXSRC_SHIFT               6
N#define SIM_SOPT5_UART0ODE_MASK                  0x10000u
N#define SIM_SOPT5_UART0ODE_SHIFT                 16
N#define SIM_SOPT5_UART1ODE_MASK                  0x20000u
N#define SIM_SOPT5_UART1ODE_SHIFT                 17
N#define SIM_SOPT5_UART2ODE_MASK                  0x40000u
N#define SIM_SOPT5_UART2ODE_SHIFT                 18
N/* SOPT7 Bit Fields */
N#define SIM_SOPT7_ADC0TRGSEL_MASK                0xFu
N#define SIM_SOPT7_ADC0TRGSEL_SHIFT               0
N#define SIM_SOPT7_ADC0TRGSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0TRGSEL_SHIFT))&SIM_SOPT7_ADC0TRGSEL_MASK)
N#define SIM_SOPT7_ADC0PRETRGSEL_MASK             0x10u
N#define SIM_SOPT7_ADC0PRETRGSEL_SHIFT            4
N#define SIM_SOPT7_ADC0ALTTRGEN_MASK              0x80u
N#define SIM_SOPT7_ADC0ALTTRGEN_SHIFT             7
N/* SDID Bit Fields */
N#define SIM_SDID_PINID_MASK                      0xFu
N#define SIM_SDID_PINID_SHIFT                     0
N#define SIM_SDID_PINID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_PINID_SHIFT))&SIM_SDID_PINID_MASK)
N#define SIM_SDID_DIEID_MASK                      0xF80u
N#define SIM_SDID_DIEID_SHIFT                     7
N#define SIM_SDID_DIEID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_DIEID_SHIFT))&SIM_SDID_DIEID_MASK)
N#define SIM_SDID_REVID_MASK                      0xF000u
N#define SIM_SDID_REVID_SHIFT                     12
N#define SIM_SDID_REVID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_REVID_SHIFT))&SIM_SDID_REVID_MASK)
N#define SIM_SDID_SRAMSIZE_MASK                   0xF0000u
N#define SIM_SDID_SRAMSIZE_SHIFT                  16
N#define SIM_SDID_SRAMSIZE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SRAMSIZE_SHIFT))&SIM_SDID_SRAMSIZE_MASK)
N#define SIM_SDID_SERIESID_MASK                   0xF00000u
N#define SIM_SDID_SERIESID_SHIFT                  20
N#define SIM_SDID_SERIESID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SERIESID_SHIFT))&SIM_SDID_SERIESID_MASK)
N#define SIM_SDID_SUBFAMID_MASK                   0xF000000u
N#define SIM_SDID_SUBFAMID_SHIFT                  24
N#define SIM_SDID_SUBFAMID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SUBFAMID_SHIFT))&SIM_SDID_SUBFAMID_MASK)
N#define SIM_SDID_FAMID_MASK                      0xF0000000u
N#define SIM_SDID_FAMID_SHIFT                     28
N#define SIM_SDID_FAMID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_FAMID_SHIFT))&SIM_SDID_FAMID_MASK)
N/* SCGC4 Bit Fields */
N#define SIM_SCGC4_I2C0_MASK                      0x40u
N#define SIM_SCGC4_I2C0_SHIFT                     6
N#define SIM_SCGC4_I2C1_MASK                      0x80u
N#define SIM_SCGC4_I2C1_SHIFT                     7
N#define SIM_SCGC4_UART0_MASK                     0x400u
N#define SIM_SCGC4_UART0_SHIFT                    10
N#define SIM_SCGC4_UART1_MASK                     0x800u
N#define SIM_SCGC4_UART1_SHIFT                    11
N#define SIM_SCGC4_UART2_MASK                     0x1000u
N#define SIM_SCGC4_UART2_SHIFT                    12
N#define SIM_SCGC4_USBOTG_MASK                    0x40000u
N#define SIM_SCGC4_USBOTG_SHIFT                   18
N#define SIM_SCGC4_CMP_MASK                       0x80000u
N#define SIM_SCGC4_CMP_SHIFT                      19
N#define SIM_SCGC4_SPI0_MASK                      0x400000u
N#define SIM_SCGC4_SPI0_SHIFT                     22
N#define SIM_SCGC4_SPI1_MASK                      0x800000u
N#define SIM_SCGC4_SPI1_SHIFT                     23
N/* SCGC5 Bit Fields */
N#define SIM_SCGC5_LPTMR_MASK                     0x1u
N#define SIM_SCGC5_LPTMR_SHIFT                    0
N#define SIM_SCGC5_TSI_MASK                       0x20u
N#define SIM_SCGC5_TSI_SHIFT                      5
N#define SIM_SCGC5_PORTA_MASK                     0x200u
N#define SIM_SCGC5_PORTA_SHIFT                    9
N#define SIM_SCGC5_PORTB_MASK                     0x400u
N#define SIM_SCGC5_PORTB_SHIFT                    10
N#define SIM_SCGC5_PORTC_MASK                     0x800u
N#define SIM_SCGC5_PORTC_SHIFT                    11
N#define SIM_SCGC5_PORTD_MASK                     0x1000u
N#define SIM_SCGC5_PORTD_SHIFT                    12
N#define SIM_SCGC5_PORTE_MASK                     0x2000u
N#define SIM_SCGC5_PORTE_SHIFT                    13
N/* SCGC6 Bit Fields */
N#define SIM_SCGC6_FTF_MASK                       0x1u
N#define SIM_SCGC6_FTF_SHIFT                      0
N#define SIM_SCGC6_DMAMUX_MASK                    0x2u
N#define SIM_SCGC6_DMAMUX_SHIFT                   1
N#define SIM_SCGC6_PIT_MASK                       0x800000u
N#define SIM_SCGC6_PIT_SHIFT                      23
N#define SIM_SCGC6_TPM0_MASK                      0x1000000u
N#define SIM_SCGC6_TPM0_SHIFT                     24
N#define SIM_SCGC6_TPM1_MASK                      0x2000000u
N#define SIM_SCGC6_TPM1_SHIFT                     25
N#define SIM_SCGC6_TPM2_MASK                      0x4000000u
N#define SIM_SCGC6_TPM2_SHIFT                     26
N#define SIM_SCGC6_ADC0_MASK                      0x8000000u
N#define SIM_SCGC6_ADC0_SHIFT                     27
N#define SIM_SCGC6_RTC_MASK                       0x20000000u
N#define SIM_SCGC6_RTC_SHIFT                      29
N#define SIM_SCGC6_DAC0_MASK                      0x80000000u
N#define SIM_SCGC6_DAC0_SHIFT                     31
N/* SCGC7 Bit Fields */
N#define SIM_SCGC7_DMA_MASK                       0x100u
N#define SIM_SCGC7_DMA_SHIFT                      8
N/* CLKDIV1 Bit Fields */
N#define SIM_CLKDIV1_OUTDIV4_MASK                 0x70000u
N#define SIM_CLKDIV1_OUTDIV4_SHIFT                16
N#define SIM_CLKDIV1_OUTDIV4(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV4_SHIFT))&SIM_CLKDIV1_OUTDIV4_MASK)
N#define SIM_CLKDIV1_OUTDIV1_MASK                 0xF0000000u
N#define SIM_CLKDIV1_OUTDIV1_SHIFT                28
N#define SIM_CLKDIV1_OUTDIV1(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV1_SHIFT))&SIM_CLKDIV1_OUTDIV1_MASK)
N/* FCFG1 Bit Fields */
N#define SIM_FCFG1_FLASHDIS_MASK                  0x1u
N#define SIM_FCFG1_FLASHDIS_SHIFT                 0
N#define SIM_FCFG1_FLASHDOZE_MASK                 0x2u
N#define SIM_FCFG1_FLASHDOZE_SHIFT                1
N#define SIM_FCFG1_PFSIZE_MASK                    0xF000000u
N#define SIM_FCFG1_PFSIZE_SHIFT                   24
N#define SIM_FCFG1_PFSIZE(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_PFSIZE_SHIFT))&SIM_FCFG1_PFSIZE_MASK)
N/* FCFG2 Bit Fields */
N#define SIM_FCFG2_MAXADDR0_MASK                  0x7F000000u
N#define SIM_FCFG2_MAXADDR0_SHIFT                 24
N#define SIM_FCFG2_MAXADDR0(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_FCFG2_MAXADDR0_SHIFT))&SIM_FCFG2_MAXADDR0_MASK)
N/* UIDMH Bit Fields */
N#define SIM_UIDMH_UID_MASK                       0xFFFFu
N#define SIM_UIDMH_UID_SHIFT                      0
N#define SIM_UIDMH_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDMH_UID_SHIFT))&SIM_UIDMH_UID_MASK)
N/* UIDML Bit Fields */
N#define SIM_UIDML_UID_MASK                       0xFFFFFFFFu
N#define SIM_UIDML_UID_SHIFT                      0
N#define SIM_UIDML_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDML_UID_SHIFT))&SIM_UIDML_UID_MASK)
N/* UIDL Bit Fields */
N#define SIM_UIDL_UID_MASK                        0xFFFFFFFFu
N#define SIM_UIDL_UID_SHIFT                       0
N#define SIM_UIDL_UID(x)                          (((uint32_t)(((uint32_t)(x))<<SIM_UIDL_UID_SHIFT))&SIM_UIDL_UID_MASK)
N/* COPC Bit Fields */
N#define SIM_COPC_COPW_MASK                       0x1u
N#define SIM_COPC_COPW_SHIFT                      0
N#define SIM_COPC_COPCLKS_MASK                    0x2u
N#define SIM_COPC_COPCLKS_SHIFT                   1
N#define SIM_COPC_COPT_MASK                       0xCu
N#define SIM_COPC_COPT_SHIFT                      2
N#define SIM_COPC_COPT(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPT_SHIFT))&SIM_COPC_COPT_MASK)
N/* SRVCOP Bit Fields */
N#define SIM_SRVCOP_SRVCOP_MASK                   0xFFu
N#define SIM_SRVCOP_SRVCOP_SHIFT                  0
N#define SIM_SRVCOP_SRVCOP(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SRVCOP_SRVCOP_SHIFT))&SIM_SRVCOP_SRVCOP_MASK)
N
N/*!
N * @}
N */ /* end of group SIM_Register_Masks */
N
N
N/* SIM - Peripheral instance base addresses */
N/** Peripheral SIM base address */
N#define SIM_BASE                                 (0x40047000u)
N/** Peripheral SIM base pointer */
N#define SIM                                      ((SIM_Type *)SIM_BASE)
N/** Array initializer of SIM peripheral base pointers */
N#define SIM_BASES                                { SIM }
N
N/*!
N * @}
N */ /* end of group SIM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Peripheral_Access_Layer SMC Peripheral Access Layer
N * @{
N */
N
N/** SMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t PMPROT;                             /**< Power Mode Protection register, offset: 0x0 */
X  volatile uint8_t PMPROT;                              
N  __IO uint8_t PMCTRL;                             /**< Power Mode Control register, offset: 0x1 */
X  volatile uint8_t PMCTRL;                              
N  __IO uint8_t STOPCTRL;                           /**< Stop Control Register, offset: 0x2 */
X  volatile uint8_t STOPCTRL;                            
N  __I  uint8_t PMSTAT;                             /**< Power Mode Status register, offset: 0x3 */
X  volatile const  uint8_t PMSTAT;                              
N} SMC_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Register_Masks SMC Register Masks
N * @{
N */
N
N/* PMPROT Bit Fields */
N#define SMC_PMPROT_AVLLS_MASK                    0x2u
N#define SMC_PMPROT_AVLLS_SHIFT                   1
N#define SMC_PMPROT_ALLS_MASK                     0x8u
N#define SMC_PMPROT_ALLS_SHIFT                    3
N#define SMC_PMPROT_AVLP_MASK                     0x20u
N#define SMC_PMPROT_AVLP_SHIFT                    5
N/* PMCTRL Bit Fields */
N#define SMC_PMCTRL_STOPM_MASK                    0x7u
N#define SMC_PMCTRL_STOPM_SHIFT                   0
N#define SMC_PMCTRL_STOPM(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPM_SHIFT))&SMC_PMCTRL_STOPM_MASK)
N#define SMC_PMCTRL_STOPA_MASK                    0x8u
N#define SMC_PMCTRL_STOPA_SHIFT                   3
N#define SMC_PMCTRL_RUNM_MASK                     0x60u
N#define SMC_PMCTRL_RUNM_SHIFT                    5
N#define SMC_PMCTRL_RUNM(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_RUNM_SHIFT))&SMC_PMCTRL_RUNM_MASK)
N/* STOPCTRL Bit Fields */
N#define SMC_STOPCTRL_VLLSM_MASK                  0x7u
N#define SMC_STOPCTRL_VLLSM_SHIFT                 0
N#define SMC_STOPCTRL_VLLSM(x)                    (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_VLLSM_SHIFT))&SMC_STOPCTRL_VLLSM_MASK)
N#define SMC_STOPCTRL_PORPO_MASK                  0x20u
N#define SMC_STOPCTRL_PORPO_SHIFT                 5
N#define SMC_STOPCTRL_PSTOPO_MASK                 0xC0u
N#define SMC_STOPCTRL_PSTOPO_SHIFT                6
N#define SMC_STOPCTRL_PSTOPO(x)                   (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PSTOPO_SHIFT))&SMC_STOPCTRL_PSTOPO_MASK)
N/* PMSTAT Bit Fields */
N#define SMC_PMSTAT_PMSTAT_MASK                   0x7Fu
N#define SMC_PMSTAT_PMSTAT_SHIFT                  0
N#define SMC_PMSTAT_PMSTAT(x)                     (((uint8_t)(((uint8_t)(x))<<SMC_PMSTAT_PMSTAT_SHIFT))&SMC_PMSTAT_PMSTAT_MASK)
N
N/*!
N * @}
N */ /* end of group SMC_Register_Masks */
N
N
N/* SMC - Peripheral instance base addresses */
N/** Peripheral SMC base address */
N#define SMC_BASE                                 (0x4007E000u)
N/** Peripheral SMC base pointer */
N#define SMC                                      ((SMC_Type *)SMC_BASE)
N/** Array initializer of SMC peripheral base pointers */
N#define SMC_BASES                                { SMC }
N
N/*!
N * @}
N */ /* end of group SMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SPI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Peripheral_Access_Layer SPI Peripheral Access Layer
N * @{
N */
N
N/** SPI - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t C1;                                 /**< SPI control register 1, offset: 0x0 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< SPI control register 2, offset: 0x1 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t BR;                                 /**< SPI baud rate register, offset: 0x2 */
X  volatile uint8_t BR;                                  
N  __I  uint8_t S;                                  /**< SPI status register, offset: 0x3 */
X  volatile const  uint8_t S;                                   
N       uint8_t RESERVED_0[1];
N  __IO uint8_t D;                                  /**< SPI data register, offset: 0x5 */
X  volatile uint8_t D;                                   
N       uint8_t RESERVED_1[1];
N  __IO uint8_t M;                                  /**< SPI match register, offset: 0x7 */
X  volatile uint8_t M;                                   
N} SPI_Type;
N
N/* ----------------------------------------------------------------------------
N   -- SPI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Register_Masks SPI Register Masks
N * @{
N */
N
N/* C1 Bit Fields */
N#define SPI_C1_LSBFE_MASK                        0x1u
N#define SPI_C1_LSBFE_SHIFT                       0
N#define SPI_C1_SSOE_MASK                         0x2u
N#define SPI_C1_SSOE_SHIFT                        1
N#define SPI_C1_CPHA_MASK                         0x4u
N#define SPI_C1_CPHA_SHIFT                        2
N#define SPI_C1_CPOL_MASK                         0x8u
N#define SPI_C1_CPOL_SHIFT                        3
N#define SPI_C1_MSTR_MASK                         0x10u
N#define SPI_C1_MSTR_SHIFT                        4
N#define SPI_C1_SPTIE_MASK                        0x20u
N#define SPI_C1_SPTIE_SHIFT                       5
N#define SPI_C1_SPE_MASK                          0x40u
N#define SPI_C1_SPE_SHIFT                         6
N#define SPI_C1_SPIE_MASK                         0x80u
N#define SPI_C1_SPIE_SHIFT                        7
N/* C2 Bit Fields */
N#define SPI_C2_SPC0_MASK                         0x1u
N#define SPI_C2_SPC0_SHIFT                        0
N#define SPI_C2_SPISWAI_MASK                      0x2u
N#define SPI_C2_SPISWAI_SHIFT                     1
N#define SPI_C2_RXDMAE_MASK                       0x4u
N#define SPI_C2_RXDMAE_SHIFT                      2
N#define SPI_C2_BIDIROE_MASK                      0x8u
N#define SPI_C2_BIDIROE_SHIFT                     3
N#define SPI_C2_MODFEN_MASK                       0x10u
N#define SPI_C2_MODFEN_SHIFT                      4
N#define SPI_C2_TXDMAE_MASK                       0x20u
N#define SPI_C2_TXDMAE_SHIFT                      5
N#define SPI_C2_SPMIE_MASK                        0x80u
N#define SPI_C2_SPMIE_SHIFT                       7
N/* BR Bit Fields */
N#define SPI_BR_SPR_MASK                          0xFu
N#define SPI_BR_SPR_SHIFT                         0
N#define SPI_BR_SPR(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPR_SHIFT))&SPI_BR_SPR_MASK)
N#define SPI_BR_SPPR_MASK                         0x70u
N#define SPI_BR_SPPR_SHIFT                        4
N#define SPI_BR_SPPR(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPPR_SHIFT))&SPI_BR_SPPR_MASK)
N/* S Bit Fields */
N#define SPI_S_MODF_MASK                          0x10u
N#define SPI_S_MODF_SHIFT                         4
N#define SPI_S_SPTEF_MASK                         0x20u
N#define SPI_S_SPTEF_SHIFT                        5
N#define SPI_S_SPMF_MASK                          0x40u
N#define SPI_S_SPMF_SHIFT                         6
N#define SPI_S_SPRF_MASK                          0x80u
N#define SPI_S_SPRF_SHIFT                         7
N/* D Bit Fields */
N#define SPI_D_Bits_MASK                          0xFFu
N#define SPI_D_Bits_SHIFT                         0
N#define SPI_D_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_D_Bits_SHIFT))&SPI_D_Bits_MASK)
N/* M Bit Fields */
N#define SPI_M_Bits_MASK                          0xFFu
N#define SPI_M_Bits_SHIFT                         0
N#define SPI_M_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_M_Bits_SHIFT))&SPI_M_Bits_MASK)
N
N/*!
N * @}
N */ /* end of group SPI_Register_Masks */
N
N
N/* SPI - Peripheral instance base addresses */
N/** Peripheral SPI0 base address */
N#define SPI0_BASE                                (0x40076000u)
N/** Peripheral SPI0 base pointer */
N#define SPI0                                     ((SPI_Type *)SPI0_BASE)
N/** Peripheral SPI1 base address */
N#define SPI1_BASE                                (0x40077000u)
N/** Peripheral SPI1 base pointer */
N#define SPI1                                     ((SPI_Type *)SPI1_BASE)
N/** Array initializer of SPI peripheral base pointers */
N#define SPI_BASES                                { SPI0, SPI1 }
N
N/*!
N * @}
N */ /* end of group SPI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- TPM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Peripheral_Access_Layer TPM Peripheral Access Layer
N * @{
N */
N
N/** TPM - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SC;                                /**< Status and Control, offset: 0x0 */
X  volatile uint32_t SC;                                 
N  __IO uint32_t CNT;                               /**< Counter, offset: 0x4 */
X  volatile uint32_t CNT;                                
N  __IO uint32_t MOD;                               /**< Modulo, offset: 0x8 */
X  volatile uint32_t MOD;                                
N  struct {                                         /* offset: 0xC, array step: 0x8 */
N    __IO uint32_t CnSC;                              /**< Channel (n) Status and Control, array offset: 0xC, array step: 0x8 */
X    volatile uint32_t CnSC;                               
N    __IO uint32_t CnV;                               /**< Channel (n) Value, array offset: 0x10, array step: 0x8 */
X    volatile uint32_t CnV;                                
N  } CONTROLS[6];
N       uint8_t RESERVED_0[20];
N  __IO uint32_t STATUS;                            /**< Capture and Compare Status, offset: 0x50 */
X  volatile uint32_t STATUS;                             
N       uint8_t RESERVED_1[48];
N  __IO uint32_t CONF;                              /**< Configuration, offset: 0x84 */
X  volatile uint32_t CONF;                               
N} TPM_Type;
N
N/* ----------------------------------------------------------------------------
N   -- TPM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Register_Masks TPM Register Masks
N * @{
N */
N
N/* SC Bit Fields */
N#define TPM_SC_PS_MASK                           0x7u
N#define TPM_SC_PS_SHIFT                          0
N#define TPM_SC_PS(x)                             (((uint32_t)(((uint32_t)(x))<<TPM_SC_PS_SHIFT))&TPM_SC_PS_MASK)
N#define TPM_SC_CMOD_MASK                         0x18u
N#define TPM_SC_CMOD_SHIFT                        3
N#define TPM_SC_CMOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_SC_CMOD_SHIFT))&TPM_SC_CMOD_MASK)
N#define TPM_SC_CPWMS_MASK                        0x20u
N#define TPM_SC_CPWMS_SHIFT                       5
N#define TPM_SC_TOIE_MASK                         0x40u
N#define TPM_SC_TOIE_SHIFT                        6
N#define TPM_SC_TOF_MASK                          0x80u
N#define TPM_SC_TOF_SHIFT                         7
N#define TPM_SC_DMA_MASK                          0x100u
N#define TPM_SC_DMA_SHIFT                         8
N/* CNT Bit Fields */
N#define TPM_CNT_COUNT_MASK                       0xFFFFu
N#define TPM_CNT_COUNT_SHIFT                      0
N#define TPM_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CNT_COUNT_SHIFT))&TPM_CNT_COUNT_MASK)
N/* MOD Bit Fields */
N#define TPM_MOD_MOD_MASK                         0xFFFFu
N#define TPM_MOD_MOD_SHIFT                        0
N#define TPM_MOD_MOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_MOD_MOD_SHIFT))&TPM_MOD_MOD_MASK)
N/* CnSC Bit Fields */
N#define TPM_CnSC_DMA_MASK                        0x1u
N#define TPM_CnSC_DMA_SHIFT                       0
N#define TPM_CnSC_ELSA_MASK                       0x4u
N#define TPM_CnSC_ELSA_SHIFT                      2
N#define TPM_CnSC_ELSB_MASK                       0x8u
N#define TPM_CnSC_ELSB_SHIFT                      3
N#define TPM_CnSC_MSA_MASK                        0x10u
N#define TPM_CnSC_MSA_SHIFT                       4
N#define TPM_CnSC_MSB_MASK                        0x20u
N#define TPM_CnSC_MSB_SHIFT                       5
N#define TPM_CnSC_CHIE_MASK                       0x40u
N#define TPM_CnSC_CHIE_SHIFT                      6
N#define TPM_CnSC_CHF_MASK                        0x80u
N#define TPM_CnSC_CHF_SHIFT                       7
N/* CnV Bit Fields */
N#define TPM_CnV_VAL_MASK                         0xFFFFu
N#define TPM_CnV_VAL_SHIFT                        0
N#define TPM_CnV_VAL(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_CnV_VAL_SHIFT))&TPM_CnV_VAL_MASK)
N/* STATUS Bit Fields */
N#define TPM_STATUS_CH0F_MASK                     0x1u
N#define TPM_STATUS_CH0F_SHIFT                    0
N#define TPM_STATUS_CH1F_MASK                     0x2u
N#define TPM_STATUS_CH1F_SHIFT                    1
N#define TPM_STATUS_CH2F_MASK                     0x4u
N#define TPM_STATUS_CH2F_SHIFT                    2
N#define TPM_STATUS_CH3F_MASK                     0x8u
N#define TPM_STATUS_CH3F_SHIFT                    3
N#define TPM_STATUS_CH4F_MASK                     0x10u
N#define TPM_STATUS_CH4F_SHIFT                    4
N#define TPM_STATUS_CH5F_MASK                     0x20u
N#define TPM_STATUS_CH5F_SHIFT                    5
N#define TPM_STATUS_TOF_MASK                      0x100u
N#define TPM_STATUS_TOF_SHIFT                     8
N/* CONF Bit Fields */
N#define TPM_CONF_DOZEEN_MASK                     0x20u
N#define TPM_CONF_DOZEEN_SHIFT                    5
N#define TPM_CONF_DBGMODE_MASK                    0xC0u
N#define TPM_CONF_DBGMODE_SHIFT                   6
N#define TPM_CONF_DBGMODE(x)                      (((uint32_t)(((uint32_t)(x))<<TPM_CONF_DBGMODE_SHIFT))&TPM_CONF_DBGMODE_MASK)
N#define TPM_CONF_GTBEEN_MASK                     0x200u
N#define TPM_CONF_GTBEEN_SHIFT                    9
N#define TPM_CONF_CSOT_MASK                       0x10000u
N#define TPM_CONF_CSOT_SHIFT                      16
N#define TPM_CONF_CSOO_MASK                       0x20000u
N#define TPM_CONF_CSOO_SHIFT                      17
N#define TPM_CONF_CROT_MASK                       0x40000u
N#define TPM_CONF_CROT_SHIFT                      18
N#define TPM_CONF_TRGSEL_MASK                     0xF000000u
N#define TPM_CONF_TRGSEL_SHIFT                    24
N#define TPM_CONF_TRGSEL(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_TRGSEL_SHIFT))&TPM_CONF_TRGSEL_MASK)
N
N/*!
N * @}
N */ /* end of group TPM_Register_Masks */
N
N
N/* TPM - Peripheral instance base addresses */
N/** Peripheral TPM0 base address */
N#define TPM0_BASE                                (0x40038000u)
N/** Peripheral TPM0 base pointer */
N#define TPM0                                     ((TPM_Type *)TPM0_BASE)
N/** Peripheral TPM1 base address */
N#define TPM1_BASE                                (0x40039000u)
N/** Peripheral TPM1 base pointer */
N#define TPM1                                     ((TPM_Type *)TPM1_BASE)
N/** Peripheral TPM2 base address */
N#define TPM2_BASE                                (0x4003A000u)
N/** Peripheral TPM2 base pointer */
N#define TPM2                                     ((TPM_Type *)TPM2_BASE)
N/** Array initializer of TPM peripheral base pointers */
N#define TPM_BASES                                { TPM0, TPM1, TPM2 }
N
N/*!
N * @}
N */ /* end of group TPM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- TSI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Peripheral_Access_Layer TSI Peripheral Access Layer
N * @{
N */
N
N/** TSI - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t GENCS;                             /**< TSI General Control and Status Register, offset: 0x0 */
X  volatile uint32_t GENCS;                              
N  __IO uint32_t DATA;                              /**< TSI DATA Register, offset: 0x4 */
X  volatile uint32_t DATA;                               
N  __IO uint32_t TSHD;                              /**< TSI Threshold Register, offset: 0x8 */
X  volatile uint32_t TSHD;                               
N} TSI_Type;
N
N/* ----------------------------------------------------------------------------
N   -- TSI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Register_Masks TSI Register Masks
N * @{
N */
N
N/* GENCS Bit Fields */
N#define TSI_GENCS_CURSW_MASK                     0x2u
N#define TSI_GENCS_CURSW_SHIFT                    1
N#define TSI_GENCS_EOSF_MASK                      0x4u
N#define TSI_GENCS_EOSF_SHIFT                     2
N#define TSI_GENCS_SCNIP_MASK                     0x8u
N#define TSI_GENCS_SCNIP_SHIFT                    3
N#define TSI_GENCS_STM_MASK                       0x10u
N#define TSI_GENCS_STM_SHIFT                      4
N#define TSI_GENCS_STPE_MASK                      0x20u
N#define TSI_GENCS_STPE_SHIFT                     5
N#define TSI_GENCS_TSIIEN_MASK                    0x40u
N#define TSI_GENCS_TSIIEN_SHIFT                   6
N#define TSI_GENCS_TSIEN_MASK                     0x80u
N#define TSI_GENCS_TSIEN_SHIFT                    7
N#define TSI_GENCS_NSCN_MASK                      0x1F00u
N#define TSI_GENCS_NSCN_SHIFT                     8
N#define TSI_GENCS_NSCN(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_NSCN_SHIFT))&TSI_GENCS_NSCN_MASK)
N#define TSI_GENCS_PS_MASK                        0xE000u
N#define TSI_GENCS_PS_SHIFT                       13
N#define TSI_GENCS_PS(x)                          (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_PS_SHIFT))&TSI_GENCS_PS_MASK)
N#define TSI_GENCS_EXTCHRG_MASK                   0x70000u
N#define TSI_GENCS_EXTCHRG_SHIFT                  16
N#define TSI_GENCS_EXTCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_EXTCHRG_SHIFT))&TSI_GENCS_EXTCHRG_MASK)
N#define TSI_GENCS_DVOLT_MASK                     0x180000u
N#define TSI_GENCS_DVOLT_SHIFT                    19
N#define TSI_GENCS_DVOLT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_DVOLT_SHIFT))&TSI_GENCS_DVOLT_MASK)
N#define TSI_GENCS_REFCHRG_MASK                   0xE00000u
N#define TSI_GENCS_REFCHRG_SHIFT                  21
N#define TSI_GENCS_REFCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_REFCHRG_SHIFT))&TSI_GENCS_REFCHRG_MASK)
N#define TSI_GENCS_MODE_MASK                      0xF000000u
N#define TSI_GENCS_MODE_SHIFT                     24
N#define TSI_GENCS_MODE(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_MODE_SHIFT))&TSI_GENCS_MODE_MASK)
N#define TSI_GENCS_ESOR_MASK                      0x10000000u
N#define TSI_GENCS_ESOR_SHIFT                     28
N#define TSI_GENCS_OUTRGF_MASK                    0x80000000u
N#define TSI_GENCS_OUTRGF_SHIFT                   31
N/* DATA Bit Fields */
N#define TSI_DATA_TSICNT_MASK                     0xFFFFu
N#define TSI_DATA_TSICNT_SHIFT                    0
N#define TSI_DATA_TSICNT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICNT_SHIFT))&TSI_DATA_TSICNT_MASK)
N#define TSI_DATA_SWTS_MASK                       0x400000u
N#define TSI_DATA_SWTS_SHIFT                      22
N#define TSI_DATA_DMAEN_MASK                      0x800000u
N#define TSI_DATA_DMAEN_SHIFT                     23
N#define TSI_DATA_TSICH_MASK                      0xF0000000u
N#define TSI_DATA_TSICH_SHIFT                     28
N#define TSI_DATA_TSICH(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICH_SHIFT))&TSI_DATA_TSICH_MASK)
N/* TSHD Bit Fields */
N#define TSI_TSHD_THRESL_MASK                     0xFFFFu
N#define TSI_TSHD_THRESL_SHIFT                    0
N#define TSI_TSHD_THRESL(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESL_SHIFT))&TSI_TSHD_THRESL_MASK)
N#define TSI_TSHD_THRESH_MASK                     0xFFFF0000u
N#define TSI_TSHD_THRESH_SHIFT                    16
N#define TSI_TSHD_THRESH(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESH_SHIFT))&TSI_TSHD_THRESH_MASK)
N
N/*!
N * @}
N */ /* end of group TSI_Register_Masks */
N
N
N/* TSI - Peripheral instance base addresses */
N/** Peripheral TSI0 base address */
N#define TSI0_BASE                                (0x40045000u)
N/** Peripheral TSI0 base pointer */
N#define TSI0                                     ((TSI_Type *)TSI0_BASE)
N/** Array initializer of TSI peripheral base pointers */
N#define TSI_BASES                                { TSI0 }
N
N/*!
N * @}
N */ /* end of group TSI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Peripheral_Access_Layer UART Peripheral Access Layer
N * @{
N */
N
N/** UART - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t BDH;                                /**< UART Baud Rate Register: High, offset: 0x0 */
X  volatile uint8_t BDH;                                 
N  __IO uint8_t BDL;                                /**< UART Baud Rate Register: Low, offset: 0x1 */
X  volatile uint8_t BDL;                                 
N  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
X  volatile uint8_t C2;                                  
N  __I  uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
X  volatile const  uint8_t S1;                                  
N  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
X  volatile uint8_t S2;                                  
N  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
X  volatile uint8_t D;                                   
N  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0x8 */
X  volatile uint8_t C4;                                  
N} UART_Type;
N
N/* ----------------------------------------------------------------------------
N   -- UART Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Register_Masks UART Register Masks
N * @{
N */
N
N/* BDH Bit Fields */
N#define UART_BDH_SBR_MASK                        0x1Fu
N#define UART_BDH_SBR_SHIFT                       0
N#define UART_BDH_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBR_SHIFT))&UART_BDH_SBR_MASK)
N#define UART_BDH_SBNS_MASK                       0x20u
N#define UART_BDH_SBNS_SHIFT                      5
N#define UART_BDH_RXEDGIE_MASK                    0x40u
N#define UART_BDH_RXEDGIE_SHIFT                   6
N#define UART_BDH_LBKDIE_MASK                     0x80u
N#define UART_BDH_LBKDIE_SHIFT                    7
N/* BDL Bit Fields */
N#define UART_BDL_SBR_MASK                        0xFFu
N#define UART_BDL_SBR_SHIFT                       0
N#define UART_BDL_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDL_SBR_SHIFT))&UART_BDL_SBR_MASK)
N/* C1 Bit Fields */
N#define UART_C1_PT_MASK                          0x1u
N#define UART_C1_PT_SHIFT                         0
N#define UART_C1_PE_MASK                          0x2u
N#define UART_C1_PE_SHIFT                         1
N#define UART_C1_ILT_MASK                         0x4u
N#define UART_C1_ILT_SHIFT                        2
N#define UART_C1_WAKE_MASK                        0x8u
N#define UART_C1_WAKE_SHIFT                       3
N#define UART_C1_M_MASK                           0x10u
N#define UART_C1_M_SHIFT                          4
N#define UART_C1_RSRC_MASK                        0x20u
N#define UART_C1_RSRC_SHIFT                       5
N#define UART_C1_UARTSWAI_MASK                    0x40u
N#define UART_C1_UARTSWAI_SHIFT                   6
N#define UART_C1_LOOPS_MASK                       0x80u
N#define UART_C1_LOOPS_SHIFT                      7
N/* C2 Bit Fields */
N#define UART_C2_SBK_MASK                         0x1u
N#define UART_C2_SBK_SHIFT                        0
N#define UART_C2_RWU_MASK                         0x2u
N#define UART_C2_RWU_SHIFT                        1
N#define UART_C2_RE_MASK                          0x4u
N#define UART_C2_RE_SHIFT                         2
N#define UART_C2_TE_MASK                          0x8u
N#define UART_C2_TE_SHIFT                         3
N#define UART_C2_ILIE_MASK                        0x10u
N#define UART_C2_ILIE_SHIFT                       4
N#define UART_C2_RIE_MASK                         0x20u
N#define UART_C2_RIE_SHIFT                        5
N#define UART_C2_TCIE_MASK                        0x40u
N#define UART_C2_TCIE_SHIFT                       6
N#define UART_C2_TIE_MASK                         0x80u
N#define UART_C2_TIE_SHIFT                        7
N/* S1 Bit Fields */
N#define UART_S1_PF_MASK                          0x1u
N#define UART_S1_PF_SHIFT                         0
N#define UART_S1_FE_MASK                          0x2u
N#define UART_S1_FE_SHIFT                         1
N#define UART_S1_NF_MASK                          0x4u
N#define UART_S1_NF_SHIFT                         2
N#define UART_S1_OR_MASK                          0x8u
N#define UART_S1_OR_SHIFT                         3
N#define UART_S1_IDLE_MASK                        0x10u
N#define UART_S1_IDLE_SHIFT                       4
N#define UART_S1_RDRF_MASK                        0x20u
N#define UART_S1_RDRF_SHIFT                       5
N#define UART_S1_TC_MASK                          0x40u
N#define UART_S1_TC_SHIFT                         6
N#define UART_S1_TDRE_MASK                        0x80u
N#define UART_S1_TDRE_SHIFT                       7
N/* S2 Bit Fields */
N#define UART_S2_RAF_MASK                         0x1u
N#define UART_S2_RAF_SHIFT                        0
N#define UART_S2_LBKDE_MASK                       0x2u
N#define UART_S2_LBKDE_SHIFT                      1
N#define UART_S2_BRK13_MASK                       0x4u
N#define UART_S2_BRK13_SHIFT                      2
N#define UART_S2_RWUID_MASK                       0x8u
N#define UART_S2_RWUID_SHIFT                      3
N#define UART_S2_RXINV_MASK                       0x10u
N#define UART_S2_RXINV_SHIFT                      4
N#define UART_S2_RXEDGIF_MASK                     0x40u
N#define UART_S2_RXEDGIF_SHIFT                    6
N#define UART_S2_LBKDIF_MASK                      0x80u
N#define UART_S2_LBKDIF_SHIFT                     7
N/* C3 Bit Fields */
N#define UART_C3_PEIE_MASK                        0x1u
N#define UART_C3_PEIE_SHIFT                       0
N#define UART_C3_FEIE_MASK                        0x2u
N#define UART_C3_FEIE_SHIFT                       1
N#define UART_C3_NEIE_MASK                        0x4u
N#define UART_C3_NEIE_SHIFT                       2
N#define UART_C3_ORIE_MASK                        0x8u
N#define UART_C3_ORIE_SHIFT                       3
N#define UART_C3_TXINV_MASK                       0x10u
N#define UART_C3_TXINV_SHIFT                      4
N#define UART_C3_TXDIR_MASK                       0x20u
N#define UART_C3_TXDIR_SHIFT                      5
N#define UART_C3_T8_MASK                          0x40u
N#define UART_C3_T8_SHIFT                         6
N#define UART_C3_R8_MASK                          0x80u
N#define UART_C3_R8_SHIFT                         7
N/* D Bit Fields */
N#define UART_D_R0T0_MASK                         0x1u
N#define UART_D_R0T0_SHIFT                        0
N#define UART_D_R1T1_MASK                         0x2u
N#define UART_D_R1T1_SHIFT                        1
N#define UART_D_R2T2_MASK                         0x4u
N#define UART_D_R2T2_SHIFT                        2
N#define UART_D_R3T3_MASK                         0x8u
N#define UART_D_R3T3_SHIFT                        3
N#define UART_D_R4T4_MASK                         0x10u
N#define UART_D_R4T4_SHIFT                        4
N#define UART_D_R5T5_MASK                         0x20u
N#define UART_D_R5T5_SHIFT                        5
N#define UART_D_R6T6_MASK                         0x40u
N#define UART_D_R6T6_SHIFT                        6
N#define UART_D_R7T7_MASK                         0x80u
N#define UART_D_R7T7_SHIFT                        7
N/* C4 Bit Fields */
N#define UART_C4_RDMAS_MASK                       0x20u
N#define UART_C4_RDMAS_SHIFT                      5
N#define UART_C4_TDMAS_MASK                       0x80u
N#define UART_C4_TDMAS_SHIFT                      7
N
N/*!
N * @}
N */ /* end of group UART_Register_Masks */
N
N
N/* UART - Peripheral instance base addresses */
N/** Peripheral UART1 base address */
N#define UART1_BASE                               (0x4006B000u)
N/** Peripheral UART1 base pointer */
N#define UART1                                    ((UART_Type *)UART1_BASE)
N/** Peripheral UART2 base address */
N#define UART2_BASE                               (0x4006C000u)
N/** Peripheral UART2 base pointer */
N#define UART2                                    ((UART_Type *)UART2_BASE)
N/** Array initializer of UART peripheral base pointers */
N#define UART_BASES                               { UART1, UART2 }
N
N/*!
N * @}
N */ /* end of group UART_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART0 Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Peripheral_Access_Layer UART0 Peripheral Access Layer
N * @{
N */
N
N/** UART0 - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t BDH;                                /**< UART Baud Rate Register High, offset: 0x0 */
X  volatile uint8_t BDH;                                 
N  __IO uint8_t BDL;                                /**< UART Baud Rate Register Low, offset: 0x1 */
X  volatile uint8_t BDL;                                 
N  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
X  volatile uint8_t S1;                                  
N  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
X  volatile uint8_t S2;                                  
N  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
X  volatile uint8_t D;                                   
N  __IO uint8_t MA1;                                /**< UART Match Address Registers 1, offset: 0x8 */
X  volatile uint8_t MA1;                                 
N  __IO uint8_t MA2;                                /**< UART Match Address Registers 2, offset: 0x9 */
X  volatile uint8_t MA2;                                 
N  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0xA */
X  volatile uint8_t C4;                                  
N  __IO uint8_t C5;                                 /**< UART Control Register 5, offset: 0xB */
X  volatile uint8_t C5;                                  
N} UART0_Type;
N
N/* ----------------------------------------------------------------------------
N   -- UART0 Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Register_Masks UART0 Register Masks
N * @{
N */
N
N/* BDH Bit Fields */
N#define UART0_BDH_SBR_MASK                       0x1Fu
N#define UART0_BDH_SBR_SHIFT                      0
N#define UART0_BDH_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBR_SHIFT))&UART0_BDH_SBR_MASK)
N#define UART0_BDH_SBNS_MASK                      0x20u
N#define UART0_BDH_SBNS_SHIFT                     5
N#define UART0_BDH_RXEDGIE_MASK                   0x40u
N#define UART0_BDH_RXEDGIE_SHIFT                  6
N#define UART0_BDH_LBKDIE_MASK                    0x80u
N#define UART0_BDH_LBKDIE_SHIFT                   7
N/* BDL Bit Fields */
N#define UART0_BDL_SBR_MASK                       0xFFu
N#define UART0_BDL_SBR_SHIFT                      0
N#define UART0_BDL_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDL_SBR_SHIFT))&UART0_BDL_SBR_MASK)
N/* C1 Bit Fields */
N#define UART0_C1_PT_MASK                         0x1u
N#define UART0_C1_PT_SHIFT                        0
N#define UART0_C1_PE_MASK                         0x2u
N#define UART0_C1_PE_SHIFT                        1
N#define UART0_C1_ILT_MASK                        0x4u
N#define UART0_C1_ILT_SHIFT                       2
N#define UART0_C1_WAKE_MASK                       0x8u
N#define UART0_C1_WAKE_SHIFT                      3
N#define UART0_C1_M_MASK                          0x10u
N#define UART0_C1_M_SHIFT                         4
N#define UART0_C1_RSRC_MASK                       0x20u
N#define UART0_C1_RSRC_SHIFT                      5
N#define UART0_C1_DOZEEN_MASK                     0x40u
N#define UART0_C1_DOZEEN_SHIFT                    6
N#define UART0_C1_LOOPS_MASK                      0x80u
N#define UART0_C1_LOOPS_SHIFT                     7
N/* C2 Bit Fields */
N#define UART0_C2_SBK_MASK                        0x1u
N#define UART0_C2_SBK_SHIFT                       0
N#define UART0_C2_RWU_MASK                        0x2u
N#define UART0_C2_RWU_SHIFT                       1
N#define UART0_C2_RE_MASK                         0x4u
N#define UART0_C2_RE_SHIFT                        2
N#define UART0_C2_TE_MASK                         0x8u
N#define UART0_C2_TE_SHIFT                        3
N#define UART0_C2_ILIE_MASK                       0x10u
N#define UART0_C2_ILIE_SHIFT                      4
N#define UART0_C2_RIE_MASK                        0x20u
N#define UART0_C2_RIE_SHIFT                       5
N#define UART0_C2_TCIE_MASK                       0x40u
N#define UART0_C2_TCIE_SHIFT                      6
N#define UART0_C2_TIE_MASK                        0x80u
N#define UART0_C2_TIE_SHIFT                       7
N/* S1 Bit Fields */
N#define UART0_S1_PF_MASK                         0x1u
N#define UART0_S1_PF_SHIFT                        0
N#define UART0_S1_FE_MASK                         0x2u
N#define UART0_S1_FE_SHIFT                        1
N#define UART0_S1_NF_MASK                         0x4u
N#define UART0_S1_NF_SHIFT                        2
N#define UART0_S1_OR_MASK                         0x8u
N#define UART0_S1_OR_SHIFT                        3
N#define UART0_S1_IDLE_MASK                       0x10u
N#define UART0_S1_IDLE_SHIFT                      4
N#define UART0_S1_RDRF_MASK                       0x20u
N#define UART0_S1_RDRF_SHIFT                      5
N#define UART0_S1_TC_MASK                         0x40u
N#define UART0_S1_TC_SHIFT                        6
N#define UART0_S1_TDRE_MASK                       0x80u
N#define UART0_S1_TDRE_SHIFT                      7
N/* S2 Bit Fields */
N#define UART0_S2_RAF_MASK                        0x1u
N#define UART0_S2_RAF_SHIFT                       0
N#define UART0_S2_LBKDE_MASK                      0x2u
N#define UART0_S2_LBKDE_SHIFT                     1
N#define UART0_S2_BRK13_MASK                      0x4u
N#define UART0_S2_BRK13_SHIFT                     2
N#define UART0_S2_RWUID_MASK                      0x8u
N#define UART0_S2_RWUID_SHIFT                     3
N#define UART0_S2_RXINV_MASK                      0x10u
N#define UART0_S2_RXINV_SHIFT                     4
N#define UART0_S2_MSBF_MASK                       0x20u
N#define UART0_S2_MSBF_SHIFT                      5
N#define UART0_S2_RXEDGIF_MASK                    0x40u
N#define UART0_S2_RXEDGIF_SHIFT                   6
N#define UART0_S2_LBKDIF_MASK                     0x80u
N#define UART0_S2_LBKDIF_SHIFT                    7
N/* C3 Bit Fields */
N#define UART0_C3_PEIE_MASK                       0x1u
N#define UART0_C3_PEIE_SHIFT                      0
N#define UART0_C3_FEIE_MASK                       0x2u
N#define UART0_C3_FEIE_SHIFT                      1
N#define UART0_C3_NEIE_MASK                       0x4u
N#define UART0_C3_NEIE_SHIFT                      2
N#define UART0_C3_ORIE_MASK                       0x8u
N#define UART0_C3_ORIE_SHIFT                      3
N#define UART0_C3_TXINV_MASK                      0x10u
N#define UART0_C3_TXINV_SHIFT                     4
N#define UART0_C3_TXDIR_MASK                      0x20u
N#define UART0_C3_TXDIR_SHIFT                     5
N#define UART0_C3_R9T8_MASK                       0x40u
N#define UART0_C3_R9T8_SHIFT                      6
N#define UART0_C3_R8T9_MASK                       0x80u
N#define UART0_C3_R8T9_SHIFT                      7
N/* D Bit Fields */
N#define UART0_D_R0T0_MASK                        0x1u
N#define UART0_D_R0T0_SHIFT                       0
N#define UART0_D_R1T1_MASK                        0x2u
N#define UART0_D_R1T1_SHIFT                       1
N#define UART0_D_R2T2_MASK                        0x4u
N#define UART0_D_R2T2_SHIFT                       2
N#define UART0_D_R3T3_MASK                        0x8u
N#define UART0_D_R3T3_SHIFT                       3
N#define UART0_D_R4T4_MASK                        0x10u
N#define UART0_D_R4T4_SHIFT                       4
N#define UART0_D_R5T5_MASK                        0x20u
N#define UART0_D_R5T5_SHIFT                       5
N#define UART0_D_R6T6_MASK                        0x40u
N#define UART0_D_R6T6_SHIFT                       6
N#define UART0_D_R7T7_MASK                        0x80u
N#define UART0_D_R7T7_SHIFT                       7
N/* MA1 Bit Fields */
N#define UART0_MA1_MA_MASK                        0xFFu
N#define UART0_MA1_MA_SHIFT                       0
N#define UART0_MA1_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA1_MA_SHIFT))&UART0_MA1_MA_MASK)
N/* MA2 Bit Fields */
N#define UART0_MA2_MA_MASK                        0xFFu
N#define UART0_MA2_MA_SHIFT                       0
N#define UART0_MA2_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA2_MA_SHIFT))&UART0_MA2_MA_MASK)
N/* C4 Bit Fields */
N#define UART0_C4_OSR_MASK                        0x1Fu
N#define UART0_C4_OSR_SHIFT                       0
N#define UART0_C4_OSR(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C4_OSR_SHIFT))&UART0_C4_OSR_MASK)
N#define UART0_C4_M10_MASK                        0x20u
N#define UART0_C4_M10_SHIFT                       5
N#define UART0_C4_MAEN2_MASK                      0x40u
N#define UART0_C4_MAEN2_SHIFT                     6
N#define UART0_C4_MAEN1_MASK                      0x80u
N#define UART0_C4_MAEN1_SHIFT                     7
N/* C5 Bit Fields */
N#define UART0_C5_RESYNCDIS_MASK                  0x1u
N#define UART0_C5_RESYNCDIS_SHIFT                 0
N#define UART0_C5_BOTHEDGE_MASK                   0x2u
N#define UART0_C5_BOTHEDGE_SHIFT                  1
N#define UART0_C5_RDMAE_MASK                      0x20u
N#define UART0_C5_RDMAE_SHIFT                     5
N#define UART0_C5_TDMAE_MASK                      0x80u
N#define UART0_C5_TDMAE_SHIFT                     7
N
N/*!
N * @}
N */ /* end of group UART0_Register_Masks */
N
N
N/* UART0 - Peripheral instance base addresses */
N/** Peripheral UART0 base address */
N#define UART0_BASE                               (0x4006A000u)
N/** Peripheral UART0 base pointer */
N#define UART0                                    ((UART0_Type *)UART0_BASE)
N/** Array initializer of UART0 peripheral base pointers */
N#define UART0_BASES                              { UART0 }
N
N/*!
N * @}
N */ /* end of group UART0_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USB Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Peripheral_Access_Layer USB Peripheral Access Layer
N * @{
N */
N
N/** USB - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t PERID;                              /**< Peripheral ID register, offset: 0x0 */
X  volatile const  uint8_t PERID;                               
N       uint8_t RESERVED_0[3];
N  __I  uint8_t IDCOMP;                             /**< Peripheral ID Complement register, offset: 0x4 */
X  volatile const  uint8_t IDCOMP;                              
N       uint8_t RESERVED_1[3];
N  __I  uint8_t REV;                                /**< Peripheral Revision register, offset: 0x8 */
X  volatile const  uint8_t REV;                                 
N       uint8_t RESERVED_2[3];
N  __I  uint8_t ADDINFO;                            /**< Peripheral Additional Info register, offset: 0xC */
X  volatile const  uint8_t ADDINFO;                             
N       uint8_t RESERVED_3[3];
N  __IO uint8_t OTGISTAT;                           /**< OTG Interrupt Status register, offset: 0x10 */
X  volatile uint8_t OTGISTAT;                            
N       uint8_t RESERVED_4[3];
N  __IO uint8_t OTGICR;                             /**< OTG Interrupt Control Register, offset: 0x14 */
X  volatile uint8_t OTGICR;                              
N       uint8_t RESERVED_5[3];
N  __IO uint8_t OTGSTAT;                            /**< OTG Status register, offset: 0x18 */
X  volatile uint8_t OTGSTAT;                             
N       uint8_t RESERVED_6[3];
N  __IO uint8_t OTGCTL;                             /**< OTG Control register, offset: 0x1C */
X  volatile uint8_t OTGCTL;                              
N       uint8_t RESERVED_7[99];
N  __IO uint8_t ISTAT;                              /**< Interrupt Status register, offset: 0x80 */
X  volatile uint8_t ISTAT;                               
N       uint8_t RESERVED_8[3];
N  __IO uint8_t INTEN;                              /**< Interrupt Enable register, offset: 0x84 */
X  volatile uint8_t INTEN;                               
N       uint8_t RESERVED_9[3];
N  __IO uint8_t ERRSTAT;                            /**< Error Interrupt Status register, offset: 0x88 */
X  volatile uint8_t ERRSTAT;                             
N       uint8_t RESERVED_10[3];
N  __IO uint8_t ERREN;                              /**< Error Interrupt Enable register, offset: 0x8C */
X  volatile uint8_t ERREN;                               
N       uint8_t RESERVED_11[3];
N  __I  uint8_t STAT;                               /**< Status register, offset: 0x90 */
X  volatile const  uint8_t STAT;                                
N       uint8_t RESERVED_12[3];
N  __IO uint8_t CTL;                                /**< Control register, offset: 0x94 */
X  volatile uint8_t CTL;                                 
N       uint8_t RESERVED_13[3];
N  __IO uint8_t ADDR;                               /**< Address register, offset: 0x98 */
X  volatile uint8_t ADDR;                                
N       uint8_t RESERVED_14[3];
N  __IO uint8_t BDTPAGE1;                           /**< BDT Page Register 1, offset: 0x9C */
X  volatile uint8_t BDTPAGE1;                            
N       uint8_t RESERVED_15[3];
N  __IO uint8_t FRMNUML;                            /**< Frame Number Register Low, offset: 0xA0 */
X  volatile uint8_t FRMNUML;                             
N       uint8_t RESERVED_16[3];
N  __IO uint8_t FRMNUMH;                            /**< Frame Number Register High, offset: 0xA4 */
X  volatile uint8_t FRMNUMH;                             
N       uint8_t RESERVED_17[3];
N  __IO uint8_t TOKEN;                              /**< Token register, offset: 0xA8 */
X  volatile uint8_t TOKEN;                               
N       uint8_t RESERVED_18[3];
N  __IO uint8_t SOFTHLD;                            /**< SOF Threshold Register, offset: 0xAC */
X  volatile uint8_t SOFTHLD;                             
N       uint8_t RESERVED_19[3];
N  __IO uint8_t BDTPAGE2;                           /**< BDT Page Register 2, offset: 0xB0 */
X  volatile uint8_t BDTPAGE2;                            
N       uint8_t RESERVED_20[3];
N  __IO uint8_t BDTPAGE3;                           /**< BDT Page Register 3, offset: 0xB4 */
X  volatile uint8_t BDTPAGE3;                            
N       uint8_t RESERVED_21[11];
N  struct {                                         /* offset: 0xC0, array step: 0x4 */
N    __IO uint8_t ENDPT;                              /**< Endpoint Control register, array offset: 0xC0, array step: 0x4 */
X    volatile uint8_t ENDPT;                               
N         uint8_t RESERVED_0[3];
N  } ENDPOINT[16];
N  __IO uint8_t USBCTRL;                            /**< USB Control register, offset: 0x100 */
X  volatile uint8_t USBCTRL;                             
N       uint8_t RESERVED_22[3];
N  __I  uint8_t OBSERVE;                            /**< USB OTG Observe register, offset: 0x104 */
X  volatile const  uint8_t OBSERVE;                             
N       uint8_t RESERVED_23[3];
N  __IO uint8_t CONTROL;                            /**< USB OTG Control register, offset: 0x108 */
X  volatile uint8_t CONTROL;                             
N       uint8_t RESERVED_24[3];
N  __IO uint8_t USBTRC0;                            /**< USB Transceiver Control Register 0, offset: 0x10C */
X  volatile uint8_t USBTRC0;                             
N       uint8_t RESERVED_25[7];
N  __IO uint8_t USBFRMADJUST;                       /**< Frame Adjust Register, offset: 0x114 */
X  volatile uint8_t USBFRMADJUST;                        
N} USB_Type;
N
N/* ----------------------------------------------------------------------------
N   -- USB Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Register_Masks USB Register Masks
N * @{
N */
N
N/* PERID Bit Fields */
N#define USB_PERID_ID_MASK                        0x3Fu
N#define USB_PERID_ID_SHIFT                       0
N#define USB_PERID_ID(x)                          (((uint8_t)(((uint8_t)(x))<<USB_PERID_ID_SHIFT))&USB_PERID_ID_MASK)
N/* IDCOMP Bit Fields */
N#define USB_IDCOMP_NID_MASK                      0x3Fu
N#define USB_IDCOMP_NID_SHIFT                     0
N#define USB_IDCOMP_NID(x)                        (((uint8_t)(((uint8_t)(x))<<USB_IDCOMP_NID_SHIFT))&USB_IDCOMP_NID_MASK)
N/* REV Bit Fields */
N#define USB_REV_REV_MASK                         0xFFu
N#define USB_REV_REV_SHIFT                        0
N#define USB_REV_REV(x)                           (((uint8_t)(((uint8_t)(x))<<USB_REV_REV_SHIFT))&USB_REV_REV_MASK)
N/* ADDINFO Bit Fields */
N#define USB_ADDINFO_IEHOST_MASK                  0x1u
N#define USB_ADDINFO_IEHOST_SHIFT                 0
N#define USB_ADDINFO_IRQNUM_MASK                  0xF8u
N#define USB_ADDINFO_IRQNUM_SHIFT                 3
N#define USB_ADDINFO_IRQNUM(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ADDINFO_IRQNUM_SHIFT))&USB_ADDINFO_IRQNUM_MASK)
N/* OTGISTAT Bit Fields */
N#define USB_OTGISTAT_AVBUSCHG_MASK               0x1u
N#define USB_OTGISTAT_AVBUSCHG_SHIFT              0
N#define USB_OTGISTAT_B_SESS_CHG_MASK             0x4u
N#define USB_OTGISTAT_B_SESS_CHG_SHIFT            2
N#define USB_OTGISTAT_SESSVLDCHG_MASK             0x8u
N#define USB_OTGISTAT_SESSVLDCHG_SHIFT            3
N#define USB_OTGISTAT_LINE_STATE_CHG_MASK         0x20u
N#define USB_OTGISTAT_LINE_STATE_CHG_SHIFT        5
N#define USB_OTGISTAT_ONEMSEC_MASK                0x40u
N#define USB_OTGISTAT_ONEMSEC_SHIFT               6
N#define USB_OTGISTAT_IDCHG_MASK                  0x80u
N#define USB_OTGISTAT_IDCHG_SHIFT                 7
N/* OTGICR Bit Fields */
N#define USB_OTGICR_AVBUSEN_MASK                  0x1u
N#define USB_OTGICR_AVBUSEN_SHIFT                 0
N#define USB_OTGICR_BSESSEN_MASK                  0x4u
N#define USB_OTGICR_BSESSEN_SHIFT                 2
N#define USB_OTGICR_SESSVLDEN_MASK                0x8u
N#define USB_OTGICR_SESSVLDEN_SHIFT               3
N#define USB_OTGICR_LINESTATEEN_MASK              0x20u
N#define USB_OTGICR_LINESTATEEN_SHIFT             5
N#define USB_OTGICR_ONEMSECEN_MASK                0x40u
N#define USB_OTGICR_ONEMSECEN_SHIFT               6
N#define USB_OTGICR_IDEN_MASK                     0x80u
N#define USB_OTGICR_IDEN_SHIFT                    7
N/* OTGSTAT Bit Fields */
N#define USB_OTGSTAT_AVBUSVLD_MASK                0x1u
N#define USB_OTGSTAT_AVBUSVLD_SHIFT               0
N#define USB_OTGSTAT_BSESSEND_MASK                0x4u
N#define USB_OTGSTAT_BSESSEND_SHIFT               2
N#define USB_OTGSTAT_SESS_VLD_MASK                0x8u
N#define USB_OTGSTAT_SESS_VLD_SHIFT               3
N#define USB_OTGSTAT_LINESTATESTABLE_MASK         0x20u
N#define USB_OTGSTAT_LINESTATESTABLE_SHIFT        5
N#define USB_OTGSTAT_ONEMSECEN_MASK               0x40u
N#define USB_OTGSTAT_ONEMSECEN_SHIFT              6
N#define USB_OTGSTAT_ID_MASK                      0x80u
N#define USB_OTGSTAT_ID_SHIFT                     7
N/* OTGCTL Bit Fields */
N#define USB_OTGCTL_OTGEN_MASK                    0x4u
N#define USB_OTGCTL_OTGEN_SHIFT                   2
N#define USB_OTGCTL_DMLOW_MASK                    0x10u
N#define USB_OTGCTL_DMLOW_SHIFT                   4
N#define USB_OTGCTL_DPLOW_MASK                    0x20u
N#define USB_OTGCTL_DPLOW_SHIFT                   5
N#define USB_OTGCTL_DPHIGH_MASK                   0x80u
N#define USB_OTGCTL_DPHIGH_SHIFT                  7
N/* ISTAT Bit Fields */
N#define USB_ISTAT_USBRST_MASK                    0x1u
N#define USB_ISTAT_USBRST_SHIFT                   0
N#define USB_ISTAT_ERROR_MASK                     0x2u
N#define USB_ISTAT_ERROR_SHIFT                    1
N#define USB_ISTAT_SOFTOK_MASK                    0x4u
N#define USB_ISTAT_SOFTOK_SHIFT                   2
N#define USB_ISTAT_TOKDNE_MASK                    0x8u
N#define USB_ISTAT_TOKDNE_SHIFT                   3
N#define USB_ISTAT_SLEEP_MASK                     0x10u
N#define USB_ISTAT_SLEEP_SHIFT                    4
N#define USB_ISTAT_RESUME_MASK                    0x20u
N#define USB_ISTAT_RESUME_SHIFT                   5
N#define USB_ISTAT_ATTACH_MASK                    0x40u
N#define USB_ISTAT_ATTACH_SHIFT                   6
N#define USB_ISTAT_STALL_MASK                     0x80u
N#define USB_ISTAT_STALL_SHIFT                    7
N/* INTEN Bit Fields */
N#define USB_INTEN_USBRSTEN_MASK                  0x1u
N#define USB_INTEN_USBRSTEN_SHIFT                 0
N#define USB_INTEN_ERROREN_MASK                   0x2u
N#define USB_INTEN_ERROREN_SHIFT                  1
N#define USB_INTEN_SOFTOKEN_MASK                  0x4u
N#define USB_INTEN_SOFTOKEN_SHIFT                 2
N#define USB_INTEN_TOKDNEEN_MASK                  0x8u
N#define USB_INTEN_TOKDNEEN_SHIFT                 3
N#define USB_INTEN_SLEEPEN_MASK                   0x10u
N#define USB_INTEN_SLEEPEN_SHIFT                  4
N#define USB_INTEN_RESUMEEN_MASK                  0x20u
N#define USB_INTEN_RESUMEEN_SHIFT                 5
N#define USB_INTEN_ATTACHEN_MASK                  0x40u
N#define USB_INTEN_ATTACHEN_SHIFT                 6
N#define USB_INTEN_STALLEN_MASK                   0x80u
N#define USB_INTEN_STALLEN_SHIFT                  7
N/* ERRSTAT Bit Fields */
N#define USB_ERRSTAT_PIDERR_MASK                  0x1u
N#define USB_ERRSTAT_PIDERR_SHIFT                 0
N#define USB_ERRSTAT_CRC5EOF_MASK                 0x2u
N#define USB_ERRSTAT_CRC5EOF_SHIFT                1
N#define USB_ERRSTAT_CRC16_MASK                   0x4u
N#define USB_ERRSTAT_CRC16_SHIFT                  2
N#define USB_ERRSTAT_DFN8_MASK                    0x8u
N#define USB_ERRSTAT_DFN8_SHIFT                   3
N#define USB_ERRSTAT_BTOERR_MASK                  0x10u
N#define USB_ERRSTAT_BTOERR_SHIFT                 4
N#define USB_ERRSTAT_DMAERR_MASK                  0x20u
N#define USB_ERRSTAT_DMAERR_SHIFT                 5
N#define USB_ERRSTAT_BTSERR_MASK                  0x80u
N#define USB_ERRSTAT_BTSERR_SHIFT                 7
N/* ERREN Bit Fields */
N#define USB_ERREN_PIDERREN_MASK                  0x1u
N#define USB_ERREN_PIDERREN_SHIFT                 0
N#define USB_ERREN_CRC5EOFEN_MASK                 0x2u
N#define USB_ERREN_CRC5EOFEN_SHIFT                1
N#define USB_ERREN_CRC16EN_MASK                   0x4u
N#define USB_ERREN_CRC16EN_SHIFT                  2
N#define USB_ERREN_DFN8EN_MASK                    0x8u
N#define USB_ERREN_DFN8EN_SHIFT                   3
N#define USB_ERREN_BTOERREN_MASK                  0x10u
N#define USB_ERREN_BTOERREN_SHIFT                 4
N#define USB_ERREN_DMAERREN_MASK                  0x20u
N#define USB_ERREN_DMAERREN_SHIFT                 5
N#define USB_ERREN_BTSERREN_MASK                  0x80u
N#define USB_ERREN_BTSERREN_SHIFT                 7
N/* STAT Bit Fields */
N#define USB_STAT_ODD_MASK                        0x4u
N#define USB_STAT_ODD_SHIFT                       2
N#define USB_STAT_TX_MASK                         0x8u
N#define USB_STAT_TX_SHIFT                        3
N#define USB_STAT_ENDP_MASK                       0xF0u
N#define USB_STAT_ENDP_SHIFT                      4
N#define USB_STAT_ENDP(x)                         (((uint8_t)(((uint8_t)(x))<<USB_STAT_ENDP_SHIFT))&USB_STAT_ENDP_MASK)
N/* CTL Bit Fields */
N#define USB_CTL_USBENSOFEN_MASK                  0x1u
N#define USB_CTL_USBENSOFEN_SHIFT                 0
N#define USB_CTL_ODDRST_MASK                      0x2u
N#define USB_CTL_ODDRST_SHIFT                     1
N#define USB_CTL_RESUME_MASK                      0x4u
N#define USB_CTL_RESUME_SHIFT                     2
N#define USB_CTL_HOSTMODEEN_MASK                  0x8u
N#define USB_CTL_HOSTMODEEN_SHIFT                 3
N#define USB_CTL_RESET_MASK                       0x10u
N#define USB_CTL_RESET_SHIFT                      4
N#define USB_CTL_TXSUSPENDTOKENBUSY_MASK          0x20u
N#define USB_CTL_TXSUSPENDTOKENBUSY_SHIFT         5
N#define USB_CTL_SE0_MASK                         0x40u
N#define USB_CTL_SE0_SHIFT                        6
N#define USB_CTL_JSTATE_MASK                      0x80u
N#define USB_CTL_JSTATE_SHIFT                     7
N/* ADDR Bit Fields */
N#define USB_ADDR_ADDR_MASK                       0x7Fu
N#define USB_ADDR_ADDR_SHIFT                      0
N#define USB_ADDR_ADDR(x)                         (((uint8_t)(((uint8_t)(x))<<USB_ADDR_ADDR_SHIFT))&USB_ADDR_ADDR_MASK)
N#define USB_ADDR_LSEN_MASK                       0x80u
N#define USB_ADDR_LSEN_SHIFT                      7
N/* BDTPAGE1 Bit Fields */
N#define USB_BDTPAGE1_BDTBA_MASK                  0xFEu
N#define USB_BDTPAGE1_BDTBA_SHIFT                 1
N#define USB_BDTPAGE1_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE1_BDTBA_SHIFT))&USB_BDTPAGE1_BDTBA_MASK)
N/* FRMNUML Bit Fields */
N#define USB_FRMNUML_FRM_MASK                     0xFFu
N#define USB_FRMNUML_FRM_SHIFT                    0
N#define USB_FRMNUML_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUML_FRM_SHIFT))&USB_FRMNUML_FRM_MASK)
N/* FRMNUMH Bit Fields */
N#define USB_FRMNUMH_FRM_MASK                     0x7u
N#define USB_FRMNUMH_FRM_SHIFT                    0
N#define USB_FRMNUMH_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUMH_FRM_SHIFT))&USB_FRMNUMH_FRM_MASK)
N/* TOKEN Bit Fields */
N#define USB_TOKEN_TOKENENDPT_MASK                0xFu
N#define USB_TOKEN_TOKENENDPT_SHIFT               0
N#define USB_TOKEN_TOKENENDPT(x)                  (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENENDPT_SHIFT))&USB_TOKEN_TOKENENDPT_MASK)
N#define USB_TOKEN_TOKENPID_MASK                  0xF0u
N#define USB_TOKEN_TOKENPID_SHIFT                 4
N#define USB_TOKEN_TOKENPID(x)                    (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENPID_SHIFT))&USB_TOKEN_TOKENPID_MASK)
N/* SOFTHLD Bit Fields */
N#define USB_SOFTHLD_CNT_MASK                     0xFFu
N#define USB_SOFTHLD_CNT_SHIFT                    0
N#define USB_SOFTHLD_CNT(x)                       (((uint8_t)(((uint8_t)(x))<<USB_SOFTHLD_CNT_SHIFT))&USB_SOFTHLD_CNT_MASK)
N/* BDTPAGE2 Bit Fields */
N#define USB_BDTPAGE2_BDTBA_MASK                  0xFFu
N#define USB_BDTPAGE2_BDTBA_SHIFT                 0
N#define USB_BDTPAGE2_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE2_BDTBA_SHIFT))&USB_BDTPAGE2_BDTBA_MASK)
N/* BDTPAGE3 Bit Fields */
N#define USB_BDTPAGE3_BDTBA_MASK                  0xFFu
N#define USB_BDTPAGE3_BDTBA_SHIFT                 0
N#define USB_BDTPAGE3_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE3_BDTBA_SHIFT))&USB_BDTPAGE3_BDTBA_MASK)
N/* ENDPT Bit Fields */
N#define USB_ENDPT_EPHSHK_MASK                    0x1u
N#define USB_ENDPT_EPHSHK_SHIFT                   0
N#define USB_ENDPT_EPSTALL_MASK                   0x2u
N#define USB_ENDPT_EPSTALL_SHIFT                  1
N#define USB_ENDPT_EPTXEN_MASK                    0x4u
N#define USB_ENDPT_EPTXEN_SHIFT                   2
N#define USB_ENDPT_EPRXEN_MASK                    0x8u
N#define USB_ENDPT_EPRXEN_SHIFT                   3
N#define USB_ENDPT_EPCTLDIS_MASK                  0x10u
N#define USB_ENDPT_EPCTLDIS_SHIFT                 4
N#define USB_ENDPT_RETRYDIS_MASK                  0x40u
N#define USB_ENDPT_RETRYDIS_SHIFT                 6
N#define USB_ENDPT_HOSTWOHUB_MASK                 0x80u
N#define USB_ENDPT_HOSTWOHUB_SHIFT                7
N/* USBCTRL Bit Fields */
N#define USB_USBCTRL_PDE_MASK                     0x40u
N#define USB_USBCTRL_PDE_SHIFT                    6
N#define USB_USBCTRL_SUSP_MASK                    0x80u
N#define USB_USBCTRL_SUSP_SHIFT                   7
N/* OBSERVE Bit Fields */
N#define USB_OBSERVE_DMPD_MASK                    0x10u
N#define USB_OBSERVE_DMPD_SHIFT                   4
N#define USB_OBSERVE_DPPD_MASK                    0x40u
N#define USB_OBSERVE_DPPD_SHIFT                   6
N#define USB_OBSERVE_DPPU_MASK                    0x80u
N#define USB_OBSERVE_DPPU_SHIFT                   7
N/* CONTROL Bit Fields */
N#define USB_CONTROL_DPPULLUPNONOTG_MASK          0x10u
N#define USB_CONTROL_DPPULLUPNONOTG_SHIFT         4
N/* USBTRC0 Bit Fields */
N#define USB_USBTRC0_USB_RESUME_INT_MASK          0x1u
N#define USB_USBTRC0_USB_RESUME_INT_SHIFT         0
N#define USB_USBTRC0_SYNC_DET_MASK                0x2u
N#define USB_USBTRC0_SYNC_DET_SHIFT               1
N#define USB_USBTRC0_USBRESMEN_MASK               0x20u
N#define USB_USBTRC0_USBRESMEN_SHIFT              5
N#define USB_USBTRC0_USBRESET_MASK                0x80u
N#define USB_USBTRC0_USBRESET_SHIFT               7
N/* USBFRMADJUST Bit Fields */
N#define USB_USBFRMADJUST_ADJ_MASK                0xFFu
N#define USB_USBFRMADJUST_ADJ_SHIFT               0
N#define USB_USBFRMADJUST_ADJ(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBFRMADJUST_ADJ_SHIFT))&USB_USBFRMADJUST_ADJ_MASK)
N
N/*!
N * @}
N */ /* end of group USB_Register_Masks */
N
N
N/* USB - Peripheral instance base addresses */
N/** Peripheral USB0 base address */
N#define USB0_BASE                                (0x40072000u)
N/** Peripheral USB0 base pointer */
N#define USB0                                     ((USB_Type *)USB0_BASE)
N/** Array initializer of USB peripheral base pointers */
N#define USB_BASES                                { USB0 }
N
N/*!
N * @}
N */ /* end of group USB_Peripheral_Access_Layer */
N
N
N/*
N** End of section using anonymous unions
N*/
N
N#if defined(__ARMCC_VERSION)
X#if 1L
N  #pragma pop
N#elif defined(__CWCC__)
S  #pragma pop
S#elif defined(__GNUC__)
S  /* leave anonymous unions enabled */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=default
S#else
S  #error Not supported compiler type
N#endif
N
N/*!
N * @}
N */ /* end of group Peripheral_access_layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- Backward Compatibility
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Backward_Compatibility_Symbols Backward Compatibility
N * @{
N */
N
N#define DMA_REQC_ARR_DMAC_MASK                   This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_DMAC_SHIFT                  This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_DMAC(x)                     This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_CFSM_MASK                   This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_CFSM_SHIFT                  This_symbol_has_been_deprecated
N#define DMA_REQC0                                This_symbol_has_been_deprecated
N#define DMA_REQC1                                This_symbol_has_been_deprecated
N#define DMA_REQC2                                This_symbol_has_been_deprecated
N#define DMA_REQC3                                This_symbol_has_been_deprecated
N#define MCG_S_LOLS_MASK                          MCG_S_LOLS0_MASK
N#define MCG_S_LOLS_SHIFT                         MCG_S_LOLS0_SHIFT
N#define SIM_FCFG2_MAXADDR_MASK                   SIM_FCFG2_MAXADDR0_MASK
N#define SIM_FCFG2_MAXADDR_SHIFT                  SIM_FCFG2_MAXADDR0_SHIFT
N#define SIM_FCFG2_MAXADDR                        SIM_FCFG2_MAXADDR0
N#define SPI_C2_SPLPIE_MASK                       This_symbol_has_been_deprecated
N#define SPI_C2_SPLPIE_SHIFT                      This_symbol_has_been_deprecated
N#define UART_C4_LBKDDMAS_MASK                    This_symbol_has_been_deprecated
N#define UART_C4_LBKDDMAS_SHIFT                   This_symbol_has_been_deprecated
N#define UART_C4_ILDMAS_MASK                      This_symbol_has_been_deprecated
N#define UART_C4_ILDMAS_SHIFT                     This_symbol_has_been_deprecated
N#define UART_C4_TCDMAS_MASK                      This_symbol_has_been_deprecated
N#define UART_C4_TCDMAS_SHIFT                     This_symbol_has_been_deprecated
N#define UARTLP_Type                              UART0_Type
N#define UARTLP_BDH_REG                           UART0_BDH_REG
N#define UARTLP_BDL_REG                           UART0_BDL_REG
N#define UARTLP_C1_REG                            UART0_C1_REG
N#define UARTLP_C2_REG                            UART0_C2_REG
N#define UARTLP_S1_REG                            UART0_S1_REG
N#define UARTLP_S2_REG                            UART0_S2_REG
N#define UARTLP_C3_REG                            UART0_C3_REG
N#define UARTLP_D_REG                             UART0_D_REG
N#define UARTLP_MA1_REG                           UART0_MA1_REG
N#define UARTLP_MA2_REG                           UART0_MA2_REG
N#define UARTLP_C4_REG                            UART0_C4_REG
N#define UARTLP_C5_REG                            UART0_C5_REG
N#define UARTLP_BDH_SBR_MASK                      UART0_BDH_SBR_MASK
N#define UARTLP_BDH_SBR_SHIFT                     UART0_BDH_SBR_SHIFT
N#define UARTLP_BDH_SBR(x)                        UART0_BDH_SBR(x)
N#define UARTLP_BDH_SBNS_MASK                     UART0_BDH_SBNS_MASK
N#define UARTLP_BDH_SBNS_SHIFT                    UART0_BDH_SBNS_SHIFT
N#define UARTLP_BDH_RXEDGIE_MASK                  UART0_BDH_RXEDGIE_MASK
N#define UARTLP_BDH_RXEDGIE_SHIFT                 UART0_BDH_RXEDGIE_SHIFT
N#define UARTLP_BDH_LBKDIE_MASK                   UART0_BDH_LBKDIE_MASK
N#define UARTLP_BDH_LBKDIE_SHIFT                  UART0_BDH_LBKDIE_SHIFT
N#define UARTLP_BDL_SBR_MASK                      UART0_BDL_SBR_MASK
N#define UARTLP_BDL_SBR_SHIFT                     UART0_BDL_SBR_SHIFT
N#define UARTLP_BDL_SBR(x)                        UART0_BDL_SBR(x)
N#define UARTLP_C1_PT_MASK                        UART0_C1_PT_MASK
N#define UARTLP_C1_PT_SHIFT                       UART0_C1_PT_SHIFT
N#define UARTLP_C1_PE_MASK                        UART0_C1_PE_MASK
N#define UARTLP_C1_PE_SHIFT                       UART0_C1_PE_SHIFT
N#define UARTLP_C1_ILT_MASK                       UART0_C1_ILT_MASK
N#define UARTLP_C1_ILT_SHIFT                      UART0_C1_ILT_SHIFT
N#define UARTLP_C1_WAKE_MASK                      UART0_C1_WAKE_MASK
N#define UARTLP_C1_WAKE_SHIFT                     UART0_C1_WAKE_SHIFT
N#define UARTLP_C1_M_MASK                         UART0_C1_M_MASK
N#define UARTLP_C1_M_SHIFT                        UART0_C1_M_SHIFT
N#define UARTLP_C1_RSRC_MASK                      UART0_C1_RSRC_MASK
N#define UARTLP_C1_RSRC_SHIFT                     UART0_C1_RSRC_SHIFT
N#define UARTLP_C1_DOZEEN_MASK                    UART0_C1_DOZEEN_MASK
N#define UARTLP_C1_DOZEEN_SHIFT                   UART0_C1_DOZEEN_SHIFT
N#define UARTLP_C1_LOOPS_MASK                     UART0_C1_LOOPS_MASK
N#define UARTLP_C1_LOOPS_SHIFT                    UART0_C1_LOOPS_SHIFT
N#define UARTLP_C2_SBK_MASK                       UART0_C2_SBK_MASK
N#define UARTLP_C2_SBK_SHIFT                      UART0_C2_SBK_SHIFT
N#define UARTLP_C2_RWU_MASK                       UART0_C2_RWU_MASK
N#define UARTLP_C2_RWU_SHIFT                      UART0_C2_RWU_SHIFT
N#define UARTLP_C2_RE_MASK                        UART0_C2_RE_MASK
N#define UARTLP_C2_RE_SHIFT                       UART0_C2_RE_SHIFT
N#define UARTLP_C2_TE_MASK                        UART0_C2_TE_MASK
N#define UARTLP_C2_TE_SHIFT                       UART0_C2_TE_SHIFT
N#define UARTLP_C2_ILIE_MASK                      UART0_C2_ILIE_MASK
N#define UARTLP_C2_ILIE_SHIFT                     UART0_C2_ILIE_SHIFT
N#define UARTLP_C2_RIE_MASK                       UART0_C2_RIE_MASK
N#define UARTLP_C2_RIE_SHIFT                      UART0_C2_RIE_SHIFT
N#define UARTLP_C2_TCIE_MASK                      UART0_C2_TCIE_MASK
N#define UARTLP_C2_TCIE_SHIFT                     UART0_C2_TCIE_SHIFT
N#define UARTLP_C2_TIE_MASK                       UART0_C2_TIE_MASK
N#define UARTLP_C2_TIE_SHIFT                      UART0_C2_TIE_SHIFT
N#define UARTLP_S1_PF_MASK                        UART0_S1_PF_MASK
N#define UARTLP_S1_PF_SHIFT                       UART0_S1_PF_SHIFT
N#define UARTLP_S1_FE_MASK                        UART0_S1_FE_MASK
N#define UARTLP_S1_FE_SHIFT                       UART0_S1_FE_SHIFT
N#define UARTLP_S1_NF_MASK                        UART0_S1_NF_MASK
N#define UARTLP_S1_NF_SHIFT                       UART0_S1_NF_SHIFT
N#define UARTLP_S1_OR_MASK                        UART0_S1_OR_MASK
N#define UARTLP_S1_OR_SHIFT                       UART0_S1_OR_SHIFT
N#define UARTLP_S1_IDLE_MASK                      UART0_S1_IDLE_MASK
N#define UARTLP_S1_IDLE_SHIFT                     UART0_S1_IDLE_SHIFT
N#define UARTLP_S1_RDRF_MASK                      UART0_S1_RDRF_MASK
N#define UARTLP_S1_RDRF_SHIFT                     UART0_S1_RDRF_SHIFT
N#define UARTLP_S1_TC_MASK                        UART0_S1_TC_MASK
N#define UARTLP_S1_TC_SHIFT                       UART0_S1_TC_SHIFT
N#define UARTLP_S1_TDRE_MASK                      UART0_S1_TDRE_MASK
N#define UARTLP_S1_TDRE_SHIFT                     UART0_S1_TDRE_SHIFT
N#define UARTLP_S2_RAF_MASK                       UART0_S2_RAF_MASK
N#define UARTLP_S2_RAF_SHIFT                      UART0_S2_RAF_SHIFT
N#define UARTLP_S2_LBKDE_MASK                     UART0_S2_LBKDE_MASK
N#define UARTLP_S2_LBKDE_SHIFT                    UART0_S2_LBKDE_SHIFT
N#define UARTLP_S2_BRK13_MASK                     UART0_S2_BRK13_MASK
N#define UARTLP_S2_BRK13_SHIFT                    UART0_S2_BRK13_SHIFT
N#define UARTLP_S2_RWUID_MASK                     UART0_S2_RWUID_MASK
N#define UARTLP_S2_RWUID_SHIFT                    UART0_S2_RWUID_SHIFT
N#define UARTLP_S2_RXINV_MASK                     UART0_S2_RXINV_MASK
N#define UARTLP_S2_RXINV_SHIFT                    UART0_S2_RXINV_SHIFT
N#define UARTLP_S2_MSBF_MASK                      UART0_S2_MSBF_MASK
N#define UARTLP_S2_MSBF_SHIFT                     UART0_S2_MSBF_SHIFT
N#define UARTLP_S2_RXEDGIF_MASK                   UART0_S2_RXEDGIF_MASK
N#define UARTLP_S2_RXEDGIF_SHIFT                  UART0_S2_RXEDGIF_SHIFT
N#define UARTLP_S2_LBKDIF_MASK                    UART0_S2_LBKDIF_MASK
N#define UARTLP_S2_LBKDIF_SHIFT                   UART0_S2_LBKDIF_SHIFT
N#define UARTLP_C3_PEIE_MASK                      UART0_C3_PEIE_MASK
N#define UARTLP_C3_PEIE_SHIFT                     UART0_C3_PEIE_SHIFT
N#define UARTLP_C3_FEIE_MASK                      UART0_C3_FEIE_MASK
N#define UARTLP_C3_FEIE_SHIFT                     UART0_C3_FEIE_SHIFT
N#define UARTLP_C3_NEIE_MASK                      UART0_C3_NEIE_MASK
N#define UARTLP_C3_NEIE_SHIFT                     UART0_C3_NEIE_SHIFT
N#define UARTLP_C3_ORIE_MASK                      UART0_C3_ORIE_MASK
N#define UARTLP_C3_ORIE_SHIFT                     UART0_C3_ORIE_SHIFT
N#define UARTLP_C3_TXINV_MASK                     UART0_C3_TXINV_MASK
N#define UARTLP_C3_TXINV_SHIFT                    UART0_C3_TXINV_SHIFT
N#define UARTLP_C3_TXDIR_MASK                     UART0_C3_TXDIR_MASK
N#define UARTLP_C3_TXDIR_SHIFT                    UART0_C3_TXDIR_SHIFT
N#define UARTLP_C3_R9T8_MASK                      UART0_C3_R9T8_MASK
N#define UARTLP_C3_R9T8_SHIFT                     UART0_C3_R9T8_SHIFT
N#define UARTLP_C3_R8T9_MASK                      UART0_C3_R8T9_MASK
N#define UARTLP_C3_R8T9_SHIFT                     UART0_C3_R8T9_SHIFT
N#define UARTLP_D_R0T0_MASK                       UART0_D_R0T0_MASK
N#define UARTLP_D_R0T0_SHIFT                      UART0_D_R0T0_SHIFT
N#define UARTLP_D_R1T1_MASK                       UART0_D_R1T1_MASK
N#define UARTLP_D_R1T1_SHIFT                      UART0_D_R1T1_SHIFT
N#define UARTLP_D_R2T2_MASK                       UART0_D_R2T2_MASK
N#define UARTLP_D_R2T2_SHIFT                      UART0_D_R2T2_SHIFT
N#define UARTLP_D_R3T3_MASK                       UART0_D_R3T3_MASK
N#define UARTLP_D_R3T3_SHIFT                      UART0_D_R3T3_SHIFT
N#define UARTLP_D_R4T4_MASK                       UART0_D_R4T4_MASK
N#define UARTLP_D_R4T4_SHIFT                      UART0_D_R4T4_SHIFT
N#define UARTLP_D_R5T5_MASK                       UART0_D_R5T5_MASK
N#define UARTLP_D_R5T5_SHIFT                      UART0_D_R5T5_SHIFT
N#define UARTLP_D_R6T6_MASK                       UART0_D_R6T6_MASK
N#define UARTLP_D_R6T6_SHIFT                      UART0_D_R6T6_SHIFT
N#define UARTLP_D_R7T7_MASK                       UART0_D_R7T7_MASK
N#define UARTLP_D_R7T7_SHIFT                      UART0_D_R7T7_SHIFT
N#define UARTLP_MA1_MA_MASK                       UART0_MA1_MA_MASK
N#define UARTLP_MA1_MA_SHIFT                      UART0_MA1_MA_SHIFT
N#define UARTLP_MA1_MA(x)                         UART0_MA1_MA(x)
N#define UARTLP_MA2_MA_MASK                       UART0_MA2_MA_MASK
N#define UARTLP_MA2_MA_SHIFT                      UART0_MA2_MA_SHIFT
N#define UARTLP_MA2_MA(x)                         UART0_MA2_MA(x)
N#define UARTLP_C4_OSR_MASK                       UART0_C4_OSR_MASK
N#define UARTLP_C4_OSR_SHIFT                      UART0_C4_OSR_SHIFT
N#define UARTLP_C4_OSR(x)                         UART0_C4_OSR(x)
N#define UARTLP_C4_M10_MASK                       UART0_C4_M10_MASK
N#define UARTLP_C4_M10_SHIFT                      UART0_C4_M10_SHIFT
N#define UARTLP_C4_MAEN2_MASK                     UART0_C4_MAEN2_MASK
N#define UARTLP_C4_MAEN2_SHIFT                    UART0_C4_MAEN2_SHIFT
N#define UARTLP_C4_MAEN1_MASK                     UART0_C4_MAEN1_MASK
N#define UARTLP_C4_MAEN1_SHIFT                    UART0_C4_MAEN1_SHIFT
N#define UARTLP_C5_RESYNCDIS_MASK                 UART0_C5_RESYNCDIS_MASK
N#define UARTLP_C5_RESYNCDIS_SHIFT                UART0_C5_RESYNCDIS_SHIFT
N#define UARTLP_C5_BOTHEDGE_MASK                  UART0_C5_BOTHEDGE_MASK
N#define UARTLP_C5_BOTHEDGE_SHIFT                 UART0_C5_BOTHEDGE_SHIFT
N#define UARTLP_C5_RDMAE_MASK                     UART0_C5_RDMAE_MASK
N#define UARTLP_C5_RDMAE_SHIFT                    UART0_C5_RDMAE_SHIFT
N#define UARTLP_C5_TDMAE_MASK                     UART0_C5_TDMAE_MASK
N#define UARTLP_C5_TDMAE_SHIFT                    UART0_C5_TDMAE_SHIFT
N#define UARTLP_BASES                             UARTLP_BASES
N#define NV_FOPT_EZPORT_DIS_MASK                  This_symbol_has_been_deprecated
N#define NV_FOPT_EZPORT_DIS_SHIFT                 This_symbol_has_been_deprecated
N
N/*!
N * @}
N */ /* end of group Backward_Compatibility_Symbols */
N
N
N#endif  /* #if !defined(MKL25Z4_H_) */
N
N/* MKL25Z4.h, eof. */
L 44 "src\system_MKL25Z4.c" 2
N
N#define DISABLE_WDOG    0
N
N#define CLOCK_SETUP     0
N/* Predefined clock setups
N   0 ... Multipurpose Clock Generator (MCG) in FLL Engaged Internal (FEI) mode
N         Reference clock source for MCG module is the slow internal clock source 32.768kHz
N         Core clock = 41.94MHz, BusClock = 13.98MHz
N   1 ... Multipurpose Clock Generator (MCG) in PLL Engaged External (PEE) mode
N         Reference clock source for MCG module is an external crystal 8MHz
N         Core clock = 48MHz, BusClock = 24MHz
N   2 ... Multipurpose Clock Generator (MCG) in Bypassed Low Power External (BLPE) mode
N         Core clock/Bus clock derived directly from an external crystal 8MHz with no multiplication
N         Core clock = 8MHz, BusClock = 8MHz
N*/
N
N/*----------------------------------------------------------------------------
N  Define clock source values
N *----------------------------------------------------------------------------*/
N#if (CLOCK_SETUP == 0)
X#if (0 == 0)
N    #define CPU_XTAL_CLK_HZ                 8000000u /* Value of the external crystal or oscillator clock frequency in Hz */
N    #define CPU_INT_SLOW_CLK_HZ             32768u   /* Value of the slow internal oscillator clock frequency in Hz  */
N    #define CPU_INT_FAST_CLK_HZ             4000000u /* Value of the fast internal oscillator clock frequency in Hz  */
N    #define DEFAULT_SYSTEM_CLOCK            41943040u /* Default System clock value */
N#elif (CLOCK_SETUP == 1)
S    #define CPU_XTAL_CLK_HZ                 8000000u /* Value of the external crystal or oscillator clock frequency in Hz */
S    #define CPU_INT_SLOW_CLK_HZ             32768u   /* Value of the slow internal oscillator clock frequency in Hz  */
S    #define CPU_INT_FAST_CLK_HZ             4000000u /* Value of the fast internal oscillator clock frequency in Hz  */
S    #define DEFAULT_SYSTEM_CLOCK            48000000u /* Default System clock value */
S#elif (CLOCK_SETUP == 2)
S    #define CPU_XTAL_CLK_HZ                 8000000u /* Value of the external crystal or oscillator clock frequency in Hz */
S    #define CPU_INT_SLOW_CLK_HZ             32768u   /* Value of the slow internal oscillator clock frequency in Hz  */
S    #define CPU_INT_FAST_CLK_HZ             4000000u /* Value of the fast internal oscillator clock frequency in Hz  */
S    #define DEFAULT_SYSTEM_CLOCK            8000000u /* Default System clock value */
N#endif /* (CLOCK_SETUP == 2) */
N
N
N/* ----------------------------------------------------------------------------
N   -- Core clock
N   ---------------------------------------------------------------------------- */
N
Nuint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;
Xuint32_t SystemCoreClock = 41943040u;
N
N/* ----------------------------------------------------------------------------
N   -- SystemInit()
N   ---------------------------------------------------------------------------- */
N
Nvoid SystemInit (void) {
N#if (DISABLE_WDOG)
X#if (0)
S  /* Disable the WDOG module */
S  /* SIM_COPC: COPT=0,COPCLKS=0,COPW=0 */
S  SIM->COPC = (uint32_t)0x00u;
N#endif /* (DISABLE_WDOG) */
N#if (CLOCK_SETUP == 0)
X#if (0 == 0)
N  /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=2,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
X   
N  SIM->CLKDIV1 = (uint32_t)0x00020000UL; /* Update system prescalers */
X  ((SIM_Type *)(0x40047000u))->CLKDIV1 = (uint32_t)0x00020000UL;  
N  /* Switch to FEI Mode */
N  /* MCG->C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
N  MCG->C1 = (uint8_t)0x06U;
X  ((MCG_Type *)(0x40064000u))->C1 = (uint8_t)0x06U;
N  /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
X   
N  MCG->C2 = (uint8_t)0x00U;
X  ((MCG_Type *)(0x40064000u))->C2 = (uint8_t)0x00U;
N  /* MCG->C4: DMX32=0,DRST_DRS=1 */
N  MCG->C4 = (uint8_t)((MCG->C4 & (uint8_t)~(uint8_t)0xC0U) | (uint8_t)0x20U);
X  ((MCG_Type *)(0x40064000u))->C4 = (uint8_t)((((MCG_Type *)(0x40064000u))->C4 & (uint8_t)~(uint8_t)0xC0U) | (uint8_t)0x20U);
N  /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
X   
N  OSC0->CR = (uint8_t)0x80U;
X  ((OSC_Type *)(0x40065000u))->CR = (uint8_t)0x80U;
N  /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
X   
N  MCG->C5 = (uint8_t)0x00U;
X  ((MCG_Type *)(0x40064000u))->C5 = (uint8_t)0x00U;
N  /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
N  MCG->C6 = (uint8_t)0x00U;
X  ((MCG_Type *)(0x40064000u))->C6 = (uint8_t)0x00U;
N  while((MCG->S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
X  while((((MCG_Type *)(0x40064000u))->S & 0x10u) == 0x00U) {  
N  }
N  while((MCG->S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
X  while((((MCG_Type *)(0x40064000u))->S & 0x0CU) != 0x00U) {     
N  }
N#elif (CLOCK_SETUP == 1)
S  /* SIM->SCGC5: PORTA=1 */
S  SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
S  /* SIM->CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
X   
S  SIM->CLKDIV1 = (uint32_t)0x10010000UL; /* Update system prescalers */
S  /* PORTA->PCR18: ISF=0,MUX=0 */
S  PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
S  /* PORTA->PCR19: ISF=0,MUX=0 */
S  PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
S  /* Switch to FBE Mode */
S  /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
X   
S  OSC0->CR = (uint8_t)0x89U;
S  /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
X   
S  MCG->C2 = (uint8_t)0x24U;
S  /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
S  MCG->C1 = (uint8_t)0x9AU;
S  /* MCG->C4: DMX32=0,DRST_DRS=0 */
S  MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
S  /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
X   
S  MCG->C5 = (uint8_t)0x01U;
S  /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
S  MCG->C6 = (uint8_t)0x00U;
S  while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
S  }
S  while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
S  }
S  /* Switch to PBE Mode */
S  /* MCG->C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
S  MCG->C6 = (uint8_t)0x40U;
S  while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
S  }
S  while((MCG->S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
S  }
S  /* Switch to PEE Mode */
S  /* MCG->C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
S  MCG->C1 = (uint8_t)0x1AU;
S  while((MCG->S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
S  }
S#elif (CLOCK_SETUP == 2)
S  /* SIM->SCGC5: PORTA=1 */
S  SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
S  /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
X   
S  SIM->CLKDIV1 = (uint32_t)0x00000000UL; /* Update system prescalers */
S  /* PORTA->PCR18: ISF=0,MUX=0 */
S  PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
S  /* PORTA->PCR19: ISF=0,MUX=0 */
S  PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
S  /* Switch to FBE Mode */
S  /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
X   
S  OSC0->CR = (uint8_t)0x89U;
S  /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
X   
S  MCG->C2 = (uint8_t)0x24U;
S  /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
S  MCG->C1 = (uint8_t)0x9AU;
S  /* MCG->C4: DMX32=0,DRST_DRS=0 */
S  MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
S  /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
X   
S  MCG->C5 = (uint8_t)0x00U;
S  /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
S  MCG->C6 = (uint8_t)0x00U;
S  while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
S  }
S  while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
S  }
S  /* Switch to BLPE Mode */
S  /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=1,IRCS=0 */
X   
S  MCG->C2 = (uint8_t)0x26U;
S  while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
S  }
N#endif /* (CLOCK_SETUP == 2) */
N}
N
N/* ----------------------------------------------------------------------------
N   -- SystemCoreClockUpdate()
N   ---------------------------------------------------------------------------- */
N
Nvoid SystemCoreClockUpdate (void) {
N  uint32_t MCGOUTClock;                                                        /* Variable to store output clock frequency of the MCG module */
N  uint8_t Divider;
N
N  if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x0u) {
X  if ((((MCG_Type *)(0x40064000u))->C1 & 0xC0u) == 0x0u) {
N    /* Output of FLL or PLL is selected */
N    if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u) {
X    if ((((MCG_Type *)(0x40064000u))->C6 & 0x40u) == 0x0u) {
N      /* FLL is selected */
N      if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u) {
X      if ((((MCG_Type *)(0x40064000u))->C1 & 0x4u) == 0x0u) {
N        /* External reference clock is selected */
N        MCGOUTClock = CPU_XTAL_CLK_HZ;                                       /* System oscillator drives MCG clock */
X        MCGOUTClock = 8000000u;                                        
N        Divider = (uint8_t)(1u << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
X        Divider = (uint8_t)(1u << ((((MCG_Type *)(0x40064000u))->C1 & 0x38u) >> 3));
N        MCGOUTClock = (MCGOUTClock / Divider);  /* Calculate the divided FLL reference clock */
N        if ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) {
X        if ((((MCG_Type *)(0x40064000u))->C2 & 0x30u) != 0x0u) {
N          MCGOUTClock /= 32u;                                                  /* If high range is enabled, additional 32 divider is active */
N        } /* ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) */
N      } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
N        MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                     /* The slow internal reference clock is selected */
X        MCGOUTClock = 32768u;                                      
N      } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
N      /* Select correct multiplier to calculate the MCG output clock  */
N      switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
X      switch (((MCG_Type *)(0x40064000u))->C4 & (0x80u | 0x60u)) {
N        case 0x0u:
N          MCGOUTClock *= 640u;
N          break;
N        case 0x20u:
N          MCGOUTClock *= 1280u;
N          break;
N        case 0x40u:
N          MCGOUTClock *= 1920u;
N          break;
N        case 0x60u:
N          MCGOUTClock *= 2560u;
N          break;
N        case 0x80u:
N          MCGOUTClock *= 732u;
N          break;
N        case 0xA0u:
N          MCGOUTClock *= 1464u;
N          break;
N        case 0xC0u:
N          MCGOUTClock *= 2197u;
N          break;
N        case 0xE0u:
N          MCGOUTClock *= 2929u;
N          break;
N        default:
N          break;
N      }
N    } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
N      /* PLL is selected */
N      Divider = (1u + (MCG->C5 & MCG_C5_PRDIV0_MASK));
X      Divider = (1u + (((MCG_Type *)(0x40064000u))->C5 & 0x1Fu));
N      MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider);                     /* Calculate the PLL reference clock */
X      MCGOUTClock = (uint32_t)(8000000u / Divider);                      
N      Divider = ((MCG->C6 & MCG_C6_VDIV0_MASK) + 24u);
X      Divider = ((((MCG_Type *)(0x40064000u))->C6 & 0x1Fu) + 24u);
N      MCGOUTClock *= Divider;                       /* Calculate the MCG output clock */
N    } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
N  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40u) {
X  } else if ((((MCG_Type *)(0x40064000u))->C1 & 0xC0u) == 0x40u) {
N    /* Internal reference clock is selected */
N    if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u) {
X    if ((((MCG_Type *)(0x40064000u))->C2 & 0x1u) == 0x0u) {
N      MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                       /* Slow internal reference clock selected */
X      MCGOUTClock = 32768u;                                        
N    } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
N      MCGOUTClock = CPU_INT_FAST_CLK_HZ / (1 << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));  /* Fast internal reference clock selected */
X      MCGOUTClock = 4000000u / (1 << ((((MCG_Type *)(0x40064000u))->SC & 0xEu) >> 1));   
N    } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
N  } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u) {
X  } else if ((((MCG_Type *)(0x40064000u))->C1 & 0xC0u) == 0x80u) {
N    /* External reference clock is selected */
N    MCGOUTClock = CPU_XTAL_CLK_HZ;                                           /* System oscillator drives MCG clock */
X    MCGOUTClock = 8000000u;                                            
N  } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
N    /* Reserved value */
N    return;
N  } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
N  SystemCoreClock = (MCGOUTClock / (1u + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
X  SystemCoreClock = (MCGOUTClock / (1u + ((((SIM_Type *)(0x40047000u))->CLKDIV1 & 0xF0000000u) >> 28)));
N}
